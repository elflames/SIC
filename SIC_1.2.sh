#!/bin/sh

# SIC.sh
#
#
# Created by Duncan McCracken on 05/06/11.
# Email Bug Reports to duncan.mccracken@mondada.com.au
#
# Thanks to: Tomos Tyler; Charles Edge and Alan Gordon for their feedback and
# ideas when this was a personal project.
#
# Copyright 2011 Mondada Pty Ltd. All rights reserved.
#
# Changes in 1.2rc10
#	Added code to enable the language chooser in vanilla images created by install.
#	Added a rudimentary progress indicator to the install package function.
#	Added an additional line to the image cleanup to remove the Spotlight folder.
#	Changed the default image size to match a 64 GB SSD, to ensure the images will
#	restore to smaller drives.
#
# Changes in 1.2rc9
#	Updated the source selection function to differentiate between installers
#	and devices in the create image section - thanks Mika Viikki.
#
# Changes in 1.2rc8
#	Lion install.
#	Fixed an issue with the FirstBootPath, not being prefixed with the target
#	volume - thanks Mika Viikki.
#	Updated the code for calculating the device name when imaging a device, if
#	there are more than the standard partitions created by the installation
#	process - thanks Mika Viikki.
#	Updated the code that validates the packages against the currently mounted
#	image to avoid it skipping packages in some situations - thanks Mika Viikki.
#
# Changes in 1.2rc7
#	Updated the naming of exported masters, to retain original build and append
#	the update build to the filename.
#	Updated behaviour when exiting 'level 2' menus to not retain the selections,
#	this seems to yield a faster workflow and avoids snow/lion variances.
#	Updated Remote Management function to issue kickstart command on first boot
#	 - thanks Mark Hatch.
#	Updated create image function to eliminate a 'resource busy' error when
#	running SIC under Lion.
#	Added support for the additional languages in Lion.
#	Updated the references to the GeoKit.framework to use the target image
#	rather than the current running system.
#	Updated attach image function to use a different mechanism to calculate the
#	volume name, which eliminates an error in Lion, and allows for clean-up of
#	the recovery partition - thanks Mika Viikki.
#
# Changes in 1.2rc6
#	Credit given where credit was due. :)
#	Fixed a bug that caused a few errors on first run, while setting default
#	preferences.
#	Adjusted the code for setting password on Lion systems (supressed a false
#	error, which is generated by code that was intended to handle snow leopard
#	behaviour) - thanks Mark Hatch.
#	Tuned some of the behaviours relating to image and package selection to
#	prevent constant mounting / unmounting of images, and retained selection of
#	the last installed package.
#	Added a Press any key to the completion of the package install to allow the
#	viewing of results.
#	Added a check to prevent system configuration of a server image, this does
#	not end well.
#
# Changes in 1.2rc5
#	Added code to create the Packages directory, if it doesn't exist.
#
# Changes in 1.2rc4
#	Updated create image function to create the library folder prior to imaging a
#	device - Thanks Erik Berglund.
#	Change the default response for custom package install to "No".
#	Added code to check the build number prior to export and update name
#	accordingly.
#
# Changes in 1.2rc3
#	Added Install Package Feature.
#	Updated Create Image menu to auto detect install or device.
#	Updated menu functions to hide disabled items.
#	Updated validation of image size function to allow floating point numbers.
#	Updated create image from device to handle resource busy error - Thanks
#	Erik Berglund.
#
# To Do, this version
#	Add support for additional languages in Lion.
#
# Proposed features for version 1.5
#	Add Software Update settings option.
#	Add support for "install package at system startup".
#	Record package install history.
#	Update auto-login function for user creation, when multiple accounts exist.
#	Add support for multiple configuration (shadow) files.
#	Add support for Directory binding.
#	Add support for a directory-based administrative group.
#	Add unattended option.
#	Add help section.

# The following default variables are used if the system fails to get a property
# These can all be set in preferences, there is no need to edit the script

# Image Library Path
LibraryPath="/Users/Shared/SIC/Library"
# Export Path
ExportPath="/Users/Shared/SIC/Masters"
# Package Path
PackagePath="/Users/Shared/SIC/Packages"
# Image Size (GB)
ImageSize="56.5"
minImageSize="5"
maxImageSize="2048"
# Volume Name
VolumeName="Macintosh HD"
# Main Language
AppleLanguage="en"
# Country Name
CountryName="U.S."
# Keyboard Layout
AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.US"
InputMode=""
# Set date and time automatically
ntpdDisabled="true"
# Time Zone
TimezoneAuto="false"
# Remote Login
sshdDisabled="true"
# Remote Management
RemoteManagement="false"
# Computer Name
ComputerName="Model and MAC Address"
# Full Name
RealName="Local Administrator"
# Account name
RecordName="localadmin"
# User ID
UniqueID=501
# Group ID
PrimaryGroupID=20
# Password
Password=""
# Automatic Login
AutoLogin="false"
# Password Hint
AuthenticationHint=""
# Login shell
UserShell="/bin/bash"
# Home Directory
NFSHomeDirectory="/var/localadmin"

# FirstBoot Script Path
FirstBootPath="/usr/libexec/FirstBoot"

# ${0}:	Path to this script
scriptName=`basename "${0}"`

# Version
SICVersion="1.2rc12"

function display_Title {
	# ${1}:	Title
	clear
	# printf "\033c"
	printf "\033[1mSystem Image Creator (SIC) ${SICVersion}\033[m\n"
	printf "\n\033[1m${1}\033[m\n\n"
}

function display_Options {
	# ${1}:	Text above selection list
	# ${2}:	Text for prompt
	printf "${1}\n\n"
	PS3=`printf "\n${2}"`
}

function press_anyKey {
	# ${1}:	Message to display above prompt
	if [ -n "${1}" ] ; then echo "${1}" ; echo ; fi
	read -sn 1 -p "Press any key to continue..." anyKey < /dev/tty
	echo
}

function set_osName {
	# ${1}:	System Minor Version
	case ${1} in
		7 ) osName="lion" ;;
		6 ) osName="snowleopard" ;;
		5 ) osName="leopard" ;;
		* ) osName="" ;;
	esac
}

function privelege_Check {
	if [ `id -u` -ne 0 ] ; then
		echo "${scriptName} must be run with root privileges, exiting."
		exit 1
	fi
}

function get_LibraryPath {
	prefLibraryPath=`defaults read ~/Library/Preferences/au.com.mondada.SIC "LibraryPath" 2>/dev/null`
	if [ -n "${prefLibraryPath}" ] ; then
		if [ -e "${prefLibraryPath}" ] ; then
			LibraryPath="${prefLibraryPath}"
		else
			printf "Warning:		Library Path missing, reverting to default\n"
		fi
	fi
	echo "LibraryPath:		${LibraryPath}"
}

function get_ExportPath {
	prefExportPath=`defaults read ~/Library/Preferences/au.com.mondada.SIC "ExportPath" 2>/dev/null`
	if [ -n "${prefExportPath}" ] ; then
		if [ -e "${prefExportPath}" ] ; then
			ExportPath="${prefExportPath}"
		else
			printf "Warning:		Export Path missing, reverting to default\n"
		fi
	fi
	echo "ExportPath:		${ExportPath}"
}

function get_PackagePath {
	prefPackagePath=`defaults read ~/Library/Preferences/au.com.mondada.SIC "PackagePath" 2>/dev/null`
	if [ -n "${prefPackagePath}" ] ; then
		if [ -e "${prefPackagePath}" ] ; then
			PackagePath="${prefPackagePath}"
		else
			printf "Warning:		Export Path missing, reverting to default\n"
		fi
	fi
	echo "PackagePath:		${PackagePath}"
}

function save_LibraryPath {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "LibraryPath" -string "${LibraryPath}"
}

function save_ExportPath {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "ExportPath" -string "${ExportPath}"
}

function save_PackagePath {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "PackagePath" -string "${PackagePath}"
}

function display_LibraryPath {
	echo "Library Path:	${LibraryPath}"
}

function display_ExportPath {
	echo "Export Path:	${ExportPath}"
}

function display_PackagePath {
	echo "Package Path:	${PackagePath}"
}

function check_Path {
	# ${1}:	Path to validate
	validPath=0
	# Check for invalid characters
	escapedPath="${1//[\$\(\)\[\]\`\~\?\*\#\\\!\|\'\"]/_}"
	if [ "${1}" != "${escapedPath}" ] ; then
		printf "\nThe specified path cannot contain the following characters: \033[1m\$()[]\`~?*#\!|'\"\033[m\n" ; validPath=1 ; return 1
	fi
	# Check that it's absolute
	relativePath=`echo "${1}" | awk -F "/" '{print $1}'`
	if [ -n "${relativePath}" ] ; then
		printf "\nThe specified path must be absolute, please enter an absolute path\n" ; validPath=1 ; return 1
	fi
	# Check the volume exists
	if echo "${1}" | grep -q "/Volumes/" ; then
		volumeName=`echo "${1}" | awk -F "/Volumes/" '{print $NF}' | awk -F "/" '{print $1}'`
		if [ ! -d "/Volumes/${volumeName}" ] ; then
			printf "\nThe specified volume cannot be found, please enter a valid path\n" ; validPath=1 ; return 1
		fi
	fi
	# Check that the path is unique
	if [ "${1}" == "${LibraryPath}" ] || [ "${1}" == "${ExportPath}" ] ; then
		printf "\nThe library and export paths cannot be the same, please enter a unique path\n" ; validPath=1 ; return 1
	fi
	return 0
}

function set_LibraryPath {
	display_Title "Library Path"
	printf "Library Path (${LibraryPath}): " ; read newLibraryPath
	if [ -z "${newLibraryPath}" ] || [ "${newLibraryPath}" == "${LibraryPath}" ] ; then return 0 ; fi
	check_Path "${newLibraryPath}"
	while [ ${validPath} -ne 0 ] ; do
		printf "\nLibrary Path (${LibraryPath}): " ; read newLibraryPath
		if [ -z "${newLibraryPath}" ] || [ "${newLibraryPath}" == "${LibraryPath}" ] ; then return 0 ; fi
		check_Path "${newLibraryPath}"
	done
	LibraryPath="${newLibraryPath}"
}

function set_ExportPath {
	display_Title "Export Path"
	printf "Export Path (${ExportPath}): " ; read newExportPath
	if [ -z "${newExportPath}" ] || [ "${newExportPath}" == "${ExportPath}" ] ; then return 0 ; fi
	check_Path "${newExportPath}"
	while [ ${validPath} -ne 0 ] ; do
		printf "\nExport Path (${ExportPath}): " ; read newExportPath
		if [ -z "${newExportPath}" ] || [ "${newExportPath}" == "${ExportPath}" ] ; then return 0 ; fi
		check_Path "${newExportPath}"
	done
	ExportPath="${newExportPath}"
}

function set_PackagePath {
	display_Title "Package Path"
	printf "Package Path (${PackagePath}): " ; read newPackagePath
	if [ -z "${newPackagePath}" ] || [ "${newPackagePath}" == "${PackagePath}" ] ; then return 0 ; fi
	check_Path "${newPackagePath}"
	while [ ${validPath} -ne 0 ] ; do
		printf "\nExport Path (${PackagePath}): " ; read newPackagePath
		if [ -z "${newPackagePath}" ] || [ "${newPackagePath}" == "${PackagePath}" ] ; then return 0 ; fi
		check_Path "${newPackagePath}"
	done
	PackagePath="${newPackagePath}"
}

function get_DefaultPaths {
	get_LibraryPath
	get_ExportPath
	get_PackagePath
}

function save_DefaultPaths {
	save_LibraryPath
	save_ExportPath
	save_PackagePath
}

function display_DefaultPaths {
	display_LibraryPath
	display_ExportPath
	display_PackagePath
}

function menu_DefaultPaths {
	pathOptions=( "Library Path" "Export Path" "Package Path" "Previous Menu" )
	while [ "${pathOption}" != "Previous Menu" ] ; do
		display_Title "Default Paths"
		display_DefaultPaths
		echo
		display_Options "Options" "Select an option: "
		select pathOption in "${pathOptions[@]}" ; do
			case "${pathOption}" in
				"Library Path" ) set_LibraryPath ; pathOption="" ; break ;;
				"Export Path" ) set_ExportPath ; pathOption="" ; break ;;
				"Package Path" ) set_PackagePath ; pathOption="" ; break ;;
				"Previous Menu" ) break ;;
			esac
		done
	done
	pathOption=""
}

function get_ImageSize {
	prefImageSize=`defaults read ~/Library/Preferences/au.com.mondada.SIC "ImageSize" 2>/dev/null`
	if [ -n "${prefImageSize}" ] ; then ImageSize="${prefImageSize}" ; fi
	echo "ImageSize:		${ImageSize}"
}

function save_ImageSize {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "ImageSize" -float "${ImageSize}"
}

function display_ImageSize {
	echo "Image Size:	${ImageSize} GB"
}

function check_Size {
	# ${1}:	Size to validate
	validSize=0
	# Remove invalid characters
	newImageSize="${1//[^0-9.]/}"
	# Validate the clean string to ensure its numeric
	isValid=$( echo "scale=0; ${newImageSize}/${newImageSize} + 1" | bc -l 2>/dev/null )
	if [ ${isValid} -gt 1 ] ; then
		# Check that it's larger than 5 GB
		if [ $( echo "${newImageSize} < ${minImageSize}" | bc 2>/dev/null ) -ne 0 ] ; then printf "\nMac OS X requires at least \033[1m${minImageSize}\033[m GB of free space to install.\n" ; ImageSize="${minImageSize}" ; validSize=1 ; return 1 ; fi
		# Check that it's smaller than 2 TB
		if [ $( echo "${newImageSize} > ${maxImageSize}" | bc 2>/dev/null ) -ne 0 ] ; then printf "\nThe maximum image size is \033[1m${maxImageSize}\033[m GB.\n" ; ImageSize="${maxImageSize}" ; validSize=1 ; return 1 ; fi
		return 0
	else
		printf "\n\033[1m${1}\033[m is not a valid value, please enter a numeric value.\n" ; validSize=1 ; return 1
	fi
}

function set_ImageSize {
	display_Title "Image Size"
	printf "Image Size (${ImageSize}): " ; read newImageSize
	if [ -z "${newImageSize}" ] || [ "${newImageSize}" == "${ImageSize}" ] ; then return 0 ; fi
	check_Size "${newImageSize}"
	while [ ${validSize} -ne 0 ] ; do
		printf "\nImage Size (${ImageSize}): " ; read newImageSize
		if [ -z "${newImageSize}" ] || [ "${newImageSize}" == "${ImageSize}" ] ; then return 0 ; fi
		check_Size "${newImageSize}"
	done
	ImageSize="${newImageSize}"
}

function get_VolumeName {
	prefVolumeName=`defaults read ~/Library/Preferences/au.com.mondada.SIC "VolumeName" 2>/dev/null`
	if [ -n "${prefVolumeName}" ] ; then VolumeName="${prefVolumeName}" ; fi
	echo "VolumeName:		${VolumeName}"
}

function save_VolumeName {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "VolumeName" -string "${VolumeName}"
}

function display_VolumeName {
	echo "Volume Name:	${VolumeName}"
}

function check_VolumeName {
	# ${1}:	Volume Name to validate
	validName=0
	# Check for invalid characters
	escapedName="${1//[\$\(\)\[\]\`\~\?\*\#\\\!\|\'\"]/_}"
	if [ "${1}" != "${escapedName}" ] ; then printf "\nThe volume name cannot contain the following characters: \033[1m\$()[]\`~?*#\!|'\"\033[m\n" ; validName=1 ; return 1 ; fi
	return 0
}

function set_VolumeName {
	display_Title "Volume Name"
	printf "Volume Name (${VolumeName}): " ; read newVolumeName
	if [ -z "${newVolumeName}" ] || [ "${newVolumeName}" == "${VolumeName}" ] ; then return 0 ; fi
	newVolumeName="${newVolumeName//\//:}"
	check_VolumeName "${newVolumeName}"
	while [ ${validName} -ne 0 ] ; do
		printf "Volume Name (${VolumeName}): " ; read newVolumeName
		if [ -z "${newVolumeName}" ] || [ "${newVolumeName}" == "${VolumeName}" ] ; then return 0 ; fi
		newVolumeName="${newVolumeName//\//:}"
		check_VolumeName "${newVolumeName}"
	done
	VolumeName="${newVolumeName}"
}

function get_ImageSettings {
	get_ImageSize
	get_VolumeName
}

function save_ImageSettings {
	save_ImageSize
	save_VolumeName
}

function display_ImageSettings {
	display_ImageSize
	display_VolumeName
}

function menu_ImageSettings {
	imageOptions=( "Image Size" "Volume Name" "Previous Menu" )
	while [ "${imageOption}" != "Previous Menu" ] ; do
		display_Title "Image Settings"
		display_ImageSettings
		echo
		display_Options "Options" "Select an option: "
		select imageOption in "${imageOptions[@]}" ; do
			case "${imageOption}" in
				"Image Size" ) set_ImageSize ; imageOption="" ; break ;;
				"Volume Name" ) set_VolumeName ; imageOption="" ; break ;;
				"Previous Menu" ) break ;;
			esac
		done
	done
	imageOption=""
}

function set_AppleLanguage {
	# ${1}: mainLanguage
	case "${1}" in
		"English" ) AppleLanguage="en" ; defaultCountryNames=( "United States" "Canada" "United Kingdom" "Australia" "New Zealand" "Ireland" ) ; UserTemplate="English" ;;
		"Japanese" ) AppleLanguage="ja" ; defaultCountryNames=( "Japan" ) ; UserTemplate="Japanese" ;;
		"French" ) AppleLanguage="fr" ; defaultCountryNames=( "Belgium" "Canada" "France" "Luxembourg" "Switzerland" ) ; UserTemplate="French" ;;
		"German" ) AppleLanguage="de" ; defaultCountryNames=( "Germany" "Luxembourg" "Austria" "Switzerland" ) ; UserTemplate="German" ;;
		"Spanish" ) AppleLanguage="es" ; defaultCountryNames=( "Antigua and Barbuda" "Argentina" "Chile" "Costa Rica" "Spain" "Philippines" "Mexico" "Panama" "Dominican Republic" "Venezuela" ) ; UserTemplate="Spanish" ;;
		"Italian" ) AppleLanguage="it" ; defaultCountryNames=( "Italy" ) ; UserTemplate="Italian" ;;
		"Dutch" ) AppleLanguage="nl" ; defaultCountryNames=( "Netherlands" "Belgium" ) ; UserTemplate="Dutch" ;;
		"Swedish" ) AppleLanguage="sv" ; defaultCountryNames=( "Sweden" ) ; UserTemplate="sv" ;;
		"Norwegian" ) AppleLanguage="nb" ; defaultCountryNames=( "Norway" ) ; UserTemplate="no" ;;
		"Danish" ) AppleLanguage="da" ; defaultCountryNames=( "Denmark" ) ; UserTemplate="da" ;;
		"Finnish" ) AppleLanguage="fi" ; defaultCountryNames=( "Finland" ) ; UserTemplate="fi" ;;
		"Polish" ) AppleLanguage="pl" ; defaultCountryNames=( "Poland" ) ; UserTemplate="pl" ;;
		"Portuguese" ) AppleLanguage="pt" ; defaultCountryNames=( "Brazil" "Portugal" ) ; UserTemplate="pt" ;;
		"Portuguese (Portugal)" ) AppleLanguage="pt-PT" ; defaultCountryNames=( "Portugal" ) ; UserTemplate="pt_PT" ;;
		"Russian" ) AppleLanguage="ru" ; defaultCountryNames=( "Russia" "Belarus" "Estonia" "Kazakhstan" "Kyrgyzstan" "Latvia" "Svalbard and Jan Mayen" "Tajikistan" "Ukraine" "Uzbekistan" ) ; UserTemplate="ru" ;;
		"Chinese (Simplified)" ) AppleLanguage="zh-Hans" ; defaultCountryNames=( "China" ) ; UserTemplate="zh_CN" ;;
		"Chinese (Traditional)" ) AppleLanguage="zh-Hant" ; defaultCountryNames=( "China" ) ; UserTemplate="zh_TW" ;;
		"Korean" ) AppleLanguage="ko" ; defaultCountryNames=( "South Korea" ) ; UserTemplate="ko" ;;
	esac
}

function set_mainLanguage {
	# ${1}: AppleLanguage
	case "${1}" in
		"en" ) mainLanguage="English" ;;
		"ja" ) mainLanguage="Japanese" ;;
		"fr" ) mainLanguage="French" ;;
		"de" ) mainLanguage="German" ;;
		"es" ) mainLanguage="Spanish" ;;
		"it" ) mainLanguage="Italian" ;;
		"nl" ) mainLanguage="Dutch" ;;
		"sv" ) mainLanguage="Swedish" ;;
		"nb" ) mainLanguage="Norwegian" ;;
		"da" ) mainLanguage="Danish" ;;
		"fi" ) mainLanguage="Finnish" ;;
		"pl" ) mainLanguage="Polish" ;;
		"pt" ) mainLanguage="Portuguese" ;;
		"pt-PT" ) mainLanguage="Portuguese (Portugal)" ;;
		"ru" ) mainLanguage="Russian" ;;
		"zh-Hans" ) mainLanguage="Chinese (Simplified)" ;;
		"zh-Hant" ) mainLanguage="Chinese (Traditional)" ;;
		"ko" ) mainLanguage="Korean" ;;
		"ar" ) mainLanguage="Arabic" ;;
		"cs" ) mainLanguage="Czech" ;;
		"hu" ) mainLanguage="Hungarian" ;;
	esac
	set_AppleLanguage "${mainLanguage}"
}

function get_AppleLanguage {
	prefAppleLanguage=`defaults read ~/Library/Preferences/au.com.mondada.SIC "AppleLanguage" 2>/dev/null`
	if [ -z "${prefAppleLanguage}" ] ; then prefAppleLanguage=`/usr/libexec/PlistBuddy -c "Print ':AppleLanguages:0'" "/Library/Preferences/.GlobalPreferences.plist" 2>/dev/null` ; fi
	if [ -n "${prefAppleLanguage}" ] ; then AppleLanguage="${prefAppleLanguage}" ; fi
	echo "AppleLanguage:		${AppleLanguage}"
	set_mainLanguage "${AppleLanguage}"
}

function save_AppleLanguage {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "AppleLanguage" -string "${AppleLanguage}"
}

function display_mainLanguage {
	echo "Language:		${mainLanguage}"
}

function set_Languages {
	if [ -n "${targDisk}" ]  ; then
		Languages=( "English" )
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.ja.plist" ] ; then Languages=( "${Languages[@]}" "Japanese" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.fr.plist" ] ; then Languages=( "${Languages[@]}" "French" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.de.plist" ] ; then Languages=( "${Languages[@]}" "German" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.es.plist" ] ; then Languages=( "${Languages[@]}" "Spanish" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.it.plist" ] ; then Languages=( "${Languages[@]}" "Italian" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.pt.plist" ] ; then Languages=( "${Languages[@]}" "Portuguese" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.pt_PT.plist" ] ; then Languages=( "${Languages[@]}" "Portuguese (Portugal)" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.nl.plist" ] ; then Languages=( "${Languages[@]}" "Dutch" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.sv.plist" ] ; then Languages=( "${Languages[@]}" "Swedish" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.no.plist" ] ; then Languages=( "${Languages[@]}" "Norwegian" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.da.plist" ] ; then Languages=( "${Languages[@]}" "Danish" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.fi.plist" ] ; then Languages=( "${Languages[@]}" "Finnish" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.ru.plist" ] ; then Languages=( "${Languages[@]}" "Russian" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.pl.plist" ] ; then Languages=( "${Languages[@]}" "Polish" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.tr.plist" ] ; then Languages=( "${Languages[@]}" "Turkish" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.zh_CN.plist" ] ; then Languages=( "${Languages[@]}" "Chinese (Simplified)" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.zh_TW.plist" ] ; then Languages=( "${Languages[@]}" "Chinese (Traditional)" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.ko.plist" ] ; then Languages=( "${Languages[@]}" "Korean" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.ar.plist" ] ; then Languages=( "${Languages[@]}" "Arabic" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.cs.plist" ] ; then Languages=( "${Languages[@]}" "Czech" ) ; fi
		if [ -e "/Volumes/${targDisk}/private/var/db/receipts/com.apple.MacOSX.lang.hu.plist" ] ; then Languages=( "${Languages[@]}" "Hungarian" ) ; fi
	else
		Languages=( "English" "Japanese" "French" "German" "Spanish" "Italian" "Portuguese" "Portuguese (Portugal)" "Dutch" "Swedish" "Norwegian" "Danish" "Finnish" "Russian" "Polish" "Chinese (Simplified)" "Chinese (Traditional)" "Korean" )
	fi
	langAvailable=0 ; for Element in "${Languages[@]}" ; do if [ "${Language}" == "${Element}" ] ; then langAvailable=1 ; break ; fi ; done
	if [ ${langAvailable} -eq 0 ] ; then Language="${Languages[0]}" ; fi
}

function select_mainLanguage {
	set_Languages
	display_Title "Select Language"
	display_mainLanguage
	display_Options "Languages" "Select the main language you wish to use: "
	select newLanguage in "${Languages[@]}" ; do
		if [ -n "${newLanguage}" ] ; then break ; fi
	done
	mainLanguage="${newLanguage}" ; newLanguage=""
	set_AppleLanguage "${mainLanguage}"
}

function set_Country {
	case "${1}" in
		"United States" ) Country="US" ; defaultKeyboardLayouts=( "U.S." "Canadian English" ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"Canada" ) Country="CA" ; defaultKeyboardLayouts=( "U.S." "British" "Canadian English" "Canadian French - CSA" ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=6094817 ;;
		"United Kingdom" ) Country="GB" ; defaultKeyboardLayouts=( "U.S." "British" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2643743 ;;
		"Australia" ) Country="AU" ; defaultKeyboardLayouts=( "U.S." "Australian" ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=2172517 ;;
		"New Zealand" ) Country="NZ" ; defaultKeyboardLayouts=( "U.S." "Australian" ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=2179537 ;;
		"Ireland" ) Country="IE" ; defaultKeyboardLayouts=( "U.S." "British" "Irish" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2964574 ;;
		"Afghanistan" ) Country="AF" ; defaultKeyboardLayouts=( "U.S." "Afghan Dari" "Afghan Pashto" "Afghan Uzbek " ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1138958 ;;
		"Albania" ) Country="AL" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3183875 ;;
		"Algeria" ) Country="DZ" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2507480 ;;
		"American Samoa" ) Country="AS" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5881576 ;;
		"Andorra" ) Country="AD" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3041563 ;;
		"Angola" ) Country="AO" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2240449 ;;
		"Anguilla" ) Country="AI" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3573374 ;;
		"Antarctica" ) Country="AQ" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"Antigua and Barbuda" ) Country="AG" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3576022 ;;
		"Argentina" ) Country="AR" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3435910 ;;
		"Armenia" ) Country="AM" ; defaultKeyboardLayouts=( "U.S." "Armenian - HM QWERTY" "Armenian - Western QWERTY" ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=616052 ;;
		"Aruba" ) Country="AW" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3577154 ;;
		"Austria" ) Country="AT" ; defaultKeyboardLayouts=( "U.S." "Austrian" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2761369 ;;
		"Azerbaijan" ) Country="AZ" ; defaultKeyboardLayouts=( "U.S." "Azeri" ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=587084 ;;
		"Bahamas" ) Country="BS" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3571824 ;;
		"Bahrain" ) Country="BH" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=290340 ;;
		"Bangladesh" ) Country="BD" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1185241 ;;
		"Barbados" ) Country="BB" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3374036 ;;
		"Belarus" ) Country="BY" ; defaultKeyboardLayouts=( "U.S." "Byelorussian" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=625144 ;;
		"Belgium" ) Country="BE" ; defaultKeyboardLayouts=( "U.S." "Belgian" "French" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2800866 ;;
		"Belize" ) Country="BZ" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3582672 ;;
		"Benin" ) Country="BJ" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2392087 ;;
		"Bermuda" ) Country="BM" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3573197 ;;
		"Bhutan" ) Country="BT" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1252416 ;;
		"Bolivia" ) Country="BO" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3911925 ;;
		"Bosnia and Herzegovina" ) Country="BA" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3191281 ;;
		"Botswana" ) Country="BW" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=933773 ;;
		"Bouvet Island" ) Country="BV" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"Brazil" ) Country="BR" ; defaultKeyboardLayouts=( "U.S." "Brazilian" "U.S. International - PC" ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3469058 ;;
		"British Indian Ocean Territory" ) Country="IO" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"British Virgin Islands" ) Country="VG" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3577430 ;;
		"Brunei" ) Country="BN" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1820906 ;;
		"Bulgaria" ) Country="BG" ; defaultKeyboardLayouts=( "U.S." "Bulgarian" "Bulgarian - Phonetic" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=727011 ;;
		"Burkina Faso" ) Country="BF" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2357048 ;;
		"Burundi" ) Country="BI" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=425378 ;;
		"Cambodia" ) Country="KH" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1821306 ;;
		"Cameroon" ) Country="CM" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2220957 ;;
		"Cape Verde" ) Country="CV" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3374333 ;;
		"Cayman Islands" ) Country="KY" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3580661 ;;
		"Central African Republic" ) Country="CF" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2389853 ;;
		"Chad" ) Country="TD" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2427123 ;;
		"Chile" ) Country="CL" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3871336 ;;
		"China" ) Country="CN" ; defaultKeyboardLayouts=( "U.S." "Chinese - Simplified" ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1816670 ;;
		"Christmas Island" ) Country="CX" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=2078127 ;;
		"Cocos Islands" ) Country="CC" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"Cocos [Keeling] Islands" ) Country="CC" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"Colombia" ) Country="CO" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3688689 ;;
		"Comoros" ) Country="KM" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=921772 ;;
		"Congo - Brazzaville" ) Country="CG" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2260535 ;;
		"Congo - Kinshasa" ) Country="CD" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2314302 ;;
		"Cook Islands" ) Country="CK" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=4035715 ;;
		"Costa Rica" ) Country="CR" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3621849 ;;
		"Côte d'Ivoire" ) Country="CI" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2279755 ;;
		"Croatia" ) Country="HR" ; defaultKeyboardLayouts=( "U.S." "Croatian" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3186886 ;;
		"Cyprus" ) Country="CY" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=146268 ;;
		"Czech Republic" ) Country="CZ" ; defaultKeyboardLayouts=( "U.S." "Czech - QWERTY" "Czech" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3067696 ;;
		"Denmark" ) Country="DK" ; defaultKeyboardLayouts=( "U.S." "Danish" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2618425 ;;
		"Djibouti" ) Country="DJ" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=223817 ;;
		"Dominica" ) Country="DM" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3575635 ;;
		"Dominican Republic" ) Country="DO" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3492908 ;;
		"Ecuador" ) Country="EC" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3652462 ;;
		"Egypt" ) Country="EG" ; defaultKeyboardLayouts=( "U.S." "Arabic" "Arabic - PC" "Arabic - QWERTY" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=360630 ;;
		"El Salvador" ) Country="SV" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3583361 ;;
		"Equatorial Guinea" ) Country="GQ" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2309527 ;;
		"Eritrea" ) Country="ER" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=343300 ;;
		"Estonia" ) Country="EE" ; defaultKeyboardLayouts=( "U.S." "Estonian" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=588409 ;;
		"Ethiopia" ) Country="ET" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=344979 ;;
		"Falkland Islands" ) Country="FK" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3426691 ;;
		"Faroe Islands" ) Country="FO" ; defaultKeyboardLayouts=( "U.S." "Faroese" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2611396 ;;
		"Fiji" ) Country="FJ" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=2198148 ;;
		"Finland" ) Country="FI" ; defaultKeyboardLayouts=( "U.S." "Finnish" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=658225 ;;
		"France" ) Country="FR" ; defaultKeyboardLayouts=( "U.S." "French" "French - Numerical" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2988507 ;;
		"French Guiana" ) Country="GF" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3382160 ;;
		"French Polynesia" ) Country="PF" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=4033936 ;;
		"French Southern Territories" ) Country="TF" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"Gabon" ) Country="GA" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2399697 ;;
		"Gambia" ) Country="GM" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2413876 ;;
		"Georgia" ) Country="GE" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=611717 ;;
		"Germany" ) Country="DE" ; defaultKeyboardLayouts=( "U.S." "German" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2950159 ;;
		"Ghana" ) Country="GH" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2306104 ;;
		"Gibraltar" ) Country="GI" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2411585 ;;
		"Greece" ) Country="GR" ; defaultKeyboardLayouts=( "U.S." "Greek" "Greek Polytonic" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=264371 ;;
		"Greenland" ) Country="GL" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3421319 ;;
		"Grenada" ) Country="GD" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3579925 ;;
		"Guadeloupe" ) Country="GP" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3579732 ;;
		"Guam" ) Country="GU" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=4044012 ;;
		"Guatemala" ) Country="GT" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3598132 ;;
		"Guinea" ) Country="GN" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2422465 ;;
		"Guinea-Bissau" ) Country="GW" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2374775 ;;
		"Guyana" ) Country="GY" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3378644 ;;
		"Haiti" ) Country="HT" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3718426 ;;
		"Heard Island and McDonald Islands" ) Country="HM" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"Honduras" ) Country="HN" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3600949 ;;
		"Hong Kong SAR China" ) Country="HK" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1819729 ;;
		"Hungary" ) Country="HU" ; defaultKeyboardLayouts=( "U.S." "Hungarian" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3054643 ;;
		"Iceland" ) Country="IS" ; defaultKeyboardLayouts=( "U.S." "Icelandic" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3413829 ;;
		"India" ) Country="IN" ; defaultKeyboardLayouts=( "U.S." "Devanagari" "Devanagari - QWERTY" "Gurmukhi" "Gurmukhi -QWERTY" "Gujarati" "Gujarati - QWERTY" ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1261481 ;;
		"Indonesia" ) Country="ID" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1642911 ;;
		"Iraq" ) Country="IQ" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=98182 ;;
		"Israel" ) Country="IL" ; defaultKeyboardLayouts=( "U.S." "Hebrew" "Hebrew - QWERTY" ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"Italy" ) Country="IT" ; defaultKeyboardLayouts=( "U.S." "Italian - Pro" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3169070 ;;
		"Ivory Coast" ) Country="CI" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2279755 ;;
		"Jamaica" ) Country="JM" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3489854 ;;
		"Japan" ) Country="JP" ; defaultKeyboardLayouts=( "U.S." "Kotoeri" ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1850147 ;;
		"Jordan" ) Country="JO" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=250441 ;;
		"Kazakhstan" ) Country="KZ" ; defaultKeyboardLayouts=( "U.S." "Kazakh" ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1526273 ;;
		"Kenya" ) Country="KE" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=184745 ;;
		"Kiribati" ) Country="KI" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=2110257 ;;
		"Kuwait" ) Country="KW" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=285787 ;;
		"Kyrgyzstan" ) Country="KG" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1528675 ;;
		"Laos" ) Country="LA" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1651944 ;;
		"Latvia" ) Country="LV" ; defaultKeyboardLayouts=( "U.S." "Latvian" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=456172 ;;
		"Lebanon" ) Country="LB" ; defaultKeyboardLayouts=( "U.S." "Arabic" "Arabic - PC" "Arabic - QWERTY" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=276781 ;;
		"Lesotho" ) Country="LS" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=932505 ;;
		"Liberia" ) Country="LR" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2274895 ;;
		"Liechtenstein" ) Country="LI" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3042030 ;;
		"Lithuania" ) Country="LT" ; defaultKeyboardLayouts=( "U.S." "Lithuanian" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=593116 ;;
		"Luxembourg" ) Country="LU" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2960316 ;;
		"Macau SAR China" ) Country="MO" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1821274 ;;
		"Macedonia" ) Country="MK" ; defaultKeyboardLayouts=( "U.S." "Macedonian" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=785842 ;;
		"Madagascar" ) Country="MG" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=1070940 ;;
		"Malawi" ) Country="MW" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=927967 ;;
		"Malaysia" ) Country="MY" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1735161 ;;
		"Maldives" ) Country="MV" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1282027 ;;
		"Mali" ) Country="ML" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2460596 ;;
		"Malta" ) Country="MT" ; defaultKeyboardLayouts=( "U.S." "Maltese" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2562305 ;;
		"Marshall Islands" ) Country="MH" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=2113779 ;;
		"Martinique" ) Country="MQ" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3570675 ;;
		"Mauritania" ) Country="MR" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2377450 ;;
		"Mauritius" ) Country="MU" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=934154 ;;
		"Mayotte" ) Country="YT" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=921815 ;;
		"Mexico" ) Country="MX" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3530597 ;;
		"Micronesia" ) Country="FM" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=2081986 ;;
		"Moldova" ) Country="MD" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=618426 ;;
		"Monaco" ) Country="MC" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2993458 ;;
		"Mongolia" ) Country="MN" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=2028462 ;;
		"Montenegro" ) Country="ME" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3193044 ;;
		"Montserrat" ) Country="MS" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3578069 ;;
		"Morocco" ) Country="MA" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2538475 ;;
		"Mozambique" ) Country="MZ" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=1040652 ;;
		"Myanmar" ) Country="MM" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1298824 ;;
		"Myanmar [Burma]" ) Country="MM" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1298824 ;;
		"Namibia" ) Country="NA" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3352136 ;;
		"Nauru" ) Country="NR" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"Nepal" ) Country="NP" ; defaultKeyboardLayouts=( "U.S." "Nepali" ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1283240 ;;
		"Netherlands" ) Country="NL" ; defaultKeyboardLayouts=( "U.S." "Dutch" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2759794 ;;
		"Netherlands Antilles" ) Country="AN" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3513090 ;;
		"New Caledonia" ) Country="NC" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=2139521 ;;
		"Nicaragua" ) Country="NI" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3617763 ;;
		"Niger" ) Country="NE" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2440485 ;;
		"Nigeria" ) Country="NG" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2352778 ;;
		"Niue" ) Country="NU" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=4036284 ;;
		"Norfolk Island" ) Country="NF" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=2161314 ;;
		"Northern Mariana Islands" ) Country="MP" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"Norway" ) Country="NO" ; defaultKeyboardLayouts=( "U.S." "Norwegian" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3143244 ;;
		"Oman" ) Country="OM" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=287286 ;;
		"Pakistan" ) Country="PK" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1176615 ;;
		"Palau" ) Country="PW" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1559446 ;;
		"Palestinian Territory" ) Country="PS" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"Palestinian Territories" ) Country="PS" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"Panama" ) Country="PA" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3703443 ;;
		"Papua New Guinea" ) Country="PG" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=2088122 ;;
		"Paraguay" ) Country="PY" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3439389 ;;
		"Peru" ) Country="PE" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3936456 ;;
		"Philippines" ) Country="PH" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1701668 ;;
		"Pitcairn" ) Country="PN" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=4030723 ;;
		"Pitcairn Islands" ) Country="PN" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=4030723 ;;
		"Poland" ) Country="PL" ; defaultKeyboardLayouts=( "U.S." "Polish Pro" "Polish" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=756135 ;;
		"Portugal" ) Country="PT" ; defaultKeyboardLayouts=( "U.S." "Portuguese" "Brazilian" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2267057 ;;
		"Puerto Rico" ) Country="PR" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=4568127 ;;
		"Qatar" ) Country="QA" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=290030 ;;
		"Reunion" ) Country="RE" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=935264 ;;
		"Réunion" ) Country="RE" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=935264 ;;
		"Romania" ) Country="RO" ; defaultKeyboardLayouts=( "U.S." "Romanian - Standard" "Romanian" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=683506 ;;
		"Russia" ) Country="RU" ; defaultKeyboardLayouts=( "U.S." "Russian" "Russian - Phonetic" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=524901 ;;
		"Rwanda" ) Country="RW" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=202061 ;;
		"Saint Helena" ) Country="SH" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3370903 ;;
		"Saint Kitts and Nevis" ) Country="KN" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3575551 ;;
		"Saint Lucia" ) Country="LC" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3576812 ;;
		"Saint Pierre and Miquelon" ) Country="PM" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3424934 ;;
		"Saint Vincent and the Grenadines" ) Country="VC" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3577887 ;;
		"Samoa" ) Country="WS" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=4035413 ;;
		"San Marino" ) Country="SM" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3168070 ;;
		"Sao Tome and Principe" ) Country="ST" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2410763 ;;
		"São Tomé and Príncipe" ) Country="ST" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2410763 ;;
		"Saudi Arabia" ) Country="SA" ; defaultKeyboardLayouts=( "U.S." "Arabic" "Arabic - PC" "Arabic - QWERTY" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=108410 ;;
		"Senegal" ) Country="SN" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2253354 ;;
		"Serbia" ) Country="RS" ; defaultKeyboardLayouts=( "U.S." "Serbian" "Serbian - Latin" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=792680 ;;
		"Seychelles" ) Country="SC" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=241131 ;;
		"Sierra Leone" ) Country="SL" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2409306 ;;
		"Singapore" ) Country="SG" ; defaultKeyboardLayouts=( "U.S." "Chinese - Simplified" ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1880252 ;;
		"Slovakia" ) Country="SK" ; defaultKeyboardLayouts=( "U.S." "Slovak" "Slovak - QWERTY" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3060972 ;;
		"Slovenia" ) Country="SI" ; defaultKeyboardLayouts=( "U.S." "Slovenian" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3196359 ;;
		"Solomon Islands" ) Country="SB" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=2108502 ;;
		"Somalia" ) Country="SO" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=53654 ;;
		"South Africa" ) Country="ZA" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=964137 ;;
		"South Georgia and the South Sandwich Islands" ) Country="GS" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3426466 ;;
		"South Korea" ) Country="KR" ; defaultKeyboardLayouts=( "U.S." "Hangul" ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1835848 ;;
		"Spain" ) Country="ES" ; defaultKeyboardLayouts=( "U.S." "Spanish - ISO" "Spanish" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=3117735 ;;
		"Sri Lanka" ) Country="LK" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1248991 ;;
		"Suriname" ) Country="SR" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3383330 ;;
		"Svalbard and Jan Mayen" ) Country="SJ" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2729907 ;;
		"Swaziland" ) Country="SZ" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=934985 ;;
		"Sweden" ) Country="SE" ; defaultKeyboardLayouts=( "U.S." "Swedish - Pro" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2673730 ;;
		"Switzerland" ) Country="CH" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2661552 ;;
		"Taiwan" ) Country="TW" ; defaultKeyboardLayouts=( "U.S." "Chinese - Traditional" ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1668341 ;;
		"Tajikistan" ) Country="TJ" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1221874 ;;
		"Tanzania" ) Country="TZ" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=160196 ;;
		"Thailand" ) Country="TH" ; defaultKeyboardLayouts=( "U.S." "Thai" "Thai - PattaChote" ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1609350 ;;
		"Togo" ) Country="TG" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2365267 ;;
		"Tokelau" ) Country="TK" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"Tonga" ) Country="TO" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=4032402 ;;
		"Trinidad and Tobago" ) Country="TT" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3573890 ;;
		"Tunisia" ) Country="TN" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=2464470 ;;
		"Turkey" ) Country="TR" ; defaultKeyboardLayouts=( "U.S." "Turkish" "Turkish - QWERTY" "Turkish - QWERTY PC" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=323786 ;;
		"Turkmenistan" ) Country="TM" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=162183 ;;
		"Turks and Caicos Islands" ) Country="TC" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3576994 ;;
		"Tuvalu" ) Country="TV" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=2110394 ;;
		"U.S. Minor Outlying Islands" ) Country="UM" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"U.S. Virgin Islands" ) Country="VI" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"Uganda" ) Country="UG" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=232422 ;;
		"Ukraine" ) Country="UA" ; defaultKeyboardLayouts=( "U.S." "Ukrainian" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=703448 ;;
		"United Arab Emirates" ) Country="AE" ; defaultKeyboardLayouts=( "U.S." "Arabic" "Arabic - PC" "Arabic - QWERTY" ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=292968 ;;
		"United States Minor Outlying Islands" ) Country="UM" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"Uruguay" ) Country="UY" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3441575 ;;
		"Uzbekistan" ) Country="UZ" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1512569 ;;
		"Vanuatu" ) Country="VU" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=2135171 ;;
		"Vatican" ) Country="VA" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=6691831 ;;
		"Vatican City" ) Country="VA" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=6691831 ;;
		"Venezuela" ) Country="VE" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=3646738 ;;
		"Vietnam" ) Country="VN" ; defaultKeyboardLayouts=( "U.S." "Vietnamese" ) ; defaultNTPServer="time.asia.apple.com" ; defaultGeonameID=1581130 ;;
		"Wallis and Futuna" ) Country="WF" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"Western Sahara" ) Country="EH" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.apple.com" ; defaultGeonameID=5341145 ;;
		"Yemen" ) Country="YE" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=71137 ;;
		"Zambia" ) Country="ZM" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=909137 ;;
		"Zimbabwe" ) Country="ZW" ; defaultKeyboardLayouts=( "U.S." ) ; defaultNTPServer="time.euro.apple.com" ; defaultGeonameID=890299 ;;
	esac
	defaultKeyboardLayouts=( "${defaultKeyboardLayouts[@]}" "Show All" )
	AppleLocale="${AppleLanguage}_${Country}"
}

function get_CountryName {
	prefCountryName=`defaults read ~/Library/Preferences/au.com.mondada.SIC "CountryName" 2>/dev/null`
	if [ -z "${prefCountryName}" ] ; then prefCountryName=`/usr/libexec/PlistBuddy -c "Print ':Address:CountryName'" "/var/db/.AppleSetupDone" 2>/dev/null` ; fi
	if [ -n "${prefCountryName}" ] ; then CountryName="${prefCountryName}" ; fi
	echo "CountryName:		${CountryName}"
	set_Country "${CountryName}"
}

function save_CountryName {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "CountryName" -string "${CountryName}"
}

function display_CountryName {
	echo "Country Name:		${CountryName}"
}

function select_CountryName {
	CountryNames=( "${defaultCountryNames[@]}" "Show All" )
	display_Title "Select Country"
	display_CountryName
	display_Options "Countries" "Select the country or region you wish to use: "
	select newCountryName in "${CountryNames[@]}" ; do
		while [ "${newCountryName}" == "Show All" ] ; do
			if [ -n "${targDisk}" ] ; then
				osMinorVersion=`defaults read "/Volumes/${targDisk}/System/Library/CoreServices/SystemVersion" ProductVersion | awk -F "." '{print $2}'`
			else
				osMinorVersion=`defaults read "/System/Library/CoreServices/SystemVersion" ProductVersion | awk -F "." '{print $2}'`
			fi
			case ${osMinorVersion} in
				7 ) allCountryNames=( "United States" "Canada" "United Kingdom" "Australia" "New Zealand" "Ireland" "Afghanistan" "Albania" "Algeria" "American Samoa" "Andorra" "Angola" "Anguilla" "Antarctica" "Antigua and Barbuda" "Argentina" "Armenia" "Aruba" "Austria" "Azerbaijan" "Bahamas" "Bahrain" "Bangladesh" "Barbados" "Belarus" "Belgium" "Belize" "Benin" "Bermuda" "Bhutan" "Bolivia" "Bosnia and Herzegovina" "Botswana" "Bouvet Island" "Brazil" "British Indian Ocean Territory" "British Virgin Islands" "Brunei" "Bulgaria" "Burkina Faso" "Burundi" "Cambodia" "Cameroon" "Cape Verde" "Cayman Islands" "Central African Republic" "Chad" "Chile" "China" "Christmas Island" "Cocos [Keeling] Islands" "Colombia" "Comoros" "Congo - Brazzaville" "Congo - Kinshasa" "Cook Islands" "Costa Rica" "Côte d'Ivoire" "Croatia" "Cyprus" "Czech Republic" "Denmark" "Djibouti" "Dominica" "Dominican Republic" "Ecuador" "Egypt" "El Salvador" "Equatorial Guinea" "Eritrea" "Estonia" "Ethiopia" "Falkland Islands" "Faroe Islands" "Fiji" "Finland" "France" "French Guiana" "French Polynesia" "French Southern Territories" "Gabon" "Gambia" "Georgia" "Germany" "Ghana" "Gibraltar" "Greece" "Greenland" "Grenada" "Guadeloupe" "Guam" "Guatemala" "Guinea" "Guinea-Bissau" "Guyana" "Haiti" "Heard Island and McDonald Islands" "Honduras" "Hong Kong SAR China" "Hungary" "Iceland" "India" "Indonesia" "Iraq" "Israel" "Italy" "Jamaica" "Japan" "Jordan" "Kazakhstan" "Kenya" "Kiribati" "Kuwait" "Kyrgyzstan" "Laos" "Latvia" "Lebanon" "Lesotho" "Liberia" "Liechtenstein" "Lithuania" "Luxembourg" "Macau SAR China" "Macedonia" "Madagascar" "Malawi" "Malaysia" "Maldives" "Mali" "Malta" "Marshall Islands" "Martinique" "Mauritania" "Mauritius" "Mayotte" "Mexico" "Micronesia" "Moldova" "Monaco" "Mongolia" "Montenegro" "Montserrat" "Morocco" "Mozambique" "Myanmar [Burma]" "Namibia" "Nauru" "Nepal" "Netherlands" "Netherlands Antilles" "New Caledonia" "Nicaragua" "Niger" "Nigeria" "Niue" "Norfolk Island" "Northern Mariana Islands" "Norway" "Oman" "Pakistan" "Palau" "Palestinian Territories" "Panama" "Papua New Guinea" "Paraguay" "Peru" "Philippines" "Pitcairn Islands" "Poland" "Portugal" "Puerto Rico" "Qatar" "Réunion" "Romania" "Russia" "Rwanda" "Saint Helena" "Saint Kitts and Nevis" "Saint Lucia" "Saint Pierre and Miquelon" "Saint Vincent and the Grenadines" "Samoa" "San Marino" "São Tomé and Príncipe" "Saudi Arabia" "Senegal" "Serbia" "Seychelles" "Sierra Leone" "Singapore" "Slovakia" "Slovenia" "Solomon Islands" "Somalia" "South Africa" "South Georgia and the South Sandwich Islands" "South Korea" "Spain" "Sri Lanka" "Suriname" "Svalbard and Jan Mayen" "Swaziland" "Sweden" "Switzerland" "Taiwan" "Tajikistan" "Tanzania" "Thailand" "Togo" "Tokelau" "Tonga" "Trinidad and Tobago" "Tunisia" "Turkey" "Turkmenistan" "Turks and Caicos Islands" "Tuvalu" "U.S. Minor Outlying Islands" "U.S. Virgin Islands" "Uganda" "Ukraine" "United Arab Emirates" "Uruguay" "Uzbekistan" "Vanuatu" "Vatican City" "Venezuela" "Vietnam" "Wallis and Futuna" "Western Sahara" "Yemen" "Zambia" "Zimbabwe" ) ;;
				* ) allCountryNames=( "United States" "Canada" "United Kingdom" "Australia" "New Zealand" "Ireland" "Afghanistan" "Albania" "Algeria" "American Samoa" "Andorra" "Angola" "Anguilla" "Antarctica" "Antigua and Barbuda" "Argentina" "Armenia" "Aruba" "Austria" "Azerbaijan" "Bahamas" "Bahrain" "Bangladesh" "Barbados" "Belarus" "Belgium" "Belize" "Benin" "Bermuda" "Bhutan" "Bolivia" "Bosnia and Herzegovina" "Botswana" "Bouvet Island" "Brazil" "British Indian Ocean Territory" "British Virgin Islands" "Brunei" "Bulgaria" "Burkina Faso" "Burundi" "Cambodia" "Cameroon" "Cape Verde" "Cayman Islands" "Central African Republic" "Chad" "Chile" "China" "Christmas Island" "Cocos Islands" "Colombia" "Comoros" "Congo - Brazzaville" "Congo - Kinshasa" "Cook Islands" "Costa Rica" "Croatia" "Cyprus" "Czech Republic" "Denmark" "Djibouti" "Dominica" "Dominican Republic" "Ecuador" "Egypt" "El Salvador" "Equatorial Guinea" "Eritrea" "Estonia" "Ethiopia" "Falkland Islands" "Faroe Islands" "Fiji" "Finland" "France" "French Guiana" "French Polynesia" "French Southern Territories" "Gabon" "Gambia" "Georgia" "Germany" "Ghana" "Gibraltar" "Greece" "Greenland" "Grenada" "Guadeloupe" "Guam" "Guatemala" "Guinea" "Guinea-Bissau" "Guyana" "Haiti" "Heard Island and McDonald Islands" "Honduras" "Hong Kong SAR China" "Hungary" "Iceland" "India" "Indonesia" "Iraq" "Israel" "Italy" "Ivory Coast" "Jamaica" "Japan" "Jordan" "Kazakhstan" "Kenya" "Kiribati" "Kuwait" "Kyrgyzstan" "Laos" "Latvia" "Lebanon" "Lesotho" "Liberia" "Liechtenstein" "Lithuania" "Luxembourg" "Macau SAR China" "Macedonia" "Madagascar" "Malawi" "Malaysia" "Maldives" "Mali" "Malta" "Marshall Islands" "Martinique" "Mauritania" "Mauritius" "Mayotte" "Mexico" "Micronesia" "Moldova" "Monaco" "Mongolia" "Montserrat" "Morocco" "Mozambique" "Myanmar" "Namibia" "Nauru" "Nepal" "Netherlands" "Netherlands Antilles" "New Caledonia" "Nicaragua" "Niger" "Nigeria" "Niue" "Norfolk Island" "Northern Mariana Islands" "Norway" "Oman" "Pakistan" "Palau" "Palestinian Territory" "Panama" "Papua New Guinea" "Paraguay" "Peru" "Philippines" "Pitcairn" "Poland" "Portugal" "Puerto Rico" "Qatar" "Reunion" "Romania" "Russia" "Rwanda" "Saint Helena" "Saint Kitts and Nevis" "Saint Lucia" "Saint Pierre and Miquelon" "Saint Vincent and the Grenadines" "Samoa" "San Marino" "Sao Tome and Principe" "Saudi Arabia" "Senegal" "Seychelles" "Sierra Leone" "Singapore" "Slovakia" "Slovenia" "Solomon Islands" "Somalia" "South Africa" "South Georgia and the South Sandwich Islands" "South Korea" "Spain" "Sri Lanka" "Suriname" "Svalbard and Jan Mayen" "Swaziland" "Sweden" "Switzerland" "Taiwan" "Tajikistan" "Tanzania" "Thailand" "Togo" "Tokelau" "Tonga" "Trinidad and Tobago" "Tunisia" "Turkey" "Turkmenistan" "Turks and Caicos Islands" "Tuvalu" "U.S. Virgin Islands" "Uganda" "Ukraine" "United Arab Emirates" "United States Minor Outlying Islands" "Uruguay" "Uzbekistan" "Vanuatu" "Vatican" "Venezuela" "Vietnam" "Wallis and Futuna" "Western Sahara" "Yemen" "Zambia" "Zimbabwe" ) ;;
			esac
			CountryNames=( "${defaultCountryNames[@]}" )
			for Element in "${allCountryNames[@]}" ; do
				addCountryName=1
				for defaultCountryName in "${defaultCountryNames[@]}" ; do if [ "${Element}" == "${defaultCountryName}" ] ; then addCountryName=0 ; break ; fi ; done
				if [ ${addCountryName} -eq 1 ] ; then CountryNames=( "${CountryNames[@]}" "${Element}" ) ; fi
			done
			display_Title "Select Country"
			display_CountryName
			display_Options "Countries" "Select the country or region you wish to use: "
			select newCountryName in "${CountryNames[@]}" ; do
				if [ -n "${newCountryName}" ] ; then break ; fi
			done
		done
		if [ -n "${newCountryName}" ] ; then break ; fi
	done
	CountryName="${newCountryName}" ; newCountryName=""
	set_Country "${CountryName}"
}

function set_InputSources {
	unset TypingStyles[@]
	unset BundleIDs[@]
	unset InputModes[@]
	unset InputSourceKinds[@]
	unset KeyboardLayoutIDs[@]
	unset KeyboardLayoutNames[@]
	case "${1}" in
		"U.S." ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.US" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=0 ; KeyboardLayoutNames[0]="U.S." ;;
		"Afghan Dari" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.AfghanDari" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-2902 ; KeyboardLayoutNames[0]="Afghan Dari" ;;
		"Afghan Pashto" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.AfghanPashto" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-2904 ; KeyboardLayoutNames[0]="Afghan Pashto" ;;
		"Afghan Uzbek" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.AfghanUzbek" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-2903 ; KeyboardLayoutNames[0]="Afghan Uzbek" ;;
		"Arabic" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Arabic" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-17920 ; KeyboardLayoutNames[0]="Arabic" ;;
		"Arabic - PC" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.ArabicPC" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-17921 ; KeyboardLayoutNames[0]="Arabic PC" ;;
		"Arabic - QWERTY" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Arabic-QWERTY" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-18000 ; KeyboardLayoutNames[0]="Arabic-QWERTY" ;;
		"Armenian - HM QWERTY" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Armenian-HMQWERTY" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-28161 ; KeyboardLayoutNames[0]="Armenian-HM QWERTY" ;;
		"Armenian - Western QWERTY" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Armenian-WesternQWERTY" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-28164 ; KeyboardLayoutNames[0]="Armenian-Western QWERTY" ;;
		"Australian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Australian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=15 ; KeyboardLayoutNames[0]="Australian" ;;
		"Austrian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Austrian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=92 ; KeyboardLayoutNames[0]="Austrian" ;;
		"Azeri" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Azeri" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-49 ; KeyboardLayoutNames[0]="Azeri" ;;
		"Belgian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Belgian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=6 ; KeyboardLayoutNames[0]="Belgian" ;;
		"Brazilian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Brazilian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=71 ; KeyboardLayoutNames[0]="Brazilian" ;;
		"British" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.British" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=2 ; KeyboardLayoutNames[0]="British" ;;
		"Bulgarian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Bulgarian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=19528 ; KeyboardLayoutNames[0]="Bulgarian" ;;
		"Bulgarian - Phonetic" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Bulgarian-Phonetic" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=19529 ; KeyboardLayoutNames[0]="Bulgarian - Phonetic" ;;
		"Byelorussian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Byelorussian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=19517 ; KeyboardLayoutNames[0]="Byelorussian" ;;
		"Canadian English" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Canadian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=29 ; KeyboardLayoutNames[0]="Canadian" ;;
		"Canadian French - CSA" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Canadian-CSA" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=80 ; KeyboardLayoutNames[0]="Canadian - CSA" ;;
		"Cherokee - Nation" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Cherokee-Nation" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-26112 ; KeyboardLayoutNames[0]="Cherokee-Nation" ;;
		"Cherokee - QWERTY" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Cherokee-QWERTY" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-26113 ; KeyboardLayoutNames[0]="Cherokee-QWERTY" ;;
		"Chinese - Simplified" ) TypingStyles=( "Pinyin - Simplified" "Wubi Hua" "Wubi Xing" ) ; AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.US" ; AppleDefaultAsciiInputSource=0 ;;
		"Chinese - Traditional" ) TypingStyles=( "Zhuyin" "Cangjie" "Dayi Pro" "Jianyi" "Pinyin - Traditional" ) ; AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.US" ; AppleDefaultAsciiInputSource=0 ;;
		"Croatian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Croatian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-68 ; KeyboardLayoutNames[0]="Croatian" ;;
		"Croatian - PC" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Croatian-PC" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-69 ; KeyboardLayoutNames[0]="Croatian-PC" ;;
		"Czech" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Czech" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=30776 ; KeyboardLayoutNames[0]="Czech" ;;
		"Czech - QWERTY" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Czech-QWERTY" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=30778 ; KeyboardLayoutNames[0]="Czech-QWERTY" ;;
		"Danish" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Danish" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=9 ; KeyboardLayoutNames[0]="Danish" ;;
		"Devanagari" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Devanagari" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-20480 ; KeyboardLayoutNames[0]="Devanagari" ;;
		"Devanagari - QWERTY" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Devanagari-QWERTY" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-20481 ; KeyboardLayoutNames[0]="Devanagari-QWERTY" ;;
		"Dutch" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Dutch" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=26 ; KeyboardLayoutNames[0]="Dutch" ;;
		"Dvorak" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Dvorak" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=16300 ; KeyboardLayoutNames[0]="Dvorak" ;;
		"Dvorak - Left" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Dvorak-Left" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=16302 ; KeyboardLayoutNames[0]="Dvorak - Left" ;;
		"Dvorak - Qwerty ⌘" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.DVORAK-QWERTYCMD" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=16301 ; KeyboardLayoutNames[0]="DVORAK - QWERTY CMD" ;;
		"Dvorak - Right" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Dvorak-Right" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=16303 ; KeyboardLayoutNames[0]="Dvorak - Right" ;;
		"Estonian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Estonian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=30764 ; KeyboardLayoutNames[0]="Estonian" ;;
		"Faroese" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Faroese" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-47 ; KeyboardLayoutNames[0]="Faroese" ;;
		"Finnish" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Finnish" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=17 ; KeyboardLayoutNames[0]="Finnish" ;;
		"Finnish Extended" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.FinnishExtended" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-17 ; KeyboardLayoutNames[0]="Finnish Extended" ;;
		"Finnish Sami - PC" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.FinnishSami-PC" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-18 ; KeyboardLayoutNames[0]="FinnishSami-PC" ;;
		"French" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.French" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=1 ; KeyboardLayoutNames[0]="French" ;;
		"French - Numerical" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.French-numerical" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=1111 ; KeyboardLayoutNames[0]="French - numerical" ;;
		"German" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.German" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=3 ; KeyboardLayoutNames[0]="German" ;;
		"Greek" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Greek" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-18944 ; KeyboardLayoutNames[0]="Greek" ;;
		"Greek Polytonic" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.GreekPolytonic" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-18945 ; KeyboardLayoutNames[0]="Greek Polytonic" ;;
		"Gujarati" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Gujarati" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-21504 ; KeyboardLayoutNames[0]="Gujarati" ;;
		"Gujarati - QWERTY" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Gujarati-QWERTY" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-21505 ; KeyboardLayoutNames[0]="Gujarati-QWERTY" ;;
		"Gurmukhi" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Gurmukhi" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-20992 ; KeyboardLayoutNames[0]="Gurmukhi" ;;
		"Gurmukhi - QWERTY" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Gurmukhi-QWERTY" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-20993 ; KeyboardLayoutNames[0]="Gurmukhi-QWERTY" ;;
		"Hangul" ) TypingStyles=( "3-Set Korean" "2-Set Korean" "HNC Romaja" "390 Sebulshik" "GongjinCheong Romaja" ) ; AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.US" ; AppleDefaultAsciiInputSource=0 ;;
		"Hawaiian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Hawaiian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-50 ; KeyboardLayoutNames[0]="Hawaiian" ;;
		"Hebrew" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Hebrew" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-18432 ; KeyboardLayoutNames[0]="Hebrew" ;;
		"Hebrew - QWERTY" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Hebrew-QWERTY" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-18500 ; KeyboardLayoutNames[0]="Hebrew-QWERTY" ;;
		"Hungarian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Hungarian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=30763 ; KeyboardLayoutNames[0]="Hungarian" ;;
		"Icelandic" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Icelandic" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-21 ; KeyboardLayoutNames[0]="Icelandic" ;;
		"Inuktitut - Nunavut" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Inuktitut-Nunavut" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-30604 ; KeyboardLayoutNames[0]="Inuktitut-Nunavut" ;;
		"Inuktitut - Nutaaq" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Inuktitut-Nutaaq" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-30602 ; KeyboardLayoutNames[0]="Inuktitut-Nutaaq" ;;
		"Inuktitut - QWERTY" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Inuktitut-QWERTY" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-30600 ; KeyboardLayoutNames[0]="Inuktitut-QWERTY" ;;
		"Inuttitut Nunavik" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.InuttitutNunavik" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-30603 ; KeyboardLayoutNames[0]="Inuttitut Nunavik" ;;
		"Irish" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Irish" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=50 ; KeyboardLayoutNames[0]="Irish" ;;
		"Irish Extended" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.IrishExtended" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-500 ; KeyboardLayoutNames[0]="Irish Extended" ;;
		"Italian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Italian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=4 ; KeyboardLayoutNames[0]="Italian" ;;
		"Italian - Pro" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Italian-Pro" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=223 ; KeyboardLayoutNames[0]="Italian - Pro" ;;
		"Jawi - QWERTY" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Jawi-QWERTY" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-19000 ; KeyboardLayoutNames[0]="Jawi-QWERTY" ;;
		"Kazakh" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Kazakh" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-19501 ; KeyboardLayoutNames[0]="Kazakh" ;;
		"Kotoeri" ) TypingStyles=( "Romaji" "Kana" ) ; AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.US" ;;
		"Latvian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Latvian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=30765 ; KeyboardLayoutNames[0]="Latvian" ;;
		"Lithuanian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Lithuanian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=30761 ; KeyboardLayoutNames[0]="Lithuanian" ;;
		"Macedonian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Macedonian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=19523 ; KeyboardLayoutNames[0]="Macedonian" ;;
		"Maltese" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Maltese" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-501 ; KeyboardLayoutNames[0]="Maltese" ;;
		"Maori" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Maori" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-51 ; KeyboardLayoutNames[0]="Maori" ;;
		"Nepali" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Nepali" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-20484 ; KeyboardLayoutNames[0]="Nepali" ;;
		"Northern Sami" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.NorthernSami" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-1200 ; KeyboardLayoutNames[0]="Northern Sami" ;;
		"Norwegian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Norwegian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=12 ; KeyboardLayoutNames[0]="Norwegian" ;;
		"Norwegian Extended" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.NorwegianExtended" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-12 ; KeyboardLayoutNames[0]="Norwegian Extended" ;;
		"Norwegian Sami - PC" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.NorwegianSami-PC" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-13 ; KeyboardLayoutNames[0]="NorwegianSami-PC" ;;
		"Persian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Persian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-17960 ; KeyboardLayoutNames[0]="Persian" ;;
		"Persian - ISIRI 2901" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Persian-ISIRI2901" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-2901 ; KeyboardLayoutNames[0]="Persian-ISIRI 2901" ;;
		"Persian - QWERTY" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Persian-QWERTY" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-1959 ; KeyboardLayoutNames[0]="Persian-QWERTY" ;;
		"Polish" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Polish" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=30762 ; KeyboardLayoutNames[0]="Polish" ;;
		"Polish Pro" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.PolishPro" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=30788 ; KeyboardLayoutNames[0]="Polish Pro" ;;
		"Portuguese" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Portuguese" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=10 ; KeyboardLayoutNames[0]="Portuguese" ;;
		"Romanian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Romanian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-39 ; KeyboardLayoutNames[0]="Romanian" ;;
		"Romanian - Standard" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Romanian-Standard" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-38 ; KeyboardLayoutNames[0]="Romanian-Standard" ;;
		"Russian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Russian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=19456 ; KeyboardLayoutNames[0]="Russian" ;;
		"Russian - PC" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.RussianWin" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=19458 ; KeyboardLayoutNames[0]="RussianWin" ;;
		"Russian - Phonetic" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Russian-Phonetic" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=19457 ; KeyboardLayoutNames[0]="Russian - Phonetic" ;;
		"Sami - PC" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Sami-PC" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-1201 ; KeyboardLayoutNames[0]="Sami-PC" ;;
		"Serbian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Serbian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=19521 ; KeyboardLayoutNames[0]="Serbian" ;;
		"Serbian - Latin" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Serbian-Latin" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-19521 ; KeyboardLayoutNames[0]="Serbian-Latin" ;;
		"Slovak" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Slovak" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=30777 ; KeyboardLayoutNames[0]="Slovak" ;;
		"Slovak - QWERTY" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Slovak-QWERTY" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=30779 ; KeyboardLayoutNames[0]="Slovak-QWERTY" ;;
		"Slovenian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Slovenian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-66 ; KeyboardLayoutNames[0]="Slovenian" ;;
		"Spanish" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Spanish" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=8 ; KeyboardLayoutNames[0]="Spanish" ;;
		"Spanish - ISO" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Spanish-ISO" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=87 ; KeyboardLayoutNames[0]="Spanish - ISO" ;;
		"Swedish" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Swedish" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=224 ; KeyboardLayoutNames[0]="Swedish" ;;
		"Swedish - Pro" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Swedish-Pro" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=7 ; KeyboardLayoutNames[0]="Swedish - Pro" ;;
		"Swedish Sami - PC" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.SwedishSami-PC" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-15 ; KeyboardLayoutNames[0]="SwedishSami-PC" ;;
		"Swiss French" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.SwissFrench" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=18 ; KeyboardLayoutNames[0]="Swiss French" ;;
		"Swiss German" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.SwissGerman" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=19 ; KeyboardLayoutNames[0]="Swiss German" ;;
		"Tamil Input Method" ) TypingStyles=( "Anjal" "Tamil99" ) ; AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.US" ; AppleDefaultAsciiInputSource=0 ;;
		"Thai" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Thai" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-26624 ; KeyboardLayoutNames[0]="Thai" ;;
		"Thai - PattaChote" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Thai-PattaChote" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-26626 ; KeyboardLayoutNames[0]="Thai-PattaChote" ;;
		"Tibetan - Otani" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.TibetanOtaniUS" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-26628 ; KeyboardLayoutNames[0]="TibetanOtaniUS" ;;
		"Tibetan - QWERTY" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Tibetan-QWERTY" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-26625 ; KeyboardLayoutNames[0]="Tibetan-QWERTY" ;;
		"Tibetan - Wylie" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Tibetan-Wylie" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-2398 ; KeyboardLayoutNames[0]="Tibetan-Wylie" ;;
		"Turkish" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Turkish" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-24 ; KeyboardLayoutNames[0]="Turkish" ;;
		"Turkish - QWERTY" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Turkish-QWERTY" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-35 ; KeyboardLayoutNames[0]="Turkish-QWERTY" ;;
		"Turkish - QWERTY PC" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Turkish-QWERTY-PC" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-36 ; KeyboardLayoutNames[0]="Turkish-QWERTY-PC" ;;
		"U.S. Extended" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.USExtended" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-2 ; KeyboardLayoutNames[0]="US Extended" ;;
		"U.S. International - PC" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.USInternational-PC" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=15000 ; KeyboardLayoutNames[0]="USInternational-PC" ;;
		"Ukrainian" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Ukrainian" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=19518 ; KeyboardLayoutNames[0]="Ukrainian" ;;
		"Unicode Hex Input" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.UnicodeHexInput" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-1 ; KeyboardLayoutNames[0]="Unicode Hex Input" ;;
		"Uyghur - QWERTY" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Uyghur-QWERTY" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-27000 ; KeyboardLayoutNames[0]="Uyghur-QWERTY" ;;
		"Vietnamese" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Vietnamese" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-31232 ; KeyboardLayoutNames[0]="Vietnamese" ;;
		"Vietnamese Unikey" ) TypingStyles=( "Simple Telex" "VNI" "VIQR" "Telex" ) ; AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.US" ;;
		"Welsh" ) AppleCurrentKeyboardLayoutInputSourceID="com.apple.keylayout.Welsh" ; AppleDefaultAsciiInputSource=0 ; AppleSelectedInputSources=0 ; InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=-790 ; KeyboardLayoutNames[0]="Welsh" ;;
	esac
}

function set_TypingStyle {
	case "${1}" in
		"Chinese - Simplified" )
			InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=0 ; KeyboardLayoutNames[0]="U.S."
			BundleIDs[1]="com.apple.inputmethod.SCIM" ; InputModes[1]="com.apple.inputmethod.SCIM.ITABC" ; InputSourceKinds[1]="Input Mode"
			BundleIDs[2]="com.apple.inputmethod.SCIM" ; InputModes[2]="com.apple.inputmethod.SCIM.WBH" ; InputSourceKinds[2]="Input Mode"
			BundleIDs[3]="com.apple.inputmethod.SCIM" ; InputModes[3]="com.apple.inputmethod.SCIM.WBX" ; InputSourceKinds[3]="Input Mode"
			BundleIDs[4]="com.apple.inputmethod.SCIM" ; InputSourceKinds[4]="Keyboard Input Method"
			BundleIDs[5]="com.apple.inputmethod.ChineseHandwriting" ; InputSourceKinds[5]="Non Keyboard Input Method"
			case "${2}" in
				"Pinyin - Simplified" ) AppleSelectedInputSources=1 ;;
				"Wubi Hua" ) AppleSelectedInputSources=2 ;;
				"Wubi Xing" ) AppleSelectedInputSources=3 ;;
			esac ;;
		"Chinese - Traditional" )
			InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=0 ; KeyboardLayoutNames[0]="U.S."
			BundleIDs[1]="com.apple.inputmethod.TCIM" ; InputModes[1]="com.apple.inputmethod.TCIM.Zhuyin" ; InputSourceKinds[1]="Input Mode"
			BundleIDs[2]="com.apple.inputmethod.TCIM" ; InputModes[2]="com.apple.inputmethod.TCIM.Cangjie" ; InputSourceKinds[2]="Input Mode"
			BundleIDs[3]="com.apple.inputmethod.TCIM" ; InputModes[3]="com.apple.inputmethod.TCIM.Dayi" ; InputSourceKinds[3]="Input Mode"
			BundleIDs[4]="com.apple.inputmethod.TCIM" ; InputModes[4]="com.apple.inputmethod.TCIM.Jianyi" ; InputSourceKinds[4]="Input Mode"
			BundleIDs[5]="com.apple.inputmethod.TCIM" ; InputModes[5]="com.apple.inputmethod.TCIM.Pinyin" ; InputSourceKinds[5]="Input Mode"
			BundleIDs[6]="com.apple.inputmethod.TCIM" ; InputSourceKinds[6]="Keyboard Input Method"
			BundleIDs[7]="com.apple.inputmethod.ChineseHandwriting" ; InputSourceKinds[7]="Non Keyboard Input Method"
			case "${2}" in
				"Zhuyin" ) AppleSelectedInputSources=1 ;;
				"Cangjie" ) AppleSelectedInputSources=2 ;;
				"Dayi Pro" ) AppleSelectedInputSources=3 ;;
				"Jianyi" ) AppleSelectedInputSources=4 ;;
				"Pinyin - Traditional" ) AppleSelectedInputSources=5 ;;
			esac ;;
		"Hangul" )
			InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=0 ; KeyboardLayoutNames[0]="U.S."
			BundleIDs[1]="com.apple.inputmethod.Korean" ; InputModes[1]="com.apple.inputmethod.Korean.3SetKorean" ; InputSourceKinds[1]="Input Mode"
			BundleIDs[2]="com.apple.inputmethod.Korean" ; InputModes[2]="com.apple.inputmethod.Korean.2SetKorean" ; InputSourceKinds[2]="Input Mode"
			BundleIDs[3]="com.apple.inputmethod.Korean" ; InputModes[3]="com.apple.inputmethod.Korean.HNCRomaja" ; InputSourceKinds[3]="Input Mode"
			BundleIDs[4]="com.apple.inputmethod.Korean" ; InputModes[4]="com.apple.inputmethod.Korean.390Sebulshik" ; InputSourceKinds[4]="Input Mode"
			BundleIDs[5]="com.apple.inputmethod.Korean" ; InputModes[5]="com.apple.inputmethod.Korean.GongjinCheongRomaja" ; InputSourceKinds[5]="Input Mode"
			BundleIDs[6]="com.apple.inputmethod.Korean" ; InputSourceKinds[6]="Keyboard Input Method"
			case "${2}" in
				"3-Set Korean" ) AppleSelectedInputSources=1 ;;
				"2-Set Korean" ) AppleSelectedInputSources=2 ;;
				"HNC Romaja" ) AppleSelectedInputSources=3 ;;
				"390 Sebulshik" ) AppleSelectedInputSources=4 ;;
				"GongjinCheong Romaja" ) AppleSelectedInputSources=5 ;;
			esac ;;
		"Kotoeri" )
			BundleIDs[0]="com.apple.inputmethod.Kotoeri" ; InputModes[0]="com.apple.inputmethod.Japanese" ; InputSourceKinds[0]="Input Mode"
			BundleIDs[1]="com.apple.inputmethod.Kotoeri" ; InputModes[1]="com.apple.inputmethod.Japanese.placename" ; InputSourceKinds[1]="Input Mode"
			BundleIDs[2]="com.apple.inputmethod.Kotoeri" ; InputModes[2]="com.apple.inputmethod.Roman" ; InputSourceKinds[2]="Input Mode"
			BundleIDs[3]="com.apple.inputmethod.Kotoeri" ; InputModes[3]="com.apple.inputmethod.Japanese.Katakana" ; InputSourceKinds[3]="Input Mode"
			BundleIDs[4]="com.apple.inputmethod.Kotoeri" ; InputModes[4]="com.apple.inputmethod.Japanese.firstname" ; InputSourceKinds[4]="Input Mode"
			BundleIDs[5]="com.apple.inputmethod.Kotoeri" ; InputModes[5]="com.apple.inputmethod.Japanese.lastname" ; InputSourceKinds[5]="Input Mode"
			BundleIDs[6]="com.apple.inputmethod.Kotoeri" ; InputModes[6]="Keyboard Input Method"
			case "${2}" in
				"Romaji" ) AppleSelectedInputSources=2 ;;
				"Kana" ) AppleSelectedInputSources=2 ;;
			esac ;;
		"Tamil Input Method" )
			InputSourceKinds[0]="Keyboard Layout" ; KeyboardLayoutIDs[0]=0 ; KeyboardLayoutNames[0]="U.S."
			BundleIDs[1]="com.apple.inputmethod.Tamil" ; InputModes[1]="com.apple.inputmethod.Tamil.AnjalIM" ; InputSourceKinds[1]="Input Mode"
			BundleIDs[2]="com.apple.inputmethod.Tamil" ; InputModes[2]="com.apple.inputmethod.Tamil.Tamil99" ; InputSourceKinds[2]="Input Mode"
			BundleIDs[3]="com.apple.inputmethod.Tamil" ; InputSourceKinds[3]="Keyboard Input Method"
			case "${2}" in
				"Anjal" ) AppleSelectedInputSources=1 ;;
				"Tamil99" ) AppleSelectedInputSources=2 ;;
			esac ;;
		"Vietnamese Unikey" )
			BundleIDs[0]="com.apple.inputmethod.VietnameseIM" ; InputModes[0]="com.apple.inputmethod.VietnameseSimpleTelex" ; InputSourceKinds[0]="Input Mode"
			BundleIDs[1]="com.apple.inputmethod.VietnameseIM" ; InputSourceKinds[1]="Keyboard Input Method"
			case "${2}" in
				"Simple Telex" ) AppleSelectedInputSources=0 ;;
				"VNI" ) BundleIDs[2]="com.apple.inputmethod.VietnameseIM" ; InputModes[2]="com.apple.inputmethod.VietnameseVNI" ; InputSourceKinds[2]="Input Mode" ; AppleSelectedInputSources=0 ;;
				"VIQR" ) BundleIDs[2]="com.apple.inputmethod.VietnameseIM" ; InputModes[2]="com.apple.inputmethod.VietnameseVIQR" ; InputSourceKinds[2]="Input Mode" ; AppleSelectedInputSources=0 ;;
				"Telex" ) BundleIDs[2]="com.apple.inputmethod.VietnameseIM" ; InputModes[2]="com.apple.inputmethod.VietnameseTelex" ; InputSourceKinds[2]="Input Mode" ; AppleSelectedInputSources=0 ;;
			esac ;;
	esac
}

function set_KeyboardLayout {
	# ${1}: AppleCurrentKeyboardLayoutInputSourceID
	# ${2}: InputMode
	case "${1}" in
		"com.apple.keylayout.US" )
			case "${2}" in
				"com.apple.inputmethod.SCIM.ITABC" ) KeyboardLayout="Chinese - Simplified" ; TypingStyle="Pinyin - Simplified" ;;
				"com.apple.inputmethod.SCIM.WBH" ) KeyboardLayout="Chinese - Simplified" ; TypingStyle="Wubi Hua" ;;
				"com.apple.inputmethod.SCIM.WBX" ) KeyboardLayout="Chinese - Simplified" ; TypingStyle="Wubi Xing" ;;
				"com.apple.inputmethod.TCIM.Zhuyin" ) KeyboardLayout="Chinese - Traditional" ; TypingStyle="Zhuyin" ;;
				"com.apple.inputmethod.TCIM.Cangjie" ) KeyboardLayout="Chinese - Traditional" ; TypingStyle="Cangjie" ;;
				"com.apple.inputmethod.TCIM.Dayi" ) KeyboardLayout="Chinese - Traditional" ; TypingStyle="Dayi Pro" ;;
				"com.apple.inputmethod.TCIM.Jianyi" ) KeyboardLayout="Chinese - Traditional" ; TypingStyle="Jianyi" ;;
				"com.apple.inputmethod.TCIM.Pinyin" ) KeyboardLayout="Chinese - Traditional" ; TypingStyle="Pinyin - Traditional" ;;
				"com.apple.inputmethod.Korean.3SetKorean" ) KeyboardLayout="Hangul" ; TypingStyle="3-Set Korean" ;;
				"com.apple.inputmethod.Korean.2SetKorean" ) KeyboardLayout="Hangul" ; TypingStyle="2-Set Korean" ;;
				"com.apple.inputmethod.Korean.HNCRomaja" ) KeyboardLayout="Hangul" ; TypingStyle="HNC Romaja" ;;
				"com.apple.inputmethod.Korean.390Sebulshik" ) KeyboardLayout="Hangul" ; TypingStyle="390 Sebulshik" ;;
				"com.apple.inputmethod.Korean.GongjinCheongRomaja" ) KeyboardLayout="Hangul" ; TypingStyle="GongjinCheong Romaja" ;;
				"com.apple.inputmethod.Roman" ) KeyboardLayout="Kotoeri" ; TypingStyle="Romaji" ;;
				"com.apple.inputmethod.Japanese.Katakana" ) KeyboardLayout="Kotoeri" ; TypingStyle="Kana" ;;
				"com.apple.inputmethod.Tamil.AnjalIM" ) KeyboardLayout="Tamil Input Method" ; TypingStyle="Anjal" ;;
				"com.apple.inputmethod.Tamil.Tamil99" ) KeyboardLayout="Tamil Input Method" ; TypingStyle="Tamil99" ;;
				"com.apple.inputmethod.VietnameseSimpleTelex" ) KeyboardLayout="Vietnamese Unikey" ; TypingStyle="Simple Telex" ;;
				"com.apple.inputmethod.VietnameseVNI" ) KeyboardLayout="Vietnamese Unikey" ; TypingStyle="VNI" ;;
				"com.apple.inputmethod.VietnameseVIQR" ) KeyboardLayout="Vietnamese Unikey" ; TypingStyle="VIQR" ;;
				"com.apple.inputmethod.VietnameseTelex" ) KeyboardLayout="Vietnamese Unikey" ; TypingStyle="Telex" ;;
				"" ) KeyboardLayout="U.S." ;;
			esac ;;
		"com.apple.keylayout.AfghanDari" ) KeyboardLayout="Afghan Dari" ;;
		"com.apple.keylayout.AfghanPashto" ) KeyboardLayout="Afghan Pashto" ;;
		"com.apple.keylayout.AfghanUzbek" ) KeyboardLayout="Afghan Uzbek" ;;
		"com.apple.keylayout.Arabic" ) KeyboardLayout="Arabic" ;;
		"com.apple.keylayout.Arabic-QWERTY" ) KeyboardLayout="Arabic - QWERTY" ;;
		"com.apple.keylayout.ArabicPC" ) KeyboardLayout="Arabic - PC" ;;
		"com.apple.keylayout.Armenian-HMQWERTY" ) KeyboardLayout="Armenian - HM QWERTY" ;;
		"com.apple.keylayout.Armenian-WesternQWERTY" ) KeyboardLayout="Armenian - Western QWERTY" ;;
		"com.apple.keylayout.Australian" ) KeyboardLayout="Australian" ;;
		"com.apple.keylayout.Austrian" ) KeyboardLayout="Austrian" ;;
		"com.apple.keylayout.Azeri" ) KeyboardLayout="Azeri" ;;
		"com.apple.keylayout.Belgian" ) KeyboardLayout="Belgian" ;;
		"com.apple.keylayout.Brazilian" ) KeyboardLayout="Brazilian" ;;
		"com.apple.keylayout.British" ) KeyboardLayout="British" ;;
		"com.apple.keylayout.Bulgarian" ) KeyboardLayout="Bulgarian" ;;
		"com.apple.keylayout.Bulgarian-Phonetic" ) KeyboardLayout="Bulgarian - Phonetic" ;;
		"com.apple.keylayout.Byelorussian" ) KeyboardLayout="Byelorussian" ;;
		"com.apple.keylayout.Canadian" ) KeyboardLayout="Canadian English" ;;
		"com.apple.keylayout.Canadian-CSA" ) KeyboardLayout="Canadian French - CSA" ;;
		"com.apple.keylayout.Cherokee-Nation" ) KeyboardLayout="Cherokee - Nation" ;;
		"com.apple.keylayout.Cherokee-QWERTY" ) KeyboardLayout="Cherokee - QWERTY" ;;
		"com.apple.keylayout.Croatian" ) KeyboardLayout="Croatian" ;;
		"com.apple.keylayout.Croatian-PC" ) KeyboardLayout="Croatian - PC" ;;
		"com.apple.keylayout.Czech" ) KeyboardLayout="Czech" ;;
		"com.apple.keylayout.Czech-QWERTY" ) KeyboardLayout="Czech - QWERTY" ;;
		"com.apple.keylayout.Danish" ) KeyboardLayout="Danish" ;;
		"com.apple.keylayout.Devanagari" ) KeyboardLayout="Devanagari" ;;
		"com.apple.keylayout.Devanagari-QWERTY" ) KeyboardLayout="Devanagari - QWERTY" ;;
		"com.apple.keylayout.Dutch" ) KeyboardLayout="Dutch" ;;
		"com.apple.keylayout.Dvorak" ) KeyboardLayout="Dvorak" ;;
		"com.apple.keylayout.Dvorak-Left" ) KeyboardLayout="Dvorak - Left" ;;
		"com.apple.keylayout.DVORAK-QWERTYCMD" ) KeyboardLayout="Dvorak - Qwerty ⌘" ;;
		"com.apple.keylayout.Dvorak-Right" ) KeyboardLayout="Dvorak - Right" ;;
		"com.apple.keylayout.Estonian" ) KeyboardLayout="Estonian" ;;
		"com.apple.keylayout.Faroese" ) KeyboardLayout="Faroese" ;;
		"com.apple.keylayout.Finnish" ) KeyboardLayout="Finnish" ;;
		"com.apple.keylayout.FinnishExtended" ) KeyboardLayout="Finnish Extended" ;;
		"com.apple.keylayout.FinnishSami-PC" ) KeyboardLayout="Finnish Sami - PC" ;;
		"com.apple.keylayout.French" ) KeyboardLayout="French" ;;
		"com.apple.keylayout.French-numerical" ) KeyboardLayout="French - Numerical" ;;
		"com.apple.keylayout.German" ) KeyboardLayout="German" ;;
		"com.apple.keylayout.Greek" ) KeyboardLayout="Greek" ;;
		"com.apple.keylayout.GreekPolytonic" ) KeyboardLayout="Greek Polytonic" ;;
		"com.apple.keylayout.Gujarati" ) KeyboardLayout="Gujarati" ;;
		"com.apple.keylayout.Gujarati-QWERTY" ) KeyboardLayout="Gujarati - QWERTY" ;;
		"com.apple.keylayout.Gurmukhi" ) KeyboardLayout="Gurmukhi" ;;
		"com.apple.keylayout.Gurmukhi-QWERTY" ) KeyboardLayout="Gurmukhi - QWERTY" ;;
		"com.apple.keylayout.Hawaiian" ) KeyboardLayout="Hawaiian" ;;
		"com.apple.keylayout.Hebrew" ) KeyboardLayout="Hebrew" ;;
		"com.apple.keylayout.Hebrew-QWERTY" ) KeyboardLayout="Hebrew - QWERTY" ;;
		"com.apple.keylayout.Hungarian" ) KeyboardLayout="Hungarian" ;;
		"com.apple.keylayout.Icelandic" ) KeyboardLayout="Icelandic" ;;
		"com.apple.keylayout.Inuktitut-Nunavut" ) KeyboardLayout="Inuktitut - Nunavut" ;;
		"com.apple.keylayout.Inuktitut-Nutaaq" ) KeyboardLayout="Inuktitut - Nutaaq" ;;
		"com.apple.keylayout.Inuktitut-QWERTY" ) KeyboardLayout="Inuktitut - QWERTY" ;;
		"com.apple.keylayout.InuttitutNunavik" ) KeyboardLayout="Inuttitut Nunavik" ;;
		"com.apple.keylayout.Irish" ) KeyboardLayout="Irish" ;;
		"com.apple.keylayout.IrishExtended" ) KeyboardLayout="Irish Extended" ;;
		"com.apple.keylayout.Italian" ) KeyboardLayout="Italian" ;;
		"com.apple.keylayout.Italian-Pro" ) KeyboardLayout="Italian - Pro" ;;
		"com.apple.keylayout.Jawi-QWERTY" ) KeyboardLayout="Jawi - QWERTY" ;;
		"com.apple.keylayout.Kazakh" ) KeyboardLayout="Kazakh" ;;
		"com.apple.keylayout.Latvian" ) KeyboardLayout="Latvian" ;;
		"com.apple.keylayout.Lithuanian" ) KeyboardLayout="Lithuanian" ;;
		"com.apple.keylayout.Macedonian" ) KeyboardLayout="Macedonian" ;;
		"com.apple.keylayout.Maltese" ) KeyboardLayout="Maltese" ;;
		"com.apple.keylayout.Maori" ) KeyboardLayout="Maori" ;;
		"com.apple.keylayout.Nepali" ) KeyboardLayout="Nepali" ;;
		"com.apple.keylayout.NorthernSami" ) KeyboardLayout="Northern Sami" ;;
		"com.apple.keylayout.Norwegian" ) KeyboardLayout="Norwegian" ;;
		"com.apple.keylayout.NorwegianExtended" ) KeyboardLayout="Norwegian Extended" ;;
		"com.apple.keylayout.NorwegianSami-PC" ) KeyboardLayout="Norwegian Sami - PC" ;;
		"com.apple.keylayout.Persian" ) KeyboardLayout="Persian" ;;
		"com.apple.keylayout.Persian-ISIRI2901" ) KeyboardLayout="Persian - ISIRI 2901" ;;
		"com.apple.keylayout.Persian-QWERTY" ) KeyboardLayout="Persian - QWERTY" ;;
		"com.apple.keylayout.Polish" ) KeyboardLayout="Polish" ;;
		"com.apple.keylayout.PolishPro" ) KeyboardLayout="Polish Pro" ;;
		"com.apple.keylayout.Portuguese" ) KeyboardLayout="Portuguese" ;;
		"com.apple.keylayout.Romanian" ) KeyboardLayout="Romanian" ;;
		"com.apple.keylayout.Romanian-Standard" ) KeyboardLayout="Romanian - Standard" ;;
		"com.apple.keylayout.Russian" ) KeyboardLayout="Russian" ;;
		"com.apple.keylayout.Russian-Phonetic" ) KeyboardLayout="Russian - Phonetic" ;;
		"com.apple.keylayout.RussianWin" ) KeyboardLayout="Russian - PC" ;;
		"com.apple.keylayout.Sami-PC" ) KeyboardLayout="Sami - PC" ;;
		"com.apple.keylayout.Serbian" ) KeyboardLayout="Serbian" ;;
		"com.apple.keylayout.Serbian-Latin" ) KeyboardLayout="Serbian - Latin" ;;
		"com.apple.keylayout.Slovak" ) KeyboardLayout="Slovak" ;;
		"com.apple.keylayout.Slovak-QWERTY" ) KeyboardLayout="Slovak - QWERTY" ;;
		"com.apple.keylayout.Slovenian" ) KeyboardLayout="Slovenian" ;;
		"com.apple.keylayout.Spanish" ) KeyboardLayout="Spanish" ;;
		"com.apple.keylayout.Spanish-ISO" ) KeyboardLayout="Spanish - ISO" ;;
		"com.apple.keylayout.Swedish" ) KeyboardLayout="Swedish" ;;
		"com.apple.keylayout.Swedish-Pro" ) KeyboardLayout="Swedish - Pro" ;;
		"com.apple.keylayout.SwedishSami-PC" ) KeyboardLayout="Swedish Sami - PC" ;;
		"com.apple.keylayout.SwissFrench" ) KeyboardLayout="Swiss French" ;;
		"com.apple.keylayout.SwissGerman" ) KeyboardLayout="Swiss German" ;;
		"com.apple.keylayout.Thai" ) KeyboardLayout="Thai" ;;
		"com.apple.keylayout.Thai-PattaChote" ) KeyboardLayout="Thai - PattaChote" ;;
		"com.apple.keylayout.Tibetan-QWERTY" ) KeyboardLayout="Tibetan - QWERTY" ;;
		"com.apple.keylayout.Tibetan-Wylie" ) KeyboardLayout="Tibetan - Wylie" ;;
		"com.apple.keylayout.TibetanOtaniUS" ) KeyboardLayout="Tibetan - Otani" ;;
		"com.apple.keylayout.Turkish" ) KeyboardLayout="Turkish" ;;
		"com.apple.keylayout.Turkish-QWERTY" ) KeyboardLayout="Turkish - QWERTY" ;;
		"com.apple.keylayout.Turkish-QWERTY-PC" ) KeyboardLayout="Turkish - QWERTY PC" ;;
		"com.apple.keylayout.Ukrainian" ) KeyboardLayout="Ukrainian" ;;
		"com.apple.keylayout.UnicodeHexInput" ) KeyboardLayout="Unicode Hex Input" ;;
		"com.apple.keylayout.USExtended" ) KeyboardLayout="U.S. Extended" ;;
		"com.apple.keylayout.USInternational-PC" ) KeyboardLayout="U.S. International - PC" ;;
		"com.apple.keylayout.Uyghur-QWERTY" ) KeyboardLayout="Uyghur - QWERTY" ;;
		"com.apple.keylayout.Vietnamese" ) KeyboardLayout="Vietnamese" ;;
		"com.apple.keylayout.Welsh" ) KeyboardLayout="Welsh" ;;
	esac
	set_InputSources "${KeyboardLayout}"
	if [ -n "${TypingStyle}" ] ; then set_TypingStyle "${KeyboardLayout}" "${TypingStyle}" ; fi
}

function get_Keyboard {
	prefAppleCurrentKeyboardLayoutInputSourceID=`defaults read ~/Library/Preferences/au.com.mondada.SIC "AppleCurrentKeyboardLayoutInputSourceID" 2>/dev/null`
	if [ -z "${prefAppleCurrentKeyboardLayoutInputSourceID}" ] ; then AppleCurrentKeyboardLayoutInputSourceID=`defaults read "/Library/Preferences/com.apple.HIToolbox" "AppleCurrentKeyboardLayoutInputSourceID" 2>/dev/null` ; fi
	if [ -n "${prefAppleCurrentKeyboardLayoutInputSourceID}" ] ; then AppleCurrentKeyboardLayoutInputSourceID="${prefAppleCurrentKeyboardLayoutInputSourceID}" ; fi
	echo "AppleCurrentKeyboardLayoutInputSourceID:	${AppleCurrentKeyboardLayoutInputSourceID}"
	prefInputMode=`defaults read ~/Library/Preferences/au.com.mondada.SIC "InputMode" 2>/dev/null`
	if [ -z "${prefInputMode}" ] ; then prefInputMode=`/usr/libexec/PlistBuddy -c "Print ':AppleSelectedInputSources:0:Input Mode'" "/Library/Preferences/com.apple.HIToolbox.plist" 2>/dev/null` ; fi
	if [ -n "${prefInputMode}" ] ; then InputMode="${prefInputMode}" ; fi
	echo "InputMode:		${InputMode}"
	set_KeyboardLayout "${AppleCurrentKeyboardLayoutInputSourceID}" "${InputMode}"
}

function save_Keyboard {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "AppleCurrentKeyboardLayoutInputSourceID" -string "${AppleCurrentKeyboardLayoutInputSourceID}"
	if [ -n "${InputMode}" ] ; then
		defaults write ~/Library/Preferences/au.com.mondada.SIC "InputMode" -string "${InputMode}"
	else
		defaults delete ~/Library/Preferences/au.com.mondada.SIC "InputMode" 2>/dev/null
	fi
}

function display_Keyboard {
	echo "Keyboard Layout:	${KeyboardLayout}"
	if [ -n "${TypingStyle}" ] ; then echo "Preferred typing style:	${TypingStyle}" ; fi
}

function select_Keyboard {
	KeyboardLayouts=( "${defaultKeyboardLayouts[@]}" )
	display_Title "Select Keyboard"
	display_Keyboard
	display_Options "Keyboard layouts" "Choose a keyboard layout: "
	select newKeyboardLayout in "${KeyboardLayouts[@]}" ; do
		while [ "${newKeyboardLayout}" == "Show All" ] ; do
			KeyboardLayouts=( "U.S." "Afghan Dari" "Afghan Pashto" "Afghan Uzbek" "Arabic" "Arabic - PC" "Arabic - QWERTY" "Armenian - HM QWERTY" "Armenian - Western QWERTY" "Australian" "Austrian" "Azeri" "Belgian" "Brazilian" "British" "Bulgarian" "Bulgarian - Phonetic" "Byelorussian" "Canadian English" "Canadian French - CSA" "Cherokee - Nation" "Cherokee - QWERTY" "Chinese - Simplified" "Chinese - Traditional" "Croatian" "Croatian - PC" "Czech" "Czech - QWERTY" "Dutch" "Dvorak" "Dvorak - Left" "Dvorak - Qwerty ⌘" "Dvorak - Right" "Estonian" "Faroese" "Finnish" "Finnish Extended" "Finnish - Sami - PC" "French" "French - Numerical" "German" "Greek" "Greek Polytonic" "Gujarati" "Gujarati - QWERTY" "Gurmukhi" "Gurmukhi - QWERTY" "Hangul" "Hawaiian" "Hebrew" "Hebrew - QWERTY" "Hungarian" "Icelandic" "Inuktitut - Nunavut" "Inuktitut - Nutaaq" "Inuktitut - QWERTY" "Inuttitut Nunavik" "Irish" "Irish Extended" "Italian" "Italian - Pro" "Jawi - QWERTY" "Kazakh" "Kotoeri" "Latvian" "Lithuanian" "Macedonian" "Maltese" "Maori" "Nepali" "Northern Sami" "Norwegian" "Norwegian Extended" "Norwegian Sami - PC" "Persian" "Persian - ISIRI 2901" "Persian - QWERTY" "Polish" "Polish Pro" "Portuguese" "Romanian" "Romanian - Standard" "Russian" "Russian - PC" "Russian - Phonetic" "Sami - PC" "Serbian" "Serbian - Latin" "Slovak" "Slovak - QWERTY" "Slovenian" "Spanish" "Spanish ISO" "Swedish" "Swedish - Pro" "Swedish Sami - PC" "Swiss French" "Swiss German" "Tamil Input Method" "Thai" "Thai - PattaChote" "Tibetan - Otani" "Tibetan - QWERTY" "Tibetan - Wylie" "Turkish" "Turkish - QWERTY" "Turkish - QWERTY PC" "U.S. Extended" "U.S. International - PC" "Ukrainian" "Unicode Hex Input" "Uyghur - QWERTY" "Vietnamese" "Vietnamese Unikey" "Welsh" )
			display_Title "Select Keyboard"
			display_Keyboard
			display_Options "Keyboard layouts" "Choose a keyboard layout: "
			select newKeyboardLayout in "${KeyboardLayouts[@]}" ; do
				if [ -n "${newKeyboardLayout}" ] ; then break ; fi
			done
		done
		if [ -n "${newKeyboardLayout}" ] ; then break ; fi
	done
	if [ "${newKeyboardLayout}" != "${KeyboardLayout}" ] ; then TypingStyle="" ; fi
	KeyboardLayout="${newKeyboardLayout}" ; newKeyboardLayout=""
	set_InputSources "${KeyboardLayout}"
	if [ ${#TypingStyles[@]} -gt 0 ] ; then
		display_Title "Select Keyboard"
		display_Keyboard
		if [ -z "${TypingStyle}" ] ; then echo "Preferred typing style:	" ; fi
		display_Options "Typing styles" "Which typing style do you prefer? "
		select newTypingStyle in "${TypingStyles[@]}" ; do
			if [ -n "${newTypingStyle}" ] ; then break ; fi
		done
		TypingStyle="${newTypingStyle}" ; newTypingStyle=""
		set_TypingStyle "${KeyboardLayout}" "${TypingStyle}"
	fi
}

function set_NTPServerName {
	case "${1}" in
		"time.apple.com" ) NTPServerName="Apple Americas/U.S. (time.apple.com)" ;;
		"time.asia.apple.com" ) NTPServerName="Apple Asia (time.asia.apple.com)" ;;
		"time.euro.apple.com" ) NTPServerName="Apple Europe (time.euro.apple.com)" ;;
		* ) NTPServerName="${1}" ;;
	esac
}

function set_NTPServer {
	case "${1}" in
		"Apple Americas/U.S. (time.apple.com)" ) NTPServer="time.apple.com" ;;
		"Apple Asia (time.asia.apple.com)" ) NTPServer="time.asia.apple.com" ;;
		"Apple Europe (time.euro.apple.com)" ) NTPServer="time.euro.apple.com" ;;
		* ) NTPServer="${1}" ;;
	esac
}

function get_NTPServer {
	prefntpdDisabled=`/usr/libexec/PlistBuddy -c "Print ':ntpdDisabled'" ~/Library/Preferences/au.com.mondada.SIC.plist 2>/dev/null`
	if [ ${?} -ne 0 ] ; then prefntpdDisabled=`/usr/libexec/PlistBuddy -c "Print ':org.ntp.ntpd:Disabled'" "/var/db/launchd.db/com.apple.launchd/overrides.plist" 2>/dev/null` ; fi
	if [ ${?} -ne 0 ] ; then prefntpdDisabled="" ; fi
	if [ -n "${prefntpdDisabled}" ] ; then ntpdDisabled="${prefntpdDisabled}" ; fi
	echo "ntpdDisabled:		${ntpdDisabled}"
	prefNTPServer=`defaults read ~/Library/Preferences/au.com.mondada.SIC "NTPServer" 2>/dev/null`
	if [ -z "${prefNTPServer}" ] ; then prefNTPServer=`cat "/etc/ntp.conf" | awk -F "server " '{print $NF}'` ; fi
	if [ -n "${prefNTPServer}" ] ; then NTPServer="${prefNTPServer}" ; fi
	echo "NTPServer:		${NTPServer}"
	set_NTPServerName "${NTPServer}"
}

function save_NTPServer {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "ntpdDisabled" -bool "${ntpdDisabled}"
	defaults write ~/Library/Preferences/au.com.mondada.SIC "NTPServer" -string "${NTPServer}"
}

function display_NTPServer {
	echo "Network Time Server:	${NTPServerName}"
	printf "			["
	if [ "${ntpdDisabled}" == "false" ] ; then printf "*" ; else printf " " ; fi
	echo "] Set date and time automatically"
}

function select_NTPServer {
	while [ -z "${setAutomatically}" ] ; do
		display_Title "Date and Time"
		display_NTPServer
		echo
		read -sn 1 -p "Set date and time automatically (Y/n)? " setAutomatically < /dev/tty
		echo
		if [ -z "${setAutomatically}" ] ; then setAutomatically="y" ; fi
		case "${setAutomatically}" in
			"Y" | "y" )
				ntpdDisabled="false"
				NTPServerNames=( "Apple Americas/U.S. (time.apple.com)" "Apple Asia (time.asia.apple.com)" "Apple Europe (time.euro.apple.com)" "Other..." )
				display_Title "Date and Time"
				display_NTPServer
				display_Options "NTP Servers" "Select your network time server: "
				select newNTPServerName in "${NTPServerNames[@]}" ; do
					while [ "${newNTPServerName}" == "Other..." ] ; do
						display_Title "Date and Time"
						display_NTPServer
						printf "\nNetwork time server (${defaultNTPServer}): "
						read newNTPServerName
						if [ -z "${newNTPServerName}" ] ; then set_NTPServerName "${defaultNTPServer}" ; fi
					done
					if [ -n "${newNTPServerName}" ] ; then break ; fi
				done
				NTPServerName="${newNTPServerName}"
				set_NTPServer "${NTPServerName}" ;;
			"N" | "n" )
				ntpdDisabled="true"
				NTPServer="${defaultNTPServer}"
				set_NTPServerName "${NTPServer}" ;;
			* ) setAutomatically="" ;;
		esac
	done
	setAutomatically=""
}

function set_TimeZoneDisplayName {
	# ${1}: ZTIMEZONENAME
	case "${1}" in
		"Pacific/Niue" ) TimeZoneDisplayName="Niue Time" ;;
		"Pacific/Pago_Pago" | "Pacific/Apia" ) TimeZoneDisplayName="Samoa Standard Time" ;;
		"Pacific/Rarotonga" ) TimeZoneDisplayName="Cook Islands Time" ;;
		"Pacific/Honolulu" ) TimeZoneDisplayName="Hawaii-Aleutian Standard Time" ;;
		"Pacific/Tahiti" ) TimeZoneDisplayName="Tahiti Time" ;;
		"America/Juneau" ) TimeZoneDisplayName="Alaska Standard Time" ;;
		"America/Vancouver" | "America/Whitehorse" | "America/Tijuana" | "America/Los_Angeles" ) TimeZoneDisplayName="Pacific Standard Time" ;;
		"Pacific/Pitcairn" ) TimeZoneDisplayName="Pitcairn Time" ;;
		"America/Edmonton" | "America/Dawson_Creek" | "America/Yellowknife" | "America/Mazatlan" | "America/Hermosillo" | "America/Chihuahua" | "America/Phoenix" | "America/Denver" | "America/Boise" ) TimeZoneDisplayName="Mountain Standard Time" ;;
		"America/Belize" | "America/Winnipeg" | "America/Regina" | "America/Swift_Current" | "America/Costa_Rica" | "America/Guatemala" | "America/Tegucigalpa" | "America/Mexico_City" | "America/Monterrey" | "America/Merida" | "America/Cancun" | "America/Managua" | "America/El_Salvador" | "America/Chicago" | "America/Indiana/Tell_City" | "America/North_Dakota/New_Salem" ) TimeZoneDisplayName="Central Standard Time" ;;
		"America/Caracas" ) TimeZoneDisplayName="Venezuela Time" ;;
		"America/Bogota" ) TimeZoneDisplayName="Columbia Time" ;;
		"America/Havana" ) TimeZoneDisplayName="Cuba Standard Time" ;;
		"America/Nassau" | "America/Montreal" | "America/Toronto" | "America/Nipigon" | "America/Thunder_Bay" | "America/Port-au-Prince" | "America/Jamaica" | "America/Cayman" | "America/Panama" | "America/Grand_Turk" | "America/New_York" | "America/Indiana/Indianapolis" | "America/Kentucky/Monticello" | "America/Indiana/Vincennes" | "America/Kentucky/Louisville" | "America/Detroit" ) TimeZoneDisplayName="Eastern Standard Time" ;;
		"America/Guayaquil" ) TimeZoneDisplayName="Ecuador Time" ;;
		"America/Lima" ) TimeZoneDisplayName="Peru Time" ;;
		"America/St_Johns" ) TimeZoneDisplayName="Newfoundland Standard Time" ;;
		"America/Manaus" | "America/Cuiaba" | "America/Campo_Grande" | "America/Porto_Velho" | "America/Boa_Vista" | "America/Rio_Branco" ) TimeZoneDisplayName="Amazon Time" ;;
		"America/Antigua" | "America/Anguilla" | "America/Curacao" | "America/Aruba" | "America/Barbados" | "America/Guadeloupe" | "Atlantic/Bermuda" | "America/Moncton" | "America/Halifax" | "America/Glace_Bay" | "America/Dominica" | "America/Santo_Domingo" | "America/Grenada" | "America/St_Kitts" | "America/St_Lucia" | "America/Martinique" | "America/Montserrat" | "America/Puerto_Rico" | "America/Port_of_Spain" | "America/St_Vincent" | "America/Tortola" | "America/St_Thomas" ) TimeZoneDisplayName="Atlantic Standard Time" ;;
		"America/La_Paz" ) TimeZoneDisplayName="Bolivia Time" ;;
		"America/Santiago" ) TimeZoneDisplayName="Chile Time" ;;
		"Atlantic/Stanley" ) TimeZoneDisplayName="Falkland Islands Time" ;;
		"America/Guyana" ) TimeZoneDisplayName="Guyana Time" ;;
		"America/Asuncion" ) TimeZoneDisplayName="Paraguay Time" ;;
		"America/Argentina/Buenos_Aires" | "America/Argentina/Cordoba" | "America/Argentina/Tucuman" | "America/Argentina/Ushuaia" | "America/Argentina/Rio_Gallegos" | "America/Argentina/Jujuy" | "America/Argentina/Mendoza" | "America/Argentina/San_Juan" | "America/Argentina/Catamarca" | "America/Argentina/La_Rioja" ) TimeZoneDisplayName="Argentina Time" ;;
		"America/Belem" | "America/Recife" | "America/Fortaleza" | "America/Maceio" | "America/Araguaina" | "America/Bahia" | "America/Sao_Paulo" ) TimeZoneDisplayName="Brasilia Time" ;;
		"America/Cayenne" ) TimeZoneDisplayName="French Guiana Time" ;;
		"America/Miquelon" ) TimeZoneDisplayName="Pierre an Miquelon Standard Time" ;;
		"America/Paramaribo" ) TimeZoneDisplayName="Suriname Time" ;;
		"America/Montevideo" ) TimeZoneDisplayName="Uruguay Time" ;;
		"America/Godthab" ) TimeZoneDisplayName="West Greenland Time" ;;
		"America/Noronha" ) TimeZoneDisplayName="Fernando de Noronha Time" ;;
		"Atlantic/South_Georgia" ) TimeZoneDisplayName="South Georgia Time" ;;
		"Atlantic/Azores" ) TimeZoneDisplayName="Azores Time" ;;
		"Atlantic/Cape_Verde" ) TimeZoneDisplayName="Cape Verde Time" ;;
		"Africa/Ouagadougou" | "Africa/Abidjan" | "Europe/London" | "Europe/Guernsey" | "Africa/Accra" | "Africa/Banjul" | "Africa/Conakry" | "Africa/Bissau" | "Europe/Dublin" | "Europe/Isle_of_Man" | "Atlantic/Reykjavik" | "Europe/Jersey" | "Africa/Monrovia" | "Africa/Bamako" | "Africa/Nouakchott" | "Atlantic/St_Helena" | "Africa/Freetown" | "Africa/Dakar" | "Africa/Sao_Tome" | "Africa/Lome" ) TimeZoneDisplayName="Greenwich Mean Time" ;;
		"Africa/El_Aaiun" | "Atlantic/Canary" | "Atlantic/Faroe" | "Africa/Casablanca" | "Europe/Lisbon" | "Atlantic/Madeira" ) TimeZoneDisplayName="Western European Time" ;;
		"Europe/Andorra" | "Europe/Tirane" | "Europe/Vienna" | "Europe/Sarajevo" | "Europe/Brussels" | "Europe/Zurich" | "Europe/Paris" | "Europe/Prague" | "Europe/Berlin" | "Europe/Copenhagen" | "Africa/Algiers" | "Europe/Madrid" | "Africa/Ceuta" | "Europe/Gibraltar" | "Europe/Zagreb" | "Europe/Budapest" | "Europe/Rome" | "Europe/Vaduz" | "Europe/Luxembourg" | "Europe/Monaco" | "Europe/Podgorica" | "Europe/Skopje" | "Europe/Malta" | "Europe/Amsterdam" | "Europe/Oslo" | "Europe/Warsaw" | "Europe/Belgrade" | "Europe/Stockholm" | "Europe/Ljubljana" | "Arctic/Longyearbyen" | "Europe/Bratislava" | "Europe/San_Marino" | "Africa/Tunis" | "Europe/Vatican" ) TimeZoneDisplayName="Central European Time" ;;
		"Africa/Luanda" | "Africa/Porto-Novo" | "Africa/Kinshasa" | "Africa/Bangui" | "Africa/Brazzaville" | "Africa/Douala" | "Africa/Libreville" | "Africa/Malabo" | "Africa/Windhoek" | "Africa/Niamey" | "Africa/Lagos" | "Africa/Ndjamena" ) TimeZoneDisplayName="West Africa Time" ;;
		"Africa/Bujumbura" | "Africa/Gaborone" | "Africa/Lubumbashi" | "Africa/Blantyre" | "Africa/Maputo" | "Africa/Kigali" | "Africa/Lusaka" | "Africa/Harare" ) TimeZoneDisplayName="Central Africa Time" ;;
		"Europe/Sofia" | "Europe/Minsk" | "Asia/Nicosia" | "Europe/Tallinn" | "Africa/Cairo" | "Europe/Helsinki" | "Europe/Athens" | "Asia/Amman" | "Asia/Beirut" | "Europe/Vilnius" | "Europe/Riga" | "Africa/Tripoli" | "Europe/Chisinau" | "Asia/Gaza" | "Europe/Bucharest" | "Europe/Kaliningrad" | "Asia/Damascus" | "Europe/Istanbul" | "Europe/Simferopol" | "Europe/Zaporozhye" | "Europe/Kiev" | "Europe/Uzhgorod" ) TimeZoneDisplayName="Eastern European Time" ;;
		"Asia/Jerusalem" ) TimeZoneDisplayName="Israel Standard Time" ;;
		"Africa/Maseru" | "Africa/Mbabane" | "Africa/Johannesburg" ) TimeZoneDisplayName="South Africa Standard Time" ;;
		"Asia/Bahrain" | "Asia/Baghdad" | "Asia/Kuwait" | "Asia/Qatar" | "Asia/Riyadh" | "Asia/Aden" ) TimeZoneDisplayName="Arabian Standard Time" ;;
		"Africa/Djibouti" | "Africa/Asmara" | "Africa/Addis_Ababa" | "Africa/Nairobi" | "Indian/Comoro" | "Indian/Antananarivo" | "Africa/Khartoum" | "Africa/Mogadishu" | "Africa/Dar_es_Salaam" | "Africa/Kampala" | "Indian/Mayotte" ) TimeZoneDisplayName="East Africa Time" ;;
		"Europe/Moscow" ) TimeZoneDisplayName="Moscow Standard Time" ;;
		"Europe/Volgograd" ) TimeZoneDisplayName="Volgograd Time" ;;
		"Asia/Tehran" ) TimeZoneDisplayName="Iran Standard Time" ;;
		"Asia/Yerevan" ) TimeZoneDisplayName="Armenia Time" ;;
		"Asia/Baku" ) TimeZoneDisplayName="Azerbaijan Time" ;;
		"Asia/Tbilisi" ) TimeZoneDisplayName="Georgia Time" ;;
		"Asia/Dubai" | "Asia/Muscat" ) TimeZoneDisplayName="Gulf Standard Time" ;;
		"Indian/Mauritius" ) TimeZoneDisplayName="Mauritius Time" ;;
		"Indian/Reunion" ) TimeZoneDisplayName="Reunion Time" ;;
		"Europe/Samara" ) TimeZoneDisplayName="Samara Time" ;;
		"Indian/Mahe" ) TimeZoneDisplayName="Seychelles Time" ;;
		"Asia/Kabul" ) TimeZoneDisplayName="Afghanistan Time" ;;
		"Indian/Maldives" ) TimeZoneDisplayName="Maldives Time" ;;
		"Asia/Karachi" ) TimeZoneDisplayName="Pakistan Time" ;;
		"Asia/Dushanbe" ) TimeZoneDisplayName="Tajikistan Time" ;;
		"Asia/Ashgabat" ) TimeZoneDisplayName="Turkmenistan Time" ;;
		"Asia/Samarkand" | "Asia/Tashkent" ) TimeZoneDisplayName="Uzbekistan Time" ;;
		"Asia/Oral" | "Asia/Aqtau" | "Asia/Aqtobe" ) TimeZoneDisplayName="West Kazakhstan Standard Time" ;;
		"Asia/Yekaterinburg" ) TimeZoneDisplayName="Yekaterinburg Time" ;;
		"Asia/Kolkata" | "Asia/Colombo" ) TimeZoneDisplayName="India Standard Time" ;;
		"Asia/Dhaka" ) TimeZoneDisplayName="Bangladesh Time" ;;
		"Asia/Thimphu" ) TimeZoneDisplayName="Bhutan Time" ;;
		"Asia/Almaty" | "Asia/Qyzylorda" ) TimeZoneDisplayName="East Kazakhstan Standard Time" ;;
		"Asia/Bishkek" ) TimeZoneDisplayName="Kyrgystan Time" ;;
		"Asia/Omsk" ) TimeZoneDisplayName="Omsk Time" ;;
		"Asia/Rangoon" ) TimeZoneDisplayName="Myanmar Time" ;;
		"Indian/Christmas" ) TimeZoneDisplayName="Christmas Island Time" ;;
		"Asia/Phnom_Penh" | "Asia/Vientiane" | "Asia/Bangkok" | "Asia/Ho_Chi_Minh" ) TimeZoneDisplayName="Indochina Time" ;;
		"Asia/Krasnoyarsk" ) TimeZoneDisplayName="Krasnoyarsk Time" ;;
		"Asia/Pontianak" | "Asia/Jakarta" ) TimeZoneDisplayName="Western Indonesia Time" ;;
		"Australia/Perth" ) TimeZoneDisplayName="Australian Western Standard Time" ;;
		"Asia/Brunei" ) TimeZoneDisplayName="Brunei Darussalam Time" ;;
		"Asia/Makassar" ) TimeZoneDisplayName="Central Indonesia Time" ;;
		"Asia/Urumqi" | "Asia/Kashgar" | "Asia/Chongqing" | "Asia/Shanghai" | "Asia/Harbin" | "Asia/Macau" ) TimeZoneDisplayName="China Standard Time" ;;
		"Asia/Taipei" ) TimeZoneDisplayName="GMT+08:00" ;;
		"Asia/Hong_Kong" ) TimeZoneDisplayName="Hong Kong Time" ;;
		"Asia/Irkutsk" ) TimeZoneDisplayName="Irkutsk Time" ;;
		"Asia/Kuala_Lumpur" | "Asia/Kuching" ) TimeZoneDisplayName="Malaysia Time" ;;
		"Asia/Manila" ) TimeZoneDisplayName="Philippine Time" ;;
		"Asia/Singapore" ) TimeZoneDisplayName="Singapore Standard Time" ;;
		"Asia/Ulaanbaatar" ) TimeZoneDisplayName="Ulan Bator Time" ;;
		"Asia/Dili" ) TimeZoneDisplayName="East Timor Time" ;;
		"Asia/Jayapura" ) TimeZoneDisplayName="Eastern Indonesia Time" ;;
		"Asia/Tokyo" ) TimeZoneDisplayName="Japan Standard Time" ;;
		"Asia/Pyongyang" | "Asia/Seoul" ) TimeZoneDisplayName="Korean Standard Time" ;;
		"Pacific/Palau" ) TimeZoneDisplayName="Palau Time" ;;
		"Asia/Yakutsk" ) TimeZoneDisplayName="Yakutsk Time" ;;
		"Australia/Adelaide" | "Australia/Darwin" | "Australia/Broken_Hill" ) TimeZoneDisplayName="Australian Central Standard Time" ;;
		"Australia/Sydney" | "Australia/Melbourne" | "Australia/Brisbane" | "Australia/Hobart" ) TimeZoneDisplayName="Australia Eastern Standard Time" ;;
		"Pacific/Guam" ) TimeZoneDisplayName="Chamorro Standard Time" ;;
		"Pacific/Port_Moresby" ) TimeZoneDisplayName="Papua New Guinea Time" ;;
		"Asia/Sakhalin" ) TimeZoneDisplayName="Sakhalin Time" ;;
		"Asia/Vladivostok" ) TimeZoneDisplayName="Vladivostok Time" ;;
		"Asia/Magadan" ) TimeZoneDisplayName="Magadan Time" ;;
		"Pacific/Noumea" ) TimeZoneDisplayName="New Caledonia Time" ;;
		"Pacific/Ponape" ) TimeZoneDisplayName="Ponape Time" ;;
		"Pacific/Guadalcanal" ) TimeZoneDisplayName="Solomon Islands Time" ;;
		"Pacific/Efate" ) TimeZoneDisplayName="Vanuatu Time" ;;
		"Pacific/Norfolk" ) TimeZoneDisplayName="Norfolk Islands Time" ;;
		"Asia/Anadyr" ) TimeZoneDisplayName="Anadyr Time" ;;
		"Pacific/Fiji" ) TimeZoneDisplayName="Fiji Time" ;;
		"Pacific/Tarawa" ) TimeZoneDisplayName="Gilbert Islands Time" ;;
		"Pacific/Majuro" ) TimeZoneDisplayName="Marshall Islands Time" ;;
		"Pacific/Auckland" ) TimeZoneDisplayName="New Zealand Standard Time" ;;
		"Asia/Kamchatka" ) TimeZoneDisplayName="Petropavlovsk-Kamchatsky Time" ;;
		"Pacific/Funafuti" ) TimeZoneDisplayName="Tuvalu Time" ;;
		"Pacific/Tongatapu" ) TimeZoneDisplayName="Tonga Time" ;;
	esac
}

function set_GeoKitFramework {
	if [ -n "${targDisk}" ] ; then
		TargetOSMinor=`defaults read "/Volumes/${targDisk}/System/Library/CoreServices/SystemVersion" "ProductVersion" | awk -F "." '{print $2}'`
		GeoKitFramework="/Volumes/${targDisk}/System/Library/PrivateFrameworks/GeoKit.framework/Versions/A/Resources/world.geokit"
	else
		TargetOSMinor=`defaults read "/System/Library/CoreServices/SystemVersion" "ProductVersion" | awk -F "." '{print $2}'`
		GeoKitFramework="/System/Library/PrivateFrameworks/GeoKit.framework/Versions/A/Resources/world.geokit"
	fi
	case ${TargetOSMinor} in
		6 | 7 ) PLACES="ZGEOPLACE" ;;
		8 ) PLACES="ZGEOKITPLACE" ;;
	esac
}

function set_TimeZone {
	# ${1}: GeonameID
	set_GeoKitFramework
	QUERY="select ZTIMEZONENAME from ${PLACES} where ZGEONAMEID = ${1};"
	ZTIMEZONENAME=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZTIMEZONENAME = " | awk -F "ZTIMEZONENAME = " '{print $NF}'`
	set_TimeZoneDisplayName "${ZTIMEZONENAME}"
	TimeZone="${TimeZoneDisplayName}"
}

function set_ClosestCity {
	# ${1}: GeonameID
	set_GeoKitFramework
	QUERY="select ZNAME from ${PLACES} where ZGEONAMEID = ${1};"
	ZNAME=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZNAME = " | awk -F "ZNAME = " '{print $NF}'`
	QUERY="select ZREGIONALCODE from ${PLACES} where ZGEONAMEID = ${1};"
	ZREGIONALCODE=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZREGIONALCODE = " | awk -F "ZREGIONALCODE = " '{print $NF}'`
	QUERY="select ZCOUNTRY from ${PLACES} where ZGEONAMEID = ${1};"
	ZCOUNTRY=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZCOUNTRY = " | awk -F "ZCOUNTRY = " '{print $NF}'`
	QUERY="select ZNAME from ZGEOPLACENAME where ZEN > 0 and ZPLACE = ${ZCOUNTRY};"
	ZCOUNTRYNAME=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZNAME = " | awk -F "ZNAME = " '{print $NF}'`
	if [ -n "${ZREGIONALCODE}" ] ; then
		ClosestCity="${ZNAME}, ${ZREGIONALCODE} - ${ZCOUNTRYNAME}"
	else
		ClosestCity="${ZNAME} - ${ZCOUNTRYNAME}"
	fi
}

function set_TimeZoneList {
	# ${1}: GeonameID
	set_GeoKitFramework
	QUERY="select ZCOUNTRY from ${PLACES} where ZGEONAMEID = ${1};"
	ZCOUNTRY=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZCOUNTRY = " | awk -F "ZCOUNTRY = " '{print $NF}'`
	QUERY="select ZTIMEZONENAME from ${PLACES} where ZGEONAMEID = ${1};"
	ZTIMEZONENAME=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZTIMEZONENAME = " | awk -F "ZTIMEZONENAME = " '{print $NF}'`
	set_TimeZoneDisplayName "${ZTIMEZONENAME}"
	TimeZoneList=( "${TimeZoneDisplayName}" )
	QUERY="select distinct ZTIMEZONENAME from ${PLACES} where ZCOUNTRY = ${ZCOUNTRY};"
	ZTIMEZONENAMES=( `sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZTIMEZONENAME = " | awk -F "ZTIMEZONENAME = " '{print $NF}'` )
	i=0
	for ZTIMEZONENAME in "${ZTIMEZONENAMES[@]}" ; do
		set_TimeZoneDisplayName "${ZTIMEZONENAME}"
		AddTimeZoneDisplayName=1
		for Element in "${TimeZoneList[@]}" ; do
			if [ "${TimeZoneDisplayName}" == "${Element}" ] ; then AddTimeZoneDisplayName=0 ; break ; fi
		done
		if [ ${AddTimeZoneDisplayName} -eq 1 ] ; then TimeZoneList=( "${TimeZoneList[@]}" "${TimeZoneDisplayName}" ) ; fi
		let i++
	done
	TimeZoneList=( "${TimeZoneList[@]}" "Show All" )
}

function set_TimeZoneNames {
	# ${1}: TimeZone
	case "${1}" in
		"Niue Time" ) TimeZoneNames=( "Pacific/Niue" ) ;;
		"Samoa Standard Time" ) TimeZoneNames=( "Pacific/Pago_Pago" "Pacific/Apia" ) ;;
		"Cook Islands Time" ) TimeZoneNames=( "Pacific/Rarotonga" ) ;;
		"Hawaii-Aleutian Standard Time" ) TimeZoneNames=( "Pacific/Honolulu" ) ;;
		"Tahiti Time" ) TimeZoneNames=( "Pacific/Tahiti" ) ;;
		"Alaska Standard Time" ) TimeZoneNames=( "America/Juneau" ) ;;
		"Pacific Standard Time" ) TimeZoneNames=( "America/Los_Angeles" "America/Vancouver" "America/Whitehorse" "America/Tijuana" ) ;;
		"Pitcairn Time" ) TimeZoneNames=( "Pacific/Pitcairn" ) ;;
		"Mountain Standard Time" ) TimeZoneNames=( "America/Edmonton" "America/Dawson_Creek" "America/Yellowknife" "America/Mazatlan" "America/Hermosillo" "America/Chihuahua" "America/Phoenix" "America/Denver" "America/Boise" ) ;;
		"Central Standard Time" ) TimeZoneNames=( "America/Belize" "America/Winnipeg" "America/Regina" "America/Swift_Current" "America/Costa_Rica" "America/Guatemala" "America/Tegucigalpa" "America/Mexico_City" "America/Monterrey" "America/Merida" "America/Cancun" "America/Managua" "America/El_Salvador" "America/Chicago" "America/Indiana/Tell_City" "America/North_Dakota/New_Salem" ) ;;
		"Venezuela Time" ) TimeZoneNames=( "America/Caracas" ) ;;
		"Columbia Time" ) TimeZoneNames=( "America/Bogota" ) ;;
		"Cuba Standard Time" ) TimeZoneNames=( "America/Havana" ) ;;
		"Eastern Standard Time" ) TimeZoneNames=( "America/Nassau" "America/Montreal" "America/Toronto" "America/Nipigon" "America/Thunder_Bay" "America/Port-au-Prince" "America/Jamaica" "America/Cayman" "America/Panama" "America/Grand_Turk" "America/New_York" "America/Indiana/Indianapolis" "America/Kentucky/Monticello" "America/Indiana/Vincennes" "America/Kentucky/Louisville" "America/Detroit" ) ;;
		"Ecuador Time" ) TimeZoneNames=( "America/Guayaquil" ) ;;
		"Peru Time" ) TimeZoneNames=( "America/Lima" ) ;;
		"Newfoundland Standard Time" ) TimeZoneNames=( "America/St_Johns" ) ;;
		"Amazon Time" ) TimeZoneNames=( "America/Manaus" "America/Cuiaba" "America/Campo_Grande" "America/Porto_Velho" "America/Boa_Vista" "America/Rio_Branco" ) ;;
		"Atlantic Standard Time" ) TimeZoneNames=( "America/Antigua" "America/Anguilla" "America/Curacao" "America/Aruba" "America/Barbados" "America/Guadeloupe" "Atlantic/Bermuda" "America/Moncton" "America/Halifax" "America/Glace_Bay" "America/Dominica" "America/Santo_Domingo" "America/Grenada" "America/St_Kitts" "America/St_Lucia" "America/Martinique" "America/Montserrat" "America/Puerto_Rico" "America/Port_of_Spain" "America/St_Vincent" "America/Tortola" "America/St_Thomas" ) ;;
		"Bolivia Time" ) TimeZoneNames=( "America/La_Paz" ) ;;
		"Chile Time" ) TimeZoneNames=( "America/Santiago" ) ;;
		"Falkland Islands Time" ) TimeZoneNames=( "Atlantic/Stanley" ) ;;
		"Guyana Time" ) TimeZoneNames=( "America/Guyana" ) ;;
		"Paraguay Time" ) TimeZoneNames=( "America/Asuncion" ) ;;
		"Argentina Time" ) TimeZoneNames=( "America/Argentina/Buenos_Aires" "America/Argentina/Cordoba" "America/Argentina/Tucuman" "America/Argentina/Ushuaia" "America/Argentina/Rio_Gallegos" "America/Argentina/Jujuy" "America/Argentina/Mendoza" "America/Argentina/San_Juan" "America/Argentina/Catamarca" "America/Argentina/La_Rioja" ) ;;
		"Brasilia Time" ) TimeZoneNames=( "America/Belem" "America/Recife" "America/Fortaleza" "America/Maceio" "America/Araguaina" "America/Bahia" "America/Sao_Paulo" ) ;;
		"French Guiana Time" ) TimeZoneNames=( "America/Cayenne" ) ;;
		"Pierre an Miquelon Standard Time" ) TimeZoneNames=( "America/Miquelon" ) ;;
		"Suriname Time" ) TimeZoneNames=( "America/Paramaribo" ) ;;
		"Uruguay Time" ) TimeZoneNames=( "America/Montevideo" ) ;;
		"West Greenland Time" ) TimeZoneNames=( "America/Godthab" ) ;;
		"Fernando de Noronha Time" ) TimeZoneNames=( "America/Noronha" ) ;;
		"South Georgia Time" ) TimeZoneNames=( "Atlantic/South_Georgia" ) ;;
		"Azores Time" ) TimeZoneNames=( "Atlantic/Azores" ) ;;
		"Cape Verde Time" ) TimeZoneNames=( "Atlantic/Cape_Verde" ) ;;
		"Greenwich Mean Time" ) TimeZoneNames=( "Africa/Ouagadougou" "Africa/Abidjan" "Europe/London" "Europe/Guernsey" "Africa/Accra" "Africa/Banjul" "Africa/Conakry" "Africa/Bissau" "Europe/Dublin" "Europe/Isle_of_Man" "Atlantic/Reykjavik" "Europe/Jersey" "Africa/Monrovia" "Africa/Bamako" "Africa/Nouakchott" "Atlantic/St_Helena" "Africa/Freetown" "Africa/Dakar" "Africa/Sao_Tome" "Africa/Lome" ) ;;
		"Western European Time" ) TimeZoneNames=( "Africa/El_Aaiun" "Atlantic/Canary" "Atlantic/Faroe" "Africa/Casablanca" "Europe/Lisbon" "Atlantic/Madeira" ) ;;
		"Central European Time" ) TimeZoneNames=( "Europe/Andorra" "Europe/Tirane" "Europe/Vienna" "Europe/Sarajevo" "Europe/Brussels" "Europe/Zurich" "Europe/Paris" "Europe/Prague" "Europe/Berlin" "Europe/Copenhagen" "Africa/Algiers" "Europe/Madrid" "Africa/Ceuta" "Europe/Gibraltar" "Europe/Zagreb" "Europe/Budapest" "Europe/Rome" "Europe/Vaduz" "Europe/Luxembourg" "Europe/Monaco" "Europe/Podgorica" "Europe/Skopje" "Europe/Malta" "Europe/Amsterdam" "Europe/Oslo" "Europe/Warsaw" "Europe/Belgrade" "Europe/Stockholm" "Europe/Ljubljana" "Arctic/Longyearbyen" "Europe/Bratislava" "Europe/San_Marino" "Africa/Tunis" "Europe/Vatican" ) ;;
		"West Africa Time" ) TimeZoneNames=( "Africa/Luanda" "Africa/Porto-Novo" "Africa/Kinshasa" "Africa/Bangui" "Africa/Brazzaville" "Africa/Douala" "Africa/Libreville" "Africa/Malabo" "Africa/Windhoek" "Africa/Niamey" "Africa/Lagos" "Africa/Ndjamena" ) ;;
		"Central Africa Time" ) TimeZoneNames=( "Africa/Bujumbura" "Africa/Gaborone" "Africa/Lubumbashi" "Africa/Blantyre" "Africa/Maputo" "Africa/Kigali" "Africa/Lusaka" "Africa/Harare" ) ;;
		"Eastern European Time" ) TimeZoneNames=( "Europe/Sofia" "Europe/Minsk" "Asia/Nicosia" "Europe/Tallinn" "Africa/Cairo" "Europe/Helsinki" "Europe/Athens" "Asia/Amman" "Asia/Beirut" "Europe/Vilnius" "Europe/Riga" "Africa/Tripoli" "Europe/Chisinau" "Asia/Gaza" "Europe/Bucharest" "Europe/Kaliningrad" "Asia/Damascus" "Europe/Istanbul" "Europe/Simferopol" "Europe/Zaporozhye" "Europe/Kiev" "Europe/Uzhgorod" ) ;;
		"Israel Standard Time" ) TimeZoneNames=( "Asia/Jerusalem" ) ;;
		"South Africa Standard Time" ) TimeZoneNames=( "Africa/Maseru" "Africa/Mbabane" "Africa/Johannesburg" ) ;;
		"Arabian Standard Time" ) TimeZoneNames=( "Asia/Bahrain" "Asia/Baghdad" "Asia/Kuwait" "Asia/Qatar" "Asia/Riyadh" "Asia/Aden" ) ;;
		"East Africa Time" ) TimeZoneNames=( "Africa/Djibouti" "Africa/Asmara" "Africa/Addis_Ababa" "Africa/Nairobi" "Indian/Comoro" "Indian/Antananarivo" "Africa/Khartoum" "Africa/Mogadishu" "Africa/Dar_es_Salaam" "Africa/Kampala" "Indian/Mayotte" ) ;;
		"Moscow Standard Time" ) TimeZoneNames=( "Europe/Moscow" ) ;;
		"Volgograd Time" ) TimeZoneNames=( "Europe/Volgograd" ) ;;
		"Iran Standard Time" ) TimeZoneNames=( "Asia/Tehran" ) ;;
		"Armenia Time" ) TimeZoneNames=( "Asia/Yerevan" ) ;;
		"Azerbaijan Time" ) TimeZoneNames=( "Asia/Baku" ) ;;
		"Georgia Time" ) TimeZoneNames=( "Asia/Tbilisi" ) ;;
		"Gulf Standard Time" ) TimeZoneNames=( "Asia/Dubai" "Asia/Muscat" ) ;;
		"Mauritius Time" ) TimeZoneNames=( "Indian/Mauritius" ) ;;
		"Reunion Time" ) TimeZoneNames=( "Indian/Reunion" ) ;;
		"Samara Time" ) TimeZoneNames=( "Europe/Samara" ) ;;
		"Seychelles Time" ) TimeZoneNames=( "Indian/Mahe" ) ;;
		"Afghanistan Time" ) TimeZoneNames=( "Asia/Kabul" ) ;;
		"Maldives Time" ) TimeZoneNames=( "Indian/Maldives" ) ;;
		"Pakistan Time" ) TimeZoneNames=( "Asia/Karachi" ) ;;
		"Tajikistan Time" ) TimeZoneNames=( "Asia/Dushanbe" ) ;;
		"Turkmenistan Time" ) TimeZoneNames=( "Asia/Ashgabat" ) ;;
		"Uzbekistan Time" ) TimeZoneNames=( "Asia/Samarkand" "Asia/Tashkent" ) ;;
		"West Kazakhstan Standard Time" ) TimeZoneNames=( "Asia/Oral" "Asia/Aqtau" "Asia/Aqtobe" ) ;;
		"Yekaterinburg Time" ) TimeZoneNames=( "Asia/Yekaterinburg" ) ;;
		"India Standard Time" ) TimeZoneNames=( "Asia/Kolkata" "Asia/Colombo" ) ;;
		"Bangladesh Time" ) TimeZoneNames=( "Asia/Dhaka" ) ;;
		"Bhutan Time" ) TimeZoneNames=( "Asia/Thimphu" ) ;;
		"East Kazakhstan Standard Time" ) TimeZoneNames=( "Asia/Almaty" "Asia/Qyzylorda" ) ;;
		"Kyrgystan Time" ) TimeZoneNames=( "Asia/Bishkek" ) ;;
		"Omsk Time" ) TimeZoneNames=( "Asia/Omsk" ) ;;
		"Myanmar Time" ) TimeZoneNames=( "Asia/Rangoon" ) ;;
		"Christmas Island Time" ) TimeZoneNames=( "Indian/Christmas" ) ;;
		"Indochina Time" ) TimeZoneNames=( "Asia/Phnom_Penh" "Asia/Vientiane" "Asia/Bangkok" "Asia/Ho_Chi_Minh" ) ;;
		"Krasnoyarsk Time" ) TimeZoneNames=( "Asia/Krasnoyarsk" ) ;;
		"Western Indonesia Time" ) TimeZoneNames=( "Asia/Pontianak" "Asia/Jakarta" ) ;;
		"Australian Western Standard Time" ) TimeZoneNames=( "Australia/Perth" ) ;;
		"Brunei Darussalam Time" ) TimeZoneNames=( "Asia/Brunei" ) ;;
		"Central Indonesia Time" ) TimeZoneNames=( "Asia/Makassar" ) ;;
		"China Standard Time" ) TimeZoneNames=( "Asia/Urumqi" "Asia/Kashgar" "Asia/Chongqing" "Asia/Shanghai" "Asia/Harbin" "Asia/Macau" ) ;;
		"GMT+08:00" ) TimeZoneNames=( "Asia/Taipei" ) ;;
		"Hong Kong Time" ) TimeZoneNames=( "Asia/Hong_Kong" ) ;;
		"Irkutsk Time" ) TimeZoneNames=( "Asia/Irkutsk" ) ;;
		"Malaysia Time" ) TimeZoneNames=( "Asia/Kuala_Lumpur" "Asia/Kuching" ) ;;
		"Philippine Time" ) TimeZoneNames=( "Asia/Manila" ) ;;
		"Singapore Standard Time" ) TimeZoneNames=( "Asia/Singapore" ) ;;
		"Ulan Bator Time" ) TimeZoneNames=( "Asia/Ulaanbaatar" ) ;;
		"East Timor Time" ) TimeZoneNames=( "Asia/Dili" ) ;;
		"Eastern Indonesia Time" ) TimeZoneNames=( "Asia/Jayapura" ) ;;
		"Japan Standard Time" ) TimeZoneNames=( "Asia/Tokyo" ) ;;
		"Korean Standard Time" ) TimeZoneNames=( "Asia/Pyongyang" "Asia/Seoul" ) ;;
		"Palau Time" ) TimeZoneNames=( "Pacific/Palau" ) ;;
		"Yakutsk Time" ) TimeZoneNames=( "Asia/Yakutsk" ) ;;
		"Australian Central Standard Time" ) TimeZoneNames=( "Australia/Adelaide" "Australia/Darwin" "Australia/Broken_Hill" ) ;;
		"Australia Eastern Standard Time" ) TimeZoneNames=( "Australia/Sydney" "Australia/Melbourne" "Australia/Brisbane" "Australia/Hobart" ) ;;
		"Chamorro Standard Time" ) TimeZoneNames=( "Pacific/Guam" ) ;;
		"Papua New Guinea Time" ) TimeZoneNames=( "Pacific/Port_Moresby" ) ;;
		"Sakhalin Time" ) TimeZoneNames=( "Asia/Sakhalin" ) ;;
		"Vladivostok Time" ) TimeZoneNames=( "Asia/Vladivostok" ) ;;
		"Magadan Time" ) TimeZoneNames=( "Asia/Magadan" ) ;;
		"New Caledonia Time" ) TimeZoneNames=( "Pacific/Noumea" ) ;;
		"Ponape Time" ) TimeZoneNames=( "Pacific/Ponape" ) ;;
		"Solomon Islands Time" ) TimeZoneNames=( "Pacific/Guadalcanal" ) ;;
		"Vanuatu Time" ) TimeZoneNames=( "Pacific/Efate" ) ;;
		"Norfolk Islands Time" ) TimeZoneNames=( "Pacific/Norfolk" ) ;;
		"Anadyr Time" ) TimeZoneNames=( "Asia/Anadyr" ) ;;
		"Fiji Time" ) TimeZoneNames=( "Pacific/Fiji" ) ;;
		"Gilbert Islands Time" ) TimeZoneNames=( "Pacific/Tarawa" ) ;;
		"Marshall Islands Time" ) TimeZoneNames=( "Pacific/Majuro" ) ;;
		"New Zealand Standard Time" ) TimeZoneNames=( "Pacific/Auckland" ) ;;
		"Petropavlovsk-Kamchatsky Time" ) TimeZoneNames=( "Asia/Kamchatka" ) ;;
		"Tuvalu Time" ) TimeZoneNames=( "Pacific/Funafuti" ) ;;
		"Tonga Time" ) TimeZoneNames=( "Pacific/Tongatapu" ) ;;
	esac
}

function set_CountryCode {
	# ${1}: ZCOUNTRY
	set_GeoKitFramework
	QUERY="select ZNAME from ZGEOPLACENAME where ZPLACE = ${1} and ZEN > 0;"
	ZPLACE=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZPLACE = " | awk -F "ZPLACE = " '{print $NF}'`
	case "${ZPLACE}" in
		"Afghanistan" ) CountryCode="AF" ;;
		"Åland Islands" ) CountryCode="AX" ;;
		"Albania" ) CountryCode="AL" ;;
		"Algeria" ) CountryCode="DZ" ;;
		"American Samoa" ) CountryCode="AS" ;;
		"Andorra" ) CountryCode="AD" ;;
		"Angola" ) CountryCode="AO" ;;
		"Anguilla" ) CountryCode="AI" ;;
		"Antarctica" ) CountryCode="AQ" ;;
		"Antigua and Barbuda" ) CountryCode="AG" ;;
		"Argentina" ) CountryCode="AR" ;;
		"Armenia" ) CountryCode="AM" ;;
		"Aruba" ) CountryCode="AW" ;;
		"Australia" ) CountryCode="AU" ;;
		"Austria" ) CountryCode="AT" ;;
		"Azerbaijan" ) CountryCode="AZ" ;;
		"Bahamas" ) CountryCode="BS" ;;
		"Bahrain" ) CountryCode="BH" ;;
		"Bangladesh" ) CountryCode="BD" ;;
		"Barbados" ) CountryCode="BB" ;;
		"Belarus" ) CountryCode="BY" ;;
		"Belgium" ) CountryCode="BE" ;;
		"Belize" ) CountryCode="BZ" ;;
		"Benin" ) CountryCode="BJ" ;;
		"Bermuda" ) CountryCode="BM" ;;
		"Bhutan" ) CountryCode="BT" ;;
		"Bolivia" ) CountryCode="BO" ;;
		"Bosnia and Herzegovina" ) CountryCode="BA" ;;
		"Botswana" ) CountryCode="BW" ;;
		"Brazil" ) CountryCode="BR" ;;
		"British Virgin Islands" ) CountryCode="VG" ;;
		"Brunei" ) CountryCode="BN" ;;
		"Bulgaria" ) CountryCode="BG" ;;
		"Burkina Faso" ) CountryCode="BF" ;;
		"Burundi" ) CountryCode="BI" ;;
		"Cambodia" ) CountryCode="KH" ;;
		"Cameroon" ) CountryCode="CM" ;;
		"Canada" ) CountryCode="CA" ;;
		"Cape Verde" ) CountryCode="CV" ;;
		"Cayman Islands" ) CountryCode="KY" ;;
		"Central African Republic" ) CountryCode="CF" ;;
		"Chad" ) CountryCode="TD" ;;
		"Chile" ) CountryCode="CL" ;;
		"China" ) CountryCode="CN" ;;
		"Christmas Island" ) CountryCode="CX" ;;
		"Cocos [Keeling] Islands" ) CountryCode="CC" ;;
		"Colombia" ) CountryCode="CO" ;;
		"Comoros" ) CountryCode="KM" ;;
		"Congo - Brazzaville" ) CountryCode="CG" ;;
		"Congo - Kinshasa" ) CountryCode="CD" ;;
		"Cook Islands" ) CountryCode="CK" ;;
		"Costa Rica" ) CountryCode="CR" ;;
		"Côte d’Ivoire" ) CountryCode="CI" ;;
		"Croatia" ) CountryCode="HR" ;;
		"Cuba" ) CountryCode="CU" ;;
		"Cyprus" ) CountryCode="CY" ;;
		"Czech Republic" ) CountryCode="CZ" ;;
		"Denmark" ) CountryCode="DK" ;;
		"Djibouti" ) CountryCode="DJ" ;;
		"Dominica" ) CountryCode="DM" ;;
		"Dominican Republic" ) CountryCode="DO" ;;
		"East Timor" ) CountryCode="TL" ;;
		"Ecuador" ) CountryCode="EC" ;;
		"Egypt" ) CountryCode="EG" ;;
		"El Salvador" ) CountryCode="SV" ;;
		"Equatorial Guinea" ) CountryCode="GQ" ;;
		"Eritrea" ) CountryCode="ER" ;;
		"Estonia" ) CountryCode="EE" ;;
		"Ethiopia" ) CountryCode="ET" ;;
		"Falkland Islands" ) CountryCode="FK" ;;
		"Faroe Islands" ) CountryCode="FO" ;;
		"Fiji" ) CountryCode="FJ" ;;
		"Finland" ) CountryCode="FI" ;;
		"France" ) CountryCode="FR" ;;
		"French Guiana" ) CountryCode="GF" ;;
		"French Polynesia" ) CountryCode="PF" ;;
		"French Southern Territories" ) CountryCode="TF" ;;
		"Gabon" ) CountryCode="GA" ;;
		"Gambia" ) CountryCode="GM" ;;
		"Georgia" ) CountryCode="GE" ;;
		"Germany" ) CountryCode="DE" ;;
		"Ghana" ) CountryCode="GH" ;;
		"Gibraltar" ) CountryCode="GI" ;;
		"Greece" ) CountryCode="GR" ;;
		"Greenland" ) CountryCode="GL" ;;
		"Grenada" ) CountryCode="GD" ;;
		"Guadeloupe" ) CountryCode="GP" ;;
		"Guam" ) CountryCode="GU" ;;
		"Guatemala" ) CountryCode="GT" ;;
		"Guernsey" ) CountryCode="GG" ;;
		"Guinea" ) CountryCode="GN" ;;
		"Guinea-Bissau" ) CountryCode="GW" ;;
		"Guyana" ) CountryCode="GY" ;;
		"Haiti" ) CountryCode="HT" ;;
		"Honduras" ) CountryCode="HN" ;;
		"Hong Kong SAR China" ) CountryCode="HK" ;;
		"Hungary" ) CountryCode="HU" ;;
		"Iceland" ) CountryCode="IS" ;;
		"India" ) CountryCode="IN" ;;
		"Indonesia" ) CountryCode="ID" ;;
		"Iran" ) CountryCode="IR" ;;
		"Iraq" ) CountryCode="IQ" ;;
		"Ireland" ) CountryCode="IE" ;;
		"Isle of Man" ) CountryCode="IM" ;;
		"Israel" ) CountryCode="IL" ;;
		"Italy" ) CountryCode="IT" ;;
		"Ivory Coast" ) CountryCode="CI" ;;
		"Jamaica" ) CountryCode="JM" ;;
		"Japan" ) CountryCode="JP" ;;
		"Jersey" ) CountryCode="JE" ;;
		"Jordan" ) CountryCode="JO" ;;
		"Kazakhstan" ) CountryCode="KZ" ;;
		"Kenya" ) CountryCode="KE" ;;
		"Kiribati" ) CountryCode="KI" ;;
		"Kuwait" ) CountryCode="KW" ;;
		"Kyrgyzstan" ) CountryCode="KG" ;;
		"Laos" ) CountryCode="LA" ;;
		"Latvia" ) CountryCode="LV" ;;
		"Lebanon" ) CountryCode="LB" ;;
		"Lesotho" ) CountryCode="LS" ;;
		"Liberia" ) CountryCode="LR" ;;
		"Libya" ) CountryCode="LY" ;;
		"Liechtenstein" ) CountryCode="LI" ;;
		"Lithuania" ) CountryCode="LT" ;;
		"Luxembourg" ) CountryCode="LU" ;;
		"Macau SAR China" ) CountryCode="MO" ;;
		"Macedonia" ) CountryCode="MK" ;;
		"Madagascar" ) CountryCode="MG" ;;
		"Malawi" ) CountryCode="MW" ;;
		"Malaysia" ) CountryCode="MY" ;;
		"Maldives" ) CountryCode="MV" ;;
		"Mali" ) CountryCode="ML" ;;
		"Malta" ) CountryCode="MT" ;;
		"Marshall Islands" ) CountryCode="MH" ;;
		"Martinique" ) CountryCode="MQ" ;;
		"Mauritania" ) CountryCode="MR" ;;
		"Mauritius" ) CountryCode="MU" ;;
		"Mayotte" ) CountryCode="YT" ;;
		"Mexico" ) CountryCode="MX" ;;
		"Micronesia" ) CountryCode="FM" ;;
		"Moldova" ) CountryCode="MD" ;;
		"Monaco" ) CountryCode="MC" ;;
		"Mongolia" ) CountryCode="MN" ;;
		"Montenegro" ) CountryCode="ME" ;;
		"Montserrat" ) CountryCode="MS" ;;
		"Morocco" ) CountryCode="MA" ;;
		"Mozambique" ) CountryCode="MZ" ;;
		"Myanmar" ) CountryCode="MM" ;;
		"Myanmar [Burma]" ) CountryCode="MM" ;;
		"Namibia" ) CountryCode="NA" ;;
		"Nauru" ) CountryCode="NR" ;;
		"Nepal" ) CountryCode="NP" ;;
		"Netherlands" ) CountryCode="NL" ;;
		"Netherlands Antilles" ) CountryCode="AN" ;;
		"New Caledonia" ) CountryCode="NC" ;;
		"New Zealand" ) CountryCode="NZ" ;;
		"Nicaragua" ) CountryCode="NI" ;;
		"Niger" ) CountryCode="NE" ;;
		"Nigeria" ) CountryCode="NG" ;;
		"Niue" ) CountryCode="NU" ;;
		"Norfolk Island" ) CountryCode="NF" ;;
		"North Korea" ) CountryCode="KP" ;;
		"Northern Mariana Islands" ) CountryCode="MP" ;;
		"Norway" ) CountryCode="NO" ;;
		"Oman" ) CountryCode="OM" ;;
		"Pakistan" ) CountryCode="PK" ;;
		"Palau" ) CountryCode="PW" ;;
		"Palestinian Territories" ) CountryCode="PS" ;;
		"Palestinian Territory" ) CountryCode="PS" ;;
		"Panama" ) CountryCode="PA" ;;
		"Papua New Guinea" ) CountryCode="PG" ;;
		"Paraguay" ) CountryCode="PY" ;;
		"Peru" ) CountryCode="PE" ;;
		"Philippines" ) CountryCode="PH" ;;
		"Pitcairn" ) CountryCode="PN" ;;
		"Pitcairn Islands" ) CountryCode="PN" ;;
		"Poland" ) CountryCode="PL" ;;
		"Portugal" ) CountryCode="PT" ;;
		"Puerto Rico" ) CountryCode="PR" ;;
		"Qatar" ) CountryCode="QA" ;;
		"Reunion" ) CountryCode="RE" ;;
		"Réunion" ) CountryCode="RE" ;;
		"Romania" ) CountryCode="RO" ;;
		"Russia" ) CountryCode="RU" ;;
		"Rwanda" ) CountryCode="RW" ;;
		"Saint Barthélemy" ) CountryCode="BL" ;;
		"Saint Helena" ) CountryCode="SH" ;;
		"Saint Kitts and Nevis" ) CountryCode="KN" ;;
		"Saint Lucia" ) CountryCode="LC" ;;
		"Saint Martin" ) CountryCode="MF" ;;
		"Saint Pierre and Miquelon" ) CountryCode="PM" ;;
		"Saint Vincent and the Grenadines" ) CountryCode="VC" ;;
		"Samoa" ) CountryCode="WS" ;;
		"San Marino" ) CountryCode="SM" ;;
		"Sao Tome and Principe" ) CountryCode="ST" ;;
		"São Tomé and Príncipe" ) CountryCode="ST" ;;
		"Saudi Arabia" ) CountryCode="SA" ;;
		"Senegal" ) CountryCode="SN" ;;
		"Serbia" ) CountryCode="RS" ;;
		"Seychelles" ) CountryCode="SC" ;;
		"Sierra Leone" ) CountryCode="SL" ;;
		"Singapore" ) CountryCode="SG" ;;
		"Slovakia" ) CountryCode="SK" ;;
		"Slovenia" ) CountryCode="SI" ;;
		"Solomon Islands" ) CountryCode="SB" ;;
		"Somalia" ) CountryCode="SO" ;;
		"South Africa" ) CountryCode="ZA" ;;
		"South Georgia and the South Sandwich Islands" ) CountryCode="GS" ;;
		"South Korea" ) CountryCode="KR" ;;
		"Spain" ) CountryCode="ES" ;;
		"Sri Lanka" ) CountryCode="LK" ;;
		"Sudan" ) CountryCode="SD" ;;
		"Suriname" ) CountryCode="SR" ;;
		"Svalbard and Jan Mayen" ) CountryCode="SJ" ;;
		"Swaziland" ) CountryCode="SZ" ;;
		"Sweden" ) CountryCode="SE" ;;
		"Switzerland" ) CountryCode="CH" ;;
		"Syria" ) CountryCode="SY" ;;
		"Taiwan" ) CountryCode="TW" ;;
		"Tajikistan" ) CountryCode="TJ" ;;
		"Tanzania" ) CountryCode="TZ" ;;
		"Thailand" ) CountryCode="TH" ;;
		"Timor-Leste" ) CountryCode="TL" ;;
		"Togo" ) CountryCode="TG" ;;
		"Tonga" ) CountryCode="TO" ;;
		"Trinidad and Tobago" ) CountryCode="TT" ;;
		"Tunisia" ) CountryCode="TN" ;;
		"Turkey" ) CountryCode="TR" ;;
		"Turkmenistan" ) CountryCode="TM" ;;
		"Turks and Caicos Islands" ) CountryCode="TC" ;;
		"Tuvalu" ) CountryCode="TV" ;;
		"U.S. Virgin Islands" ) CountryCode="VI" ;;
		"Uganda" ) CountryCode="UG" ;;
		"Ukraine" ) CountryCode="UA" ;;
		"United Arab Emirates" ) CountryCode="AE" ;;
		"United Kingdom" ) CountryCode="GB" ;;
		"United States" ) CountryCode="US" ;;
		"Uruguay" ) CountryCode="UY" ;;
		"Uzbekistan" ) CountryCode="UZ" ;;
		"Vanuatu" ) CountryCode="VU" ;;
		"Vatican" ) CountryCode="VA" ;;
		"Vatican City" ) CountryCode="VA" ;;
		"Venezuela" ) CountryCode="VE" ;;
		"Vietnam" ) CountryCode="VN" ;;
		"Wallis and Futuna" ) CountryCode="WF" ;;
		"Western Sahara" ) CountryCode="EH" ;;
		"Yemen" ) CountryCode="YE" ;;
		"Zambia" ) CountryCode="ZM" ;;
		"Zimbabwe" ) CountryCode="ZW" ;;
	esac
}

function get_TimeZone {
	set_GeoKitFramework
	prefTimezoneAuto=`/usr/libexec/PlistBuddy -c "Print ':TimezoneAuto'" ~/Library/Preferences/au.com.mondada.SIC.plist 2>/dev/null`
	if [ ${?} -ne 0 ] ; then prefTimezoneAuto=`/usr/libexec/PlistBuddy -c "Print ':Active'" "/Library/Preferences/com.apple.timezone.auto.plist" 2>/dev/null` ; fi
	if [ ${?} -ne 0 ] ; then prefTimezoneAuto="" ; fi
	if [ -n "${prefTimezoneAuto}" ] ; then TimezoneAuto="${prefTimezoneAuto}" ; fi
	prefGeonameID=`defaults read ~/Library/Preferences/au.com.mondada.SIC "GeonameID" 2>/dev/null`
	if [ -z "${prefGeonameID}" ] ; then prefGeonameID=`/usr/libexec/PlistBuddy -c "Print ':com.apple.preferences.timezone.selected_city:GeonameID'" "/Library/Preferences/.GlobalPreferences.plist"` ; fi
	if [ -n "${prefGeonameID}" ] ; then GeonameID=${prefGeonameID} ; fi
	echo "GeonameID:		${GeonameID}"
	QUERY="select ZCOUNTRY from ${PLACES} where ZGEONAMEID = ${GeonameID};"
	ZCOUNTRY=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZCOUNTRY = " | awk -F "ZCOUNTRY = " '{print $NF}'`
	set_CountryCode ${ZCOUNTRY}
	set_TimeZone ${GeonameID}
	set_ClosestCity ${GeonameID}
}

function save_TimeZone {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "TimezoneAuto" -bool "${TimezoneAuto}"
	defaults write ~/Library/Preferences/au.com.mondada.SIC "GeonameID" -int ${GeonameID}
}

function display_TimeZone {
	echo "Time Zone:		${TimeZone}"
	echo "Closest City:		${ClosestCity}"
	printf "			["
	if [ "${TimezoneAuto}" == "true" ] ; then printf "*" ; else printf " " ; fi
	echo "] Set time zone automatically using current location"
}

function select_TimeZone {
	set_GeoKitFramework
	set_TimeZoneList ${GeonameID}
	display_Title "Select Time Zone"
	display_TimeZone
	display_Options "Time zones" "Select your Time Zone: "
	select newTimeZone in "${TimeZoneList[@]}" ; do
		while [ "${newTimeZone}" == "Show All" ] ; do
			TimeZoneList=( "Niue Time" "Samoa Standard Time" "Cook Islands Time" "Hawaii-Aleutian Standard Time" "Tahiti Time" "Alaska Standard Time" "Pacific Standard Time" "Pitcairn Time" "Mountain Standard Time" "Central Standard Time" "Venezuela Time" "Columbia Time" "Cuba Standard Time" "Eastern Standard Time" "Ecuador Time" "Peru Time" "Newfoundland Standard Time" "Amazon Time" "Atlantic Standard Time" "Bolivia Time" "Chile Time" "Falkland Islands Time" "Guyana Time" "Paraguay Time" "Argentina Time" "Brasilia Time" "French Guiana Time" "Pierre an Miquelon Standard Time" "Suriname Time" "Uruguay Time" "West Greenland Time" "Fernando de Noronha Time" "South Georgia Time" "Azores Time" "Cape Verde Time" "Greenwich Mean Time" "Western European Time" "Central European Time" "West Africa Time" "Central Africa Time" "Eastern European Time" "Israel Standard Time" "South Africa Standard Time" "Arabian Standard Time" "East Africa Time" "Moscow Standard Time" "Volgograd Time" "Iran Standard Time" "Armenia Time" "Azerbaijan Time" "Georgia Time" "Gulf Standard Time" "Mauritius Time" "Reunion Time" "Samara Time" "Seychelles Time" "Afghanistan Time" "Maldives Time" "Pakistan Time" "Tajikistan Time" "Turkmenistan Time" "Uzbekistan Time" "West Kazakhstan Standard Time" "Yekaterinburg Time" "India Standard Time" "Bangladesh Time" "Bhutan Time" "East Kazakhstan Standard Time" "Kyrgystan Time" "Omsk Time" "Myanmar Time" "Christmas Island Time" "Indochina Time" "Krasnoyarsk Time" "Western Indonesia Time" "Australian Western Standard Time" "Brunei Darussalam Time" "Central Indonesia Time" "China Standard Time" "GMT+08:00" "Hong Kong Time" "Irkutsk Time" "Malaysia Time" "Philippine Time" "Singapore Standard Time" "Ulan Bator Time" "East Timor Time" "Eastern Indonesia Time" "Japan Standard Time" "Korean Standard Time" "Palau Time" "Yakutsk Time" "Australian Central Standard Time" "Australia Eastern Standard Time" "Chamorro Standard Time" "Papua New Guinea Time" "Sakhalin Time" "Vladivostok Time" "Magadan Time" "New Caledonia Time" "Ponape Time" "Solomon Islands Time" "Vanuatu Time" "Norfolk Islands Time" "Anadyr Time" "Fiji Time" "Gilbert Islands Time" "Marshall Islands Time" "New Zealand Standard Time" "Petropavlovsk-Kamchatsky Time" "Tuvalu Time" "Tonga Time" )
			display_Title "Select Time Zone"
			display_TimeZone
			display_Options "Time zones" "Select your Time Zone: "
			select newTimeZone in "${TimeZoneList[@]}" ; do
				if [ -n "${newTimeZone}" ] ; then break ; fi
			done
		done
		if [ -n "${newTimeZone}" ] ; then break ; fi
	done
	if [ "${newTimeZone}" != "${TimeZone}" ] ; then
		TimeZone="${newTimeZone}"
		ClosestCity=""
	fi
	set_TimeZoneNames "${TimeZone}"
	i=0
	for ZTIMEZONENAME in "${TimeZoneNames[@]}" ; do
		QUERY="select distinct ZCOUNTRY from ${PLACES} where ZTIMEZONENAME = \"${ZTIMEZONENAME}\";"
		RESULTS=( `sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZCOUNTRY = " | awk -F "ZCOUNTRY = " '{print $NF}'` )
		for ZCOUNTRY in ${RESULTS} ; do
			if [ ${i} -eq 0 ] ; then
				ZCOUNTRIES=( ${ZCOUNTRY} )
			else
				AddELEMENT=1
				for ELEMENT in ${ZCOUNTRIES[@]} ; do
					if [ ${ZCOUNTRY} -eq ${ELEMENT} ] ; then AddELEMENT=0 ; break ; fi
				done
				if [ ${AddELEMENT} -eq 1 ] ; then ZCOUNTRIES=( ${ZCOUNTRIES[@]} ${ZCOUNTRY} ) ; fi
			fi
		done
		let i++
	done
	if [ ${#ZCOUNTRIES[@]} -gt 1 ] ; then
		unset ZCOUNTRYNAMES[@]
		i=0
		for ZCOUNTRY in ${ZCOUNTRIES[@]} ; do
			QUERY="select ZNAME from ZGEOPLACENAME where ZEN > 0 and ZPLACE = ${ZCOUNTRY};"
			ZCOUNTRYNAMES[i]=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZNAME = " | awk -F "ZNAME = " '{print $NF}'`
			let i++
		done
		display_Title "Select Time Zone"
		display_TimeZone
		display_Options "Countries" "Select the country or region: "
		select ZCOUNTRYNAME in "${ZCOUNTRYNAMES[@]}" ; do
			if [ -n "${ZCOUNTRYNAME}" ] ; then break ; fi
		done
		i=0
		for NAME in "${ZCOUNTRYNAMES[@]}" ; do
			if [ "${NAME}" == "${ZCOUNTRYNAME}" ] ; then ZCOUNTRY=${ZCOUNTRIES[i]} ; break ; fi
			let i++
		done
	else
		ZCOUNTRY=${ZCOUNTRIES[0]}
	fi
	unset ZTIMEZONENAMES[@]
	for TimeZoneName in "${TimeZoneNames[@]}" ; do
		QUERY="select distinct ZTIMEZONENAME from ${PLACES} where ZCOUNTRY = ${ZCOUNTRY} and ZTIMEZONENAME = \"${TimeZoneName}\";"
		ZTIMEZONENAME=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZTIMEZONENAME = " | awk -F "ZTIMEZONENAME = " '{print $NF}'`
		if [ -n "${ZTIMEZONENAME}" ] ; then ZTIMEZONENAMES=( "${ZTIMEZONENAMES[@]}" "${ZTIMEZONENAME}" ) ; fi
	done
	QUERY="select ZGEONAMEID from ${PLACES} where ZCOUNTRY = ${ZCOUNTRY} and ZTIMEZONENAME = \"${ZTIMEZONENAMES[0]}\";"
	ZGEONAMEIDS=( `sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZGEONAMEID = " | awk -F "ZGEONAMEID = " '{print $NF}'` )
	if [ ${#ZGEONAMEIDS[@]} -gt 1 ] ; then
		unset ZNAMEREGIONALCODES[@]
		i=0
		for ZGEONAMEID in ${ZGEONAMEIDS[@]} ; do
			QUERY="select ZNAME from ${PLACES} where ZGEONAMEID = ${ZGEONAMEID};"
			ZNAME=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZNAME = " | awk -F "ZNAME = " '{print $NF}'`
			QUERY="select ZREGIONALCODE from ${PLACES} where ZGEONAMEID = ${ZGEONAMEID};"
			ZREGIONALCODE=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZREGIONALCODE = " | awk -F "ZREGIONALCODE = " '{print $NF}'`
			if [ -n "${ZREGIONALCODE}" ] ; then
				ZNAMEREGIONALCODES[i]="${ZNAME}, ${ZREGIONALCODE}"
			else
				ZNAMEREGIONALCODES[i]="${ZNAME}"
			fi
			let i++
		done
		if [ ${#ZTIMEZONENAMES[@]} -gt 1 ] ; then ZNAMEREGIONALCODES=( "${ZNAMEREGIONALCODES[@]}" "Show All" ) ; fi
		display_Title "Select Time Zone"
		display_TimeZone
		display_Options "Cities" "Select the closest city: "
		select ZNAMEREGIONALCODE in "${ZNAMEREGIONALCODES[@]}" ; do
			while [ "${ZNAMEREGIONALCODE}" == "Show All" ] ; do
				i=1
				while [ ${i} -lt ${#ZTIMEZONENAMES[@]} ] ; do
					QUERY="select ZGEONAMEID from ${PLACES} where ZCOUNTRY = ${ZCOUNTRY} and ZTIMEZONENAME = \"${ZTIMEZONENAMES[i]}\";"
					ZGEONAMEIDS=( ${ZGEONAMEIDS[@]} `sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZGEONAMEID = " | awk -F "ZGEONAMEID = " '{print $NF}'` )
					let i++
				done
				i=0
				for ZGEONAMEID in ${ZGEONAMEIDS[@]} ; do
					QUERY="select ZNAME from ${PLACES} where ZGEONAMEID = ${ZGEONAMEID};"
					ZNAME=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZNAME = " | awk -F "ZNAME = " '{print $NF}'`
					QUERY="select ZREGIONALCODE from ${PLACES} where ZGEONAMEID = ${ZGEONAMEID};"
					ZREGIONALCODE=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZREGIONALCODE = " | awk -F "ZREGIONALCODE = " '{print $NF}'`
					if [ -n "${ZREGIONALCODE}" ] ; then
						ZNAMEREGIONALCODES[i]="${ZNAME}, ${ZREGIONALCODE}"
					else
						ZNAMEREGIONALCODES[i]="${ZNAME}"
					fi
					let i++
				done
				display_Title "Select Time Zone"
				display_TimeZone
				display_Options "Cities" "Select the closest city: "
				select ZNAMEREGIONALCODE in "${ZNAMEREGIONALCODES[@]}" ; do
					if [ -n "${ZNAMEREGIONALCODE}" ] ; then break ; fi
				done
			done
			if [ -n "${ZNAMEREGIONALCODE}" ] ; then break ; fi
		done
		i=0
		for ELEMENT in "${ZNAMEREGIONALCODES[@]}" ; do
			if [ "${ELEMENT}" == "${ZNAMEREGIONALCODE}" ] ; then GeonameID=${ZGEONAMEIDS[i]} ; break ; fi
			let i++
		done
	else
		GeonameID=${ZGEONAMEIDS[0]}
	fi
	set_ClosestCity ${GeonameID}
	set_CountryCode ${ZCOUNTRY}
	display_Title "Select Time Zone"
	display_TimeZone
	echo
	while [ -z "${setAutomatically}" ] ; do
		read -sn 1 -p "Set time zone automatically using current location (Y/n)? " setAutomatically < /dev/tty
		if [ -z "${setAutomatically}" ] ; then setAutomatically="y" ; fi
		case "${setAutomatically}" in
			"Y" | "y" ) echo ; TimezoneAuto="true" ;;
			"N" | "n" ) echo ; TimezoneAuto="false" ;;
			* ) echo ; setAutomatically="" ;;
		esac
	done
	setAutomatically=""
}

function get_sshdDisabled {
	prefsshdDisabled=`/usr/libexec/PlistBuddy -c "Print ':sshdDisabled'" ~/Library/Preferences/au.com.mondada.SIC.plist 2>/dev/null`
	if [ ${?} -ne 0 ] ; then prefsshdDisabled=`/usr/libexec/PlistBuddy -c "Print ':com.openssh.sshd:Disabled'" "/var/db/launchd.db/com.apple.launchd/overrides.plist" 2>/dev/null` ; fi
	if [ ${?} -ne 0 ] ; then prefsshdDisabled="" ; fi
	if [ -n "${prefsshdDisabled}" ] ; then sshdDisabled="${prefsshdDisabled}" ; fi
	echo "sshdDisabled:		${sshdDisabled}"
}

function save_sshdDisabled {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "sshdDisabled" -bool "${sshdDisabled}"
}

function display_sshdDisabled {
	printf "Remote Login:		["
	if [ "${sshdDisabled}" == "false" ] ; then printf "*" ; else printf " " ; fi
	echo "] Enable users to log in remotely using SSH"
}

function select_sshdDisabled {
	display_Title "Remote Login"
	display_sshdDisabled
	echo
	while [ -z "${enableSSH}" ] ; do
		read -sn 1 -p "Enable users to log in remotely using SSH (y/N)? " enableSSH < /dev/tty
		if [ -z "${enableSSH}" ] ; then enableSSH="n" ; fi
		case "${enableSSH}" in
			"Y" | "y" ) echo ; sshdDisabled="false" ;;
			"N" | "n" ) echo ; sshdDisabled="true" ;;
			* ) echo ; enableSSH="" ;;
		esac
	done
	enableSSH=""
}

function get_RemoteManagement {
	prefRemoteManagement=`/usr/libexec/PlistBuddy -c "Print ':RemoteManagement'" ~/Library/Preferences/au.com.mondada.SIC.plist 2>/dev/null`
	if [ ${?} -ne 0 ] ; then
		if [ -e "/etc/RemoteManagement.launchd" ] ; then
			prefRemoteManagement="true"
		else
			prefRemoteManagement="false"
		fi
	fi
	if [ -n "${prefRemoteManagement}" ] ; then RemoteManagement="${prefRemoteManagement}" ; fi
	echo "RemoteManagement:	${RemoteManagement}"
}

function save_RemoteManagement {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "RemoteManagement" -bool "${RemoteManagement}"
}

function display_RemoteManagement {
	printf "Remote Management:	["
	if [ "${RemoteManagement}" == "true" ] ; then printf "*" ; else printf " " ; fi
	echo "] Enable users to manage this computer remotely"
}

function select_RemoteManagement {
	display_Title "Remote Management"
	display_RemoteManagement
	echo
	while [ -z "${enableARD}" ] ; do
		read -sn 1 -p "Enable users to manage this computer remotely (y/N)? " enableARD < /dev/tty
		if [ -z "${enableARD}" ] ; then enableARD="n" ; fi
		case "${enableARD}" in
			"Y" | "y" ) echo ; RemoteManagement="true" ;;
			"N" | "n" ) echo ; RemoteManagement="false" ;;
			* ) echo ; enableARD="" ;;
		esac
	done
	enableARD=""
}

function get_ComputerName {
	prefComputerName=`defaults read ~/Library/Preferences/au.com.mondada.SIC "ComputerName" 2>/dev/null`
	if [ -n "${prefComputerName}" ] ; then ComputerName="${prefComputerName}" ; fi
	echo "ComputerName:		${ComputerName}"
}

function save_ComputerName {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "ComputerName" -string "${ComputerName}"
}

function display_ComputerName {
	echo "Computer Name:		Use ${ComputerName}"
}

function select_ComputerName {
	ComputerNames=( "Model and MAC Address" "Serial Number" )
	display_Title "Computer Name"
	display_ComputerName
	display_Options "Naming conventions" "Select the naming convention you wish to use: "
	select newComputerName in "${ComputerNames[@]}" ; do
		if [ -n "${newComputerName}" ] ; then break ; fi
	done
	ComputerName="${newComputerName}" ; newComputerName=""
}

function apply_AppleSetupDone {
	echo "Creating \033[1m.AppleSetupDone\033[m..."
	/usr/libexec/PlistBuddy -c "Add ':Address:CountryName' string '${CountryName}'" "/Volumes/${targDisk}/var/db/.AppleSetupDone" &>/dev/null
	chmod 600 "/Volumes/${targDisk}/var/db/.AppleSetupDone"
	chown 0:0 "/Volumes/${targDisk}/var/db/.AppleSetupDone"
}

function apply_CDIScustom {
	echo "Creating \033[1mCDIS.custom\033[m..."
	echo "LANGUAGE=${AppleLanguage}" > "/Volumes/${targDisk}/var/log/CDIS.custom"
	chmod 644 "/Volumes/${targDisk}/var/log/CDIS.custom"
	chown 0:0 "/Volumes/${targDisk}/var/log/CDIS.custom"
}

function apply_GlobalPreferences {
	set_GeoKitFramework
	echo "Creating \033[1m.GlobalPreferences.plist\033[m..."
	defaults write "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences" "AppleLanguages" -array "${AppleLanguage}"
	/usr/libexec/PlistBuddy -c "Add ':AppleLocale' string '${AppleLocale}'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	/usr/libexec/PlistBuddy -c "Add ':com.apple.AppleModemSettingTool.LastCountryCode' string '${CountryCode}'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	/usr/libexec/PlistBuddy -c "Add ':com.apple.preferences.timezone.selected_city:CountryCode' string '${CountryCode}'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	/usr/libexec/PlistBuddy -c "Add ':com.apple.preferences.timezone.selected_city:GeonameID' integer ${GeonameID}" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	QUERY="select ZLATITUDE from ${PLACES} where ZGEONAMEID = ${GeonameID};"
	Latitude=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZLATITUDE = " | awk -F "ZLATITUDE = " '{print $NF}'`
	/usr/libexec/PlistBuddy -c "Add ':com.apple.preferences.timezone.selected_city:Latitude' real ${Latitude}" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	QUERY="select ZNAME from ${PLACES} where ZGEONAMEID = ${GeonameID};"
	Name=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZNAME = " | awk -F "ZNAME = " '{print $NF}'`
	/usr/libexec/PlistBuddy -c "Add ':com.apple.preferences.timezone.selected_city:LocalizedNames:en' string ${Name}" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	QUERY="select ZLONGITUDE from ${PLACES} where ZGEONAMEID = ${GeonameID};"
	Longitude=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZLONGITUDE = " | awk -F "ZLONGITUDE = " '{print $NF}'`
	/usr/libexec/PlistBuddy -c "Add ':com.apple.preferences.timezone.selected_city:Longitude' real ${Longitude}" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	/usr/libexec/PlistBuddy -c "Add ':com.apple.preferences.timezone.selected_city:Name' string '${Name}'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	QUERY="select ZPOPULATION from ${PLACES} where ZGEONAMEID = ${GeonameID};"
	Population=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZPOPULATION = " | awk -F "ZPOPULATION = " '{print $NF}'`
	/usr/libexec/PlistBuddy -c "Add ':com.apple.preferences.timezone.selected_city:Population' integer ${Population}" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	QUERY="select ZREGIONALCODE from ${PLACES} where ZGEONAMEID = ${GeonameID};"
	RegionalCode=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZREGIONALCODE = " | awk -F "ZREGIONALCODE = " '{print $NF}'`
	if [ -n "${RegionalCode}" ] ; then
		/usr/libexec/PlistBuddy -c "Add ':com.apple.preferences.timezone.selected_city:RegionalCode' string '${RegionalCode}'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	fi
	QUERY="select ZTIMEZONENAME from ${PLACES} where ZGEONAMEID = ${GeonameID};"
	TimeZoneName=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZTIMEZONENAME = " | awk -F "ZTIMEZONENAME = " '{print $NF}'`
	/usr/libexec/PlistBuddy -c "Add ':com.apple.preferences.timezone.selected_city:TimeZoneName' string '${TimeZoneName}'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	Version=1
	/usr/libexec/PlistBuddy -c "Add ':com.apple.preferences.timezone.selected_city:Version' integer ${Version}" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	/usr/libexec/PlistBuddy -c "Add ':com.apple.TimeZonePref.Last_Selected_City' array" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	/usr/libexec/PlistBuddy -c "Add ':com.apple.TimeZonePref.Last_Selected_City:0' string '${Latitude}'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	/usr/libexec/PlistBuddy -c "Add ':com.apple.TimeZonePref.Last_Selected_City:1' string '${Longitude}'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	/usr/libexec/PlistBuddy -c "Add ':com.apple.TimeZonePref.Last_Selected_City:2' string '0'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	/usr/libexec/PlistBuddy -c "Add ':com.apple.TimeZonePref.Last_Selected_City:3' string '${TimeZoneName}'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	/usr/libexec/PlistBuddy -c "Add ':com.apple.TimeZonePref.Last_Selected_City:4' string '${Country}'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	/usr/libexec/PlistBuddy -c "Add ':com.apple.TimeZonePref.Last_Selected_City:5' string '${Name}'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	QUERY="select ZCOUNTRY from ${PLACES} where ZGEONAMEID = ${GeonameID};"
	ZCOUNTRY=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZCOUNTRY = " | awk -F "ZCOUNTRY = " '{print $NF}'`
	QUERY="select distinct ZNAME from ZGEOPLACENAME where ZEN > 0 and ZPLACE = ${ZCOUNTRY};"
	ZNAME=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZNAME = " | awk -F "ZNAME = " '{print $NF}'`
	/usr/libexec/PlistBuddy -c "Add ':com.apple.TimeZonePref.Last_Selected_City:6' string '${ZNAME}'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	/usr/libexec/PlistBuddy -c "Add ':com.apple.TimeZonePref.Last_Selected_City:7' string '${Name}'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	/usr/libexec/PlistBuddy -c "Add ':com.apple.TimeZonePref.Last_Selected_City:8' string '${ZNAME}'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	/usr/libexec/PlistBuddy -c "Add ':com.apple.TimeZonePref.Last_Selected_City:9' string 'DEPRECATED IN 10.6'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	/usr/libexec/PlistBuddy -c "Add ':Country' string '${Country}'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	chmod 0644 "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
	chown 0:80 "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"
}

function apply_TimezoneAuto {
	echo "Creating \033[1mcom.apple.timezone.auto.plist\033[m..."
	defaults write "/Volumes/${targDisk}/Library/Preferences/com.apple.timezone.auto" "Active" -bool "${TimezoneAuto}"
	chmod 0644 "/Volumes/${targDisk}/Library/Preferences/com.apple.timezone.auto.plist"
	chown 0:80 "/Volumes/${targDisk}/Library/Preferences/com.apple.timezone.auto.plist"
}

function apply_HIToolbox {
	echo "Creating \033[1mcom.apple.HIToolbox.plist\033[m..."
	/usr/libexec/PlistBuddy -c "Add ':AppleCurrentKeyboardLayoutInputSourceID' string '${AppleCurrentKeyboardLayoutInputSourceID}'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist" &>/dev/null
	if [ -z ${AppleDefaultAsciiInputSource} ] ; then
		/usr/libexec/PlistBuddy -c "Add ':AppleDefaultAsciiInputSource:InputSourceKind' string 'Keyboard Layout'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
		/usr/libexec/PlistBuddy -c "Add ':AppleDefaultAsciiInputSource:KeyboardLayout ID' integer 0" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
		/usr/libexec/PlistBuddy -c "Add ':AppleDefaultAsciiInputSource:KeyboardLayout Name' string 'U.S.'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
	else
		/usr/libexec/PlistBuddy -c "Add ':AppleDefaultAsciiInputSource:InputSourceKind' string '${InputSourceKinds[$AppleDefaultAsciiInputSource]}'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
		/usr/libexec/PlistBuddy -c "Add ':AppleDefaultAsciiInputSource:KeyboardLayout ID' integer ${KeyboardLayoutIDs[$AppleDefaultAsciiInputSource]}" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
		/usr/libexec/PlistBuddy -c "Add ':AppleDefaultAsciiInputSource:KeyboardLayout Name' string '${KeyboardLayoutNames[$AppleDefaultAsciiInputSource]}'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
	fi
	/usr/libexec/PlistBuddy -c "Add ':AppleEnabledInputSources' array" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
	i=0
	for String in "${InputSourceKinds[@]}" ; do
		if [ -n "${InputSourceKinds[i]}" ] ; then
			/usr/libexec/PlistBuddy -c "Add ':AppleEnabledInputSources:${i}:InputSourceKind' string '${InputSourceKinds[i]}'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
		fi
		if [ -n "${BundleIDs[i]}" ] ; then
			/usr/libexec/PlistBuddy -c "Add ':AppleEnabledInputSources:${i}:BundleID' string '${BundleIDs[i]}'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
		fi
		if [ -n "${InputModes[i]}" ] ; then
			/usr/libexec/PlistBuddy -c "Add ':AppleEnabledInputSources:${i}:InputMode' string '${InputModes[i]}'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
		fi
		if [ -n "${KeyboardLayoutIDs[i]}" ] ; then
			/usr/libexec/PlistBuddy -c "Add ':AppleEnabledInputSources:${i}:KeyboardLayout ID' integer ${KeyboardLayoutIDs[i]}" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
		fi
		if [ -n "${KeyboardLayoutNames[i]}" ] ; then
			/usr/libexec/PlistBuddy -c "Add ':AppleEnabledInputSources:${i}:KeyboardLayout Name' string '${KeyboardLayoutNames[i]}'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
		fi
		let i++
	done
	/usr/libexec/PlistBuddy -c "Add ':AppleSelectedInputSources' array" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
	if [ -n "${InputSourceKinds[$AppleSelectedInputSources]}" ] ; then
		/usr/libexec/PlistBuddy -c "Add ':AppleSelectedInputSources:0:InputSourceKind' string '${InputSourceKinds[$AppleSelectedInputSources]}'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
	fi
	if [ -n "${BundleIDs[$AppleSelectedInputSources]}" ] ; then
		/usr/libexec/PlistBuddy -c "Add ':AppleSelectedInputSources:0:BundleID' string '${BundleIDs[$AppleSelectedInputSources]}'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
	fi
	if [ -n "${InputModes[$AppleSelectedInputSources]}" ] ; then
		/usr/libexec/PlistBuddy -c "Add ':AppleSelectedInputSources:0:InputMode' string '${InputModes[$AppleSelectedInputSources]}'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
	fi
	if [ -n "${KeyboardLayoutIDs[$AppleSelectedInputSources]}" ] ; then
		/usr/libexec/PlistBuddy -c "Add ':AppleSelectedInputSources:0:KeyboardLayout ID' integer ${KeyboardLayoutIDs[$AppleSelectedInputSources]}" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
	fi
	if [ -n "${KeyboardLayoutNames[$AppleSelectedInputSources]}" ] ; then
		/usr/libexec/PlistBuddy -c "Add ':AppleSelectedInputSources:0:KeyboardLayout Name' string '${KeyboardLayoutNames[$AppleSelectedInputSources]}'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
	fi
	/usr/libexec/PlistBuddy -c "Add ':AppleInputSourceHistory' array" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
	if [ -n "${InputSourceKinds[$AppleSelectedInputSources]}" ] ; then
		/usr/libexec/PlistBuddy -c "Add ':AppleInputSourceHistory:0:InputSourceKind' string '${InputSourceKinds[$AppleSelectedInputSources]}'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
	fi
	if [ -n "${BundleIDs[$AppleSelectedInputSources]}" ] ; then
		/usr/libexec/PlistBuddy -c "Add ':AppleInputSourceHistory:0:BundleID' string '${BundleIDs[$AppleSelectedInputSources]}'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
	fi
	if [ -n "${InputModes[$AppleSelectedInputSources]}" ] ; then
		/usr/libexec/PlistBuddy -c "Add ':AppleInputSourceHistory:0:InputMode' string '${InputModes[$AppleSelectedInputSources]}'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
	fi
	if [ -n "${KeyboardLayoutIDs[$AppleSelectedInputSources]}" ] ; then
		/usr/libexec/PlistBuddy -c "Add ':AppleInputSourceHistory:0:KeyboardLayout ID' integer ${KeyboardLayoutIDs[$AppleSelectedInputSources]}" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
	fi
	if [ -n "${KeyboardLayoutNames[$AppleSelectedInputSources]}" ] ; then
		/usr/libexec/PlistBuddy -c "Add ':AppleInputSourceHistory:0:KeyboardLayout Name' string '${KeyboardLayoutNames[$AppleSelectedInputSources]}'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
	fi
	chmod 0644 "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
	chown 0:80 "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist"
}

function apply_SetupRegComplete {
	echo "Creating \033[1m.SetupRegComplete\033[m"
	touch "/Volumes/${targDisk}/Library/Receipts/.SetupRegComplete"
	chmod 0644 "/Volumes/${targDisk}/Library/Receipts/.SetupRegComplete"
}

function apply_Localtime {
	set_GeoKitFramework
	echo "Updating \033[1mlocaltime\033[m..."
	QUERY="select ZTIMEZONENAME from ${PLACES} where ZGEONAMEID = ${GeonameID};"
	TimeZoneName=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZTIMEZONENAME = " | awk -F "ZTIMEZONENAME = " '{print $NF}'`
	ln -fs "/usr/share/zoneinfo/${TimeZoneName}" "/Volumes/${targDisk}/etc/localtime"
}

function apply_NTPconf {
	echo "Updating \033[1mntp.conf\033[m..."
	echo "server ${NTPServer}" > "/Volumes/${targDisk}/etc/ntp.conf"
}

function apply_FirstBoot {
	echo "Creating \033[1mFirst Boot\033[m LaunchDaemon..."
	mkdir -p "/Volumes/${targDisk}/${FirstBootPath}/Actions"
	# mkdir -p "/Volumes/${targDisk}/${FirstBootPath}/Packages"
	printf \#\!"/bin/sh\n" > "/Volumes/${targDisk}/${FirstBootPath}/FirstBoot.sh"
	echo "ScriptPath=\`dirname \"\${0}\"\`" >> "/Volumes/${targDisk}/${FirstBootPath}/FirstBoot.sh"
	echo "Actions=( \`ls \"\${ScriptPath}/Actions\" | sed -e \"s/ /%20/g\"\` )" >> "/Volumes/${targDisk}/${FirstBootPath}/FirstBoot.sh"
	echo "for Action in \"\${Actions[@]}\" ; do" >> "/Volumes/${targDisk}/${FirstBootPath}/FirstBoot.sh"
	echo "	Action=\"\${Action//%20/ }\"" >> "/Volumes/${targDisk}/${FirstBootPath}/FirstBoot.sh"
	echo "	\"\${ScriptPath}/Actions/\${Action}\"" >> "/Volumes/${targDisk}/${FirstBootPath}/FirstBoot.sh"
	echo "done" >> "/Volumes/${targDisk}/${FirstBootPath}/FirstBoot.sh"
	# echo "Packages=( \`ls \"\${ScriptPath}/Packages\" | sed -e \"s/ /%20/g\"\` )" >> "/Volumes/${targDisk}/${FirstBootPath}/FirstBoot.sh"
	# echo "for Package in \"\${Packages[@]}\" ; do" >> "/Volumes/${targDisk}/${FirstBootPath}/FirstBoot.sh"
	# echo "	Package=\"\${Packages//%20/ }\"" >> "/Volumes/${targDisk}/${FirstBootPath}/FirstBoot.sh"
	# echo "	installer -pkg \"\${ScriptPath}/Packages/\${Package}\" -target \"/\"" >> "/Volumes/${targDisk}/${FirstBootPath}/FirstBoot.sh"
	# echo "done" >> "/Volumes/${targDisk}/${FirstBootPath}/FirstBoot.sh"
	echo "srm \"/Library/LaunchDaemons/FirstBoot.plist\"" >> "/Volumes/${targDisk}/${FirstBootPath}/FirstBoot.sh"
	echo "rm -rf \"\${ScriptPath}\"" >> "/Volumes/${targDisk}/${FirstBootPath}/FirstBoot.sh"
	echo "exit 0" >> "/Volumes/${targDisk}/${FirstBootPath}/FirstBoot.sh"
	chown 0:0 "/Volumes/${targDisk}/${FirstBootPath}/FirstBoot.sh"
	chmod 755 "/Volumes/${targDisk}/${FirstBootPath}/FirstBoot.sh"
	defaults write "/Volumes/${targDisk}/Library/LaunchDaemons/FirstBoot" "Label" -string "FirstBoot"
	defaults write "/Volumes/${targDisk}/Library/LaunchDaemons/FirstBoot" "ProgramArguments" -array "${FirstBootPath}/FirstBoot.sh"
	defaults write "/Volumes/${targDisk}/Library/LaunchDaemons/FirstBoot" "RunAtLoad" -bool true
	chown 0:0 "/Volumes/${targDisk}/Library/LaunchDaemons/FirstBoot.plist"
	chmod 755 "/Volumes/${targDisk}/Library/LaunchDaemons/FirstBoot.plist"
}

function apply_RemoteManagement {
	if [ "${RemoteManagement}" == "true" ] ; then
		echo "Creating \033[1mRemoteManagement.launchd\033[m..."
		printf "enabled" > "/Volumes/${targDisk}/etc/RemoteManagement.launchd"
		echo "Creating \033[1mcom.apple.RemoteManagement.plist\033[m..."
		defaults write "/Volumes/${targDisk}/Library/Preferences/com.apple.RemoteManagement" "ARD_AllLocalUsers" -bool true
		defaults write "/Volumes/${targDisk}/Library/Preferences/com.apple.RemoteManagement" "ARD_AllLocalUsersPrivs" -int 1073742079
		chmod 0644 "/Volumes/${targDisk}/Library/Preferences/com.apple.RemoteManagement.plist"
		printf \#\!"/bin/sh\n" > "/Volumes/${targDisk}/${FirstBootPath}/Actions/RemoteManagement.sh"
		echo "/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -on -restart -agent -privs -all" >> "/Volumes/${targDisk}/${FirstBootPath}/Actions/RemoteManagement.sh"
		echo "exit 0" >> "/Volumes/${targDisk}/${FirstBootPath}/Actions/RemoteManagement.sh"
		chown 0:0 "/Volumes/${targDisk}/${FirstBootPath}/Actions/RemoteManagement.sh"
		chmod 755 "/Volumes/${targDisk}/${FirstBootPath}/Actions/RemoteManagement.sh"
	fi
}

function apply_AutoBindDone {
	echo "Creating \033[1m.AutoBindDone\033[m..."
	touch "/Volumes/${targDisk}/var/db/.AutoBindDone"
	chmod 0644 "/Volumes/${targDisk}/var/db/.AutoBindDone"
}

function apply_Overrides {
	echo "Creating \033[1moverrides.plist\033[m..."
	/usr/libexec/PlistBuddy -c "Add ':org.ntp.ntpd:Disabled' bool '${ntpdDisabled}'" "/Volumes/${targDisk}/var/db/launchd.db/com.apple.launchd/overrides.plist" &>/dev/null
	if [ ${?} -ne 0 ] ; then /usr/libexec/PlistBuddy -c "Set ':org.ntp.ntpd:Disabled' bool '${ntpdDisabled}'" "/Volumes/${targDisk}/var/db/launchd.db/com.apple.launchd/overrides.plist" ; fi
	/usr/libexec/PlistBuddy -c "Add ':com.openssh.sshd:Disabled' bool '${sshdDisabled}'" "/Volumes/${targDisk}/var/db/launchd.db/com.apple.launchd/overrides.plist" &>/dev/null
	if [ ${?} -ne 0 ] ; then /usr/libexec/PlistBuddy -c "Set ':com.openssh.sshd:Disabled' bool '${sshdDisabled}'" "/Volumes/${targDisk}/var/db/launchd.db/com.apple.launchd/overrides.plist" ; fi
	chmod 0600 "/Volumes/${targDisk}/var/db/launchd.db/com.apple.launchd/overrides.plist"
}

function apply_ComputerName {
	printf \#\!"/bin/sh\n" > "/Volumes/${targDisk}/${FirstBootPath}/Actions/ComputerName.sh"
	case "${ComputerName}" in
		"Model and MAC Address" )
			echo "ModelName=\`system_profiler | grep \"Model Name: \" | awk -F \": \" '{print \$NF}'\`" >> "/Volumes/${targDisk}/${FirstBootPath}/Actions/ComputerName.sh"
			echo "MACAddress=\`ifconfig | grep -A1 \"en0: \" | grep \"ether \" | awk -F \"ether \" '{print \$NF}'\`" >> "/Volumes/${targDisk}/${FirstBootPath}/Actions/ComputerName.sh"
			echo "MACAddress=\"\${MACAddress//[^a-z0-9]/}\"" >> "/Volumes/${targDisk}/${FirstBootPath}/Actions/ComputerName.sh"
			echo "ComputerName=\"\${ModelName} \${MACAddress}\"" >> "/Volumes/${targDisk}/${FirstBootPath}/Actions/ComputerName.sh" ;;
		"Serial Number" ) echo "ComputerName=\`system_profiler | grep \"Serial Number (system): \" | awk -F \": \" '{print \$NF}'\`" >> "/Volumes/${targDisk}/${FirstBootPath}/Actions/ComputerName.sh" ;;
	esac
	echo "LocalHostName=\`echo \"\${ComputerName}\" | sed -e \"s/ /-/g\"\`" >> "/Volumes/${targDisk}/${FirstBootPath}/Actions/ComputerName.sh"
	echo "scutil --set ComputerName \"\${ComputerName}\"" >> "/Volumes/${targDisk}/${FirstBootPath}/Actions/ComputerName.sh"
	echo "scutil --set LocalHostName \"\${LocalHostName}\"" >> "/Volumes/${targDisk}/${FirstBootPath}/Actions/ComputerName.sh"
	echo "exit 0" >> "/Volumes/${targDisk}/${FirstBootPath}/Actions/ComputerName.sh"
	chown 0:0 "/Volumes/${targDisk}/${FirstBootPath}/Actions/ComputerName.sh"
	chmod 755 "/Volumes/${targDisk}/${FirstBootPath}/Actions/ComputerName.sh"
}

function get_SystemConfiguration {
	get_AppleLanguage
	get_CountryName
	get_Keyboard
	get_NTPServer
	get_TimeZone
	get_sshdDisabled
	get_RemoteManagement
	get_ComputerName
}

function save_SystemConfiguration {
	save_AppleLanguage
	save_CountryName
	save_Keyboard
	save_NTPServer
	save_TimeZone
	save_sshdDisabled
	save_RemoteManagement
	save_ComputerName
}

function display_SystemConfiguration {
	display_mainLanguage ; echo
	display_CountryName ; echo
	display_Keyboard ; echo
	display_NTPServer ; echo
	display_TimeZone ; echo
	display_sshdDisabled ; echo
	display_RemoteManagement ; echo
	display_ComputerName
}

function apply_SystemConfiguration {
	display_Title "System Configuration"
	apply_AppleSetupDone
	apply_CDIScustom
	apply_GlobalPreferences
	apply_TimezoneAuto
	apply_HIToolbox
	apply_SetupRegComplete
	apply_Localtime
	apply_NTPconf
	apply_FirstBoot
	apply_RemoteManagement
	apply_AutoBindDone
	apply_Overrides
	apply_ComputerName
	echo
	press_anyKey
}

function set_systemOptions {
	systemOptions=( "Language" "Country Name" "Keyboard Layout" "Network Time Server" "Time Zone" "Remote Login" "Remote Management" "Computer Name" )
	if [ -n "${targDisk}" ] && [ ! -e "/Volumes/${targDisk}/var/db/.AppleSetupDone" ] ; then systemOptions=( "${systemOptions[@]}" "Apply System Configuration" ) ; fi
	systemOptions=( "${systemOptions[@]}" "Previous Menu" )
}

function menu_SystemConfiguration {
	set_systemOptions
	while [ "${systemOption}" != "Previous Menu" ] ; do
		display_Title "System Configuration"
		display_SystemConfiguration
		if [ -e "/Volumes/${targDisk}/var/db/.AppleSetupDone" ] ; then echo ; echo "\033[1mThe selected image has already been configured.\033[m" ; fi
		echo
		display_Options "Options" "Select an option: "
		select systemOption in "${systemOptions[@]}" ; do
			case "${systemOption}" in
				"Language" ) select_mainLanguage ; systemOption="" ; break ;;
				"Country Name" ) select_CountryName ; systemOption="" ; break ;;
				"Keyboard Layout" ) select_Keyboard ; systemOption="" ; break ;;
				"Network Time Server" ) select_NTPServer ; systemOption="" ; break ;;
				"Time Zone" ) select_TimeZone ; systemOption="" ; break ;;
				"Remote Login" ) select_sshdDisabled ; systemOption="" ; break ;;
				"Remote Management" ) select_RemoteManagement ; systemOption="" ; break ;;
				"Computer Name" ) select_ComputerName ; systemOption="" ; break ;;
				"Apply System Configuration" ) apply_SystemConfiguration ; systemOption="Previous Menu" ; break ;;
				"Previous Menu" ) break ;;
			esac
		done
	done
	systemOption=""
}

function get_RealName {
	prefRealName=`defaults read ~/Library/Preferences/au.com.mondada.SIC "RealName" 2>/dev/null`
	if [ -n "${prefRealName}" ] ; then RealName="${prefRealName}" ; fi
	echo "RealName:		${RealName}"
}

function save_RealName {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "RealName" -string "${RealName}"
}

function display_RealName {
	if [ -n "${RealName}" ] ; then
		echo "Full Name:		${RealName}"
	else
		echo "Full Name:		-"
	fi
}

function dscl_Check {
	# ${1}:	Property Name
	# ${2}: Property Value
	dsclValid=0
	searchResult=`dscl -f "/Volumes/${targDisk}/var/db/dslocal/nodes/Default" localonly -search /Local/Target/Users "${1}" "${2}"`
	if [ -n "${searchResult}" ] ; then dsclValid=1 ; return 1 ; fi
	return 0
}

function update_NFSHomeDirectory {
	if [ ${UniqueID} -gt 500 ] ; then
		NFSHomeDirectory="/Users/${RecordName}"
	else
		NFSHomeDirectory="/var/${RecordName}"
	fi
}

function update_RecordName {
	# ${1}: New Real Name
	RecordName=`echo "${1}" | tr "[:upper:]" "[:lower:]" | tr "[=à=]" "a" | tr "[=á=]" "a" | tr "[=å=]" "a" | tr "[=ä=]" "a" | tr "[=â=]" "a" | tr "[=ã=]" "a" | tr "[=ç=]" "c" | tr "[=è=]" "e" | tr "[=é=]" "e" | tr "[=ë=]" "e" | tr "[=ê=]" "e" | tr "[=ì=]" "i" | tr "[=í=]" "i" | tr "[=ï=]" "i" | tr "[=î=]" "i" | tr "[=ñ=]" "n" | tr "[=ò=]" "o" | tr "[=ó=]" "o" | tr "[=ö=]" "o" | tr "[=ô=]" "o" | tr "[=õ=]" "o" | tr "[=ù=]" "u" | tr "[=ú=]" "u" | tr "[=ü=]" "u" | tr "[=û=]" "u" | tr "[=ÿ=]" "y"`
	RecordName="${RecordName//[^a-zA-Z0-9_.-]/}"
	if [ -n "${targDisk}" ] ; then
		dscl_Check "RecordName" "${RecordName}"
		if [ ${dsclValid} -eq 0 ] ; then return 0 ; fi
		i=1 ; while [ ${dsclValid} -ne 0 ] ; do
			dscl_Check "RecordName" "${RecordName}${i}"
			let i++
		done
		RecordName="${RecordName}${i}"
	fi
	update_NFSHomeDirectory
}

function set_RealName {
	display_Title "User Account"
	display_UserAccount
	if [ -n "${RealName}" ] ; then
		printf "\nFull name (${RealName}): " ; read newRealName
		if [ -z "${newRealName}" ] || [ "${newRealName}" == "${RealName}" ] ; then return 0 ; fi
	else
		while [ -z "${newRealName}" ] ; do printf "Full name: " ; read newRealName ; done
	fi
	if [ -n "${targDisk}" ] ; then
		dscl_Check "RealName" "${newRealName}"
		while [ ${dsclValid} -ne 0 ] ; do
			printf "\033[1m${newRealName}\033[m is used by another user.\n"
			if [ -n "${RealName}" ] ; then
				printf "\nFull name (${RealName}): " ; read newRealName
				if [ -z "${newRealName}" ] || [ "${newRealName}" == "${RealName}" ] ; then return 0 ; fi
			else
				while [ -z "${newRealName}" ] ; do printf "Full name: " ; read newRealName ; done
			fi
			dscl_Check "RealName" "${newRealName}"
		done
	fi
	if [ "${newRealName}" != "${RealName}" ] ; then update_RecordName "${newRealName}" ; fi
	RealName="${newRealName}"
	set_userAttributes
}

function get_RecordName {
	prefRecordName=`defaults read ~/Library/Preferences/au.com.mondada.SIC "RecordName" 2>/dev/null`
	if [ -n "${prefRecordName}" ] ; then RecordName="${prefRecordName}" ; fi
	echo "RecordName:		${RecordName}"
}

function save_RecordName {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "RecordName" -string "${RecordName}"
}

function display_RecordName {
	if [ -n "${RecordName}" ] ; then
		echo "Account Name:		${RecordName}"
	else
		echo "Account Name:		-"
	fi
}

function check_RecordName {
	# ${1}: New Record Name
	validRecordName=0
	# Check for illegal characters
	badChars="${1//[-^a-zA-Z0-9_.-]/}"
	if [ -n "${badChars}" ] ; then printf "\033[1m${1}\033[m is not a valid account name.\n" ; update_RecordName "${1}" ; validRecordName=1 ; return 1 ; fi
	# Check for duplicate record
	if [ -n "${targDisk}" ] ; then
		dscl_Check "RecordName" "${1}"
		if [ ${dsclValid} -ne 0 ] ; then printf "\033[1m${1}\033[m is used by another user.\n" ; update_RecordName "${1}" ; validRecordName=1 ; return 1 ; fi
	fi
	return 0
}

function set_RecordName {
	display_Title "User Account"
	display_UserAccount
	if [ -n "${RecordName}" ] ; then
		printf "\nAccount name (${RecordName}): " ; read newRecordName
		if [ -z "${newRecordName}" ] || [ "${newRecordName}" == "${RecordName}" ] ; then return 0 ; fi
	else
		while [ -z "${newRecordName}" ] ; do printf "\nAccount name: " ; read newRecordName ; done
	fi
	check_RecordName "${newRecordName}"
	while [ ${validRecordName} -ne 0 ] ; do
		if [ -n "${RecordName}" ] ; then
			printf "\nAccount name (${RecordName}): " ; read newRecordName
			if [ -z "${newRecordName}" ] || [ "${newRecordName}" == "${RecordName}" ] ; then return 0 ; fi
		else
			while [ -z "${newRecordName}" ] ; do printf "\nAccount name: " ; read newRecordName ; done
		fi
		check_RecordName "${newRecordName}"
	done
	RecordName="${newRecordName}"
	update_NFSHomeDirectory
	set_userAttributes
}

function get_UniqueID {
	prefUniqueID=`defaults read ~/Library/Preferences/au.com.mondada.SIC "UniqueID" 2>/dev/null`
	if [ -n "${prefUniqueID}" ] ; then UniqueID=${prefUniqueID} ; fi
	echo "UniqueID:		${UniqueID}"
}

function save_UniqueID {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "UniqueID" -int ${UniqueID}
}

function display_UniqueID {
	echo "User ID:		${UniqueID}"
}

function check_UniqueID {
	# ${1}: New User ID
	validUniqueID=0
	# Check for invalid characters
	UniqueID="${newUniqueID//[^0-9-]/}"
	if [ "${UniqueID}" != "${newUniqueID}" ] ; then printf "\033[1m${newUniqueID}\033[m is not a valid User ID.\n" ; validUniqueID=1 ; return 1 ; fi
	# Check for duplicate User ID
	if [ -n "${targDisk}" ] ; then
		dscl_Check "UniqueID" "${newUniqueID}"
		while [ ${dsclValid} -ne 0 ] ; do
			let newUniqueID++
			dscl_Check "UniqueID" "${newUniqueID}"
		done
		if [ "${UniqueID}" != "${newUniqueID}" ] ; then printf "\033[1m${1}\033[m is used by another user.\n" ; UniqueID=${newUniqueID} ; validUniqueID=1 ; return 1 ; fi
	fi
	return 0
}

function set_UniqueID {
	if [ -n "${targDisk}" ] ; then
		dscl_Check "UniqueID" "${UniqueID}"
		while [ ${dsclValid} -ne 0 ] ; do
			let UniqueID++
			dscl_Check "UniqueID" "${UniqueID}"
		done
	fi
	display_Title "User Account"
	display_UserAccount
	printf "\nUser ID (${UniqueID}): " ; read newUniqueID
	if [ -z "${newUniqueID}" ] || [ "${newUniqueID}" == "${UniqueID}" ] ; then set_userAttributes ; return 0 ; fi
	check_UniqueID "${newUniqueID}"
	while [ ${validUniqueID} -ne 0 ] ; do
		printf "\nUser ID (${UniqueID}): " ; read newUniqueID
		if [ -z "${newUniqueID}" ] || [ "${newUniqueID}" == "${UniqueID}" ] ; then set_userAttributes ; return 0 ; fi
		check_UniqueID "${newUniqueID}"
	done
	UniqueID=${newUniqueID}
	update_NFSHomeDirectory
	set_userAttributes
}

function get_Password {
	prefPassword=`defaults read ~/Library/Preferences/au.com.mondada.SIC "Password" 2>/dev/null`
	if [ -n "${prefPassword}" ] ; then Password="${prefPassword}" ; fi
	printf "Password:		" ; if [ -n "${Password}" ] ; then i=0 ; while [ ${i} -lt ${#Password} ] ; do printf "*" ; let i++ ; done ; fi ; printf "\n"
}

function save_Password {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "Password" -string "${Password}"
}

function display_Password {
	if [ -n "${Password}" ] ; then
		printf "Password:		"
		i=0 ; while [ ${i} -lt ${#Password} ] ; do printf "*" ; let i++ ; done ; printf "\n"
	else
		echo "Password:		-"
	fi
}

function set_Password {
	display_Title "User Account"
	display_UserAccount
	printf "\nPassword: " ; stty -echo ; read Password ; stty echo
	printf "\nVerify: " ; stty -echo ; read Verify ; stty echo
	while [ "${Password}" != "${Verify}" ] ; do
		printf "\nPasswords do not match.\n"
		printf "\nPassword: " ; stty -echo ; read Password ; stty echo
		printf "\nVerify: " ; stty -echo ; read Verify ; stty echo
	done
}

function get_AutoLogin {
	prefAutoLogin=`/usr/libexec/PlistBuddy -c "Print ':AutoLogin'" ~/Library/Preferences/au.com.mondada.SIC.plist 2>/dev/null`
	if [ ${?} -ne 0 ] ; then prefAutoLogin="${AutoLogin}" ; fi
	echo "AutoLogin:		${AutoLogin}"
}

function save_AutoLogin {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "AutoLogin" -bool "${AutoLogin}"
}

function display_AutoLogin {
	printf "Automatic Login:	["
	if [ "${AutoLogin}" == "false" ] ; then printf "*" ; else printf " " ; fi
	echo "] Require password when logging in"
}

function set_AutoLogin {
	display_Title "User Account"
	display_UserAccount
	while [ -z "${requirePassword}" ] ; do
		echo
		read -sn 1 -p "Require password when logging in (Y/n)? " requirePassword < /dev/tty
		if [ -z "${requirePassword}" ] ; then requirePassword="y" ; fi
		case "${requirePassword}" in
			"Y" | "y" ) echo ; AutoLogin="false" ;;
			"N" | "n" ) echo ; AutoLogin="true" ;;
			* ) echo ; requirePassword="" ;;
		esac
	done
	requirePassword=""
}

function get_AuthenticationHint {
	prefAuthenticationHint=`defaults read ~/Library/Preferences/au.com.mondada.SIC "AuthenticationHint" 2>/dev/null`
	if [ -n "${prefAuthenticationHint}" ] ; then prefAuthenticationHint="${AuthenticationHint}" ; fi
	echo "AuthenticationHint:	${AuthenticationHint}"
}

function save_AuthenticationHint {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "AuthenticationHint" -string "${AuthenticationHint}"
}

function display_AuthenticationHint {
	if [ -n "${AuthenticationHint}" ] ; then
		echo "Password hint:		${AuthenticationHint}"
	else
		echo "Password hint:		-"
	fi
}

function set_AuthenticationHint {
	display_Title "User Account"
	display_UserAccount
	printf "\nPassword Hint: " ; read AuthenticationHint
	while [ "${AuthenticationHint}" == "${Password}" ] ; do
		printf "\nThe hint and the password can't be the same. This is a security risk. Enter a different hint or password.\n"
		printf "\nPassword Hint: " ; read AuthenticationHint
	done
}

function get_UserShell {
	prefUserShell=`defaults read ~/Library/Preferences/au.com.mondada.SIC "UserShell" 2>/dev/null`
	if [ -n "${prefUserShell}" ] ; then UserShell="${prefUserShell}" ; fi
	echo "UserShell:		${UserShell}"
}

function save_UserShell {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "UserShell" -string "${UserShell}"
}

function display_UserShell {
	echo "Login shell:		${UserShell}"
}

function select_UserShell {
	UserShells=( "/bin/bash" "/bin/tcsh" "/bin/sh" "/bin/csh" "/bin/zsh" "/bin/ksh" )
	display_Title "User Account"
	display_UserAccount
	echo
	display_Options "Login shells" "Select a login shell: "
	select UserShell in "${UserShells[@]}" ; do
		if [ -n "${UserShell}" ] ; then break ; fi
	done
}

function get_NFSHomeDirectory {
	prefNFSHomeDirectory=`defaults read ~/Library/Preferences/au.com.mondada.SIC "NFSHomeDirectory" 2>/dev/null`
	if [ -n "${prefNFSHomeDirectory}" ] ; then NFSHomeDirectory="${prefNFSHomeDirectory}" ; fi
	echo "NFSHomeDirectory:	${NFSHomeDirectory}"
}

function save_NFSHomeDirectory {
	defaults write ~/Library/Preferences/au.com.mondada.SIC "NFSHomeDirectory" -string "${NFSHomeDirectory}"
}

function display_NFSHomeDirectory {
	echo "Home directory:		${NFSHomeDirectory}"
}

function set_NFSHomeDirectory {
	display_Title "User Account"
	display_UserAccount
	printf "\nHome directory (${NFSHomeDirectory}): " ; read newNFSHomeDirectory
	if [ -z "${newNFSHomeDirectory}" ] || [ "${newNFSHomeDirectory}" == "${NFSHomeDirectory}" ] ; then return 0 ; fi
	check_Path "${newNFSHomeDirectory}"
	while [ ${validPath} -ne 0 ] ; do
		printf "\nHome directory (${NFSHomeDirectory}): " ; read newNFSHomeDirectory
		if [ -z "${newNFSHomeDirectory}" ] || [ "${newNFSHomeDirectory}" == "${NFSHomeDirectory}" ] ; then return 0 ; fi
		check_Path "${newNFSHomeDirectory}"
	done
	NFSHomeDirectory="${newNFSHomeDirectory}"
}

function get_UserAccount {
	get_RealName
	get_RecordName
	get_UniqueID
	get_Password
	get_AutoLogin
	get_AuthenticationHint
	get_UserShell
	get_NFSHomeDirectory
}

function save_UserAccount {
	save_RealName
	save_RecordName
	save_UniqueID
	save_Password
	save_AutoLogin
	save_AuthenticationHint
	save_UserShell
	save_NFSHomeDirectory
}

function display_UserAccount {
	display_RealName
	display_RecordName
	display_UniqueID
	display_Password
	display_AutoLogin
	display_AuthenticationHint
	display_UserShell
	display_NFSHomeDirectory
}

function check_UserAccount {
	validUserAccount=0 ; validRealName=0 ; validRecordName=0 ; validUniqueID=0
	dscl_Check "RealName" "${RealName}"
	if [ ${dsclValid} -ne 0 ] ; then validRealName=1 ; validUserAccount=1 ; fi
	dscl_Check "RecordName" "${RecordName}"
	if [ ${dsclValid} -ne 0 ] ; then validRecordName=1 ; validUserAccount=1 ; fi
	dscl_Check "UniqueID" "${UniqueID}"
	if [ ${dsclValid} -ne 0 ] ; then validUniqueID=1 ; validUserAccount=1 ; fi
}

function set_userAttributes {
	if [ -n "${targDisk}" ] ; then check_UserAccount ; fi
	userAttributes=( "Full Name" "Account Name" "User ID" "Password" "Automatic Login" "Password Hint" "Login shell" "Home Directory" )
	if [ -n "${targDisk}" ] && [ ${validUserAccount} -eq 0 ] ; then userAttributes=( "${userAttributes[@]}" "Create Account" ) ; fi
	userAttributes=( "${userAttributes[@]}" "Previous Menu" )
}

function create_UserAccount {
	display_Title "User Account"
	echo "Creating User Record:	${RecordName}"
	dscl -f "/Volumes/${targDisk}/var/db/dslocal/nodes/Default" localonly -create /Local/Target/Users/"${RecordName}"
	echo "Adding attribute:	RealName"
	dscl -f "/Volumes/${targDisk}/var/db/dslocal/nodes/Default" localonly -append /Local/Target/Users/"${RecordName}" RealName "${RealName}"
	echo "Setting password"
	dscl -f "/Volumes/${targDisk}/var/db/dslocal/nodes/Default" localonly -passwd /Local/Target/Users/"${RecordName}" "${Password}"
	echo "Adding attribute:	AuthenticationHint"
	dscl -f "/Volumes/${targDisk}/var/db/dslocal/nodes/Default" localonly -append /Local/Target/Users/"${RecordName}" AuthenticationHint "${AuthenticationHint}"
	echo "Adding attribute:	UniqueID"
	dscl -f "/Volumes/${targDisk}/var/db/dslocal/nodes/Default" localonly -append /Local/Target/Users/"${RecordName}" UniqueID ${UniqueID}
	echo "Adding attribute:	PrimaryGroupID"
	dscl -f "/Volumes/${targDisk}/var/db/dslocal/nodes/Default" localonly -append /Local/Target/Users/"${RecordName}" PrimaryGroupID ${PrimaryGroupID}
	echo "Adding attribute:	NFSHomeDirectory"
	dscl -f "/Volumes/${targDisk}/var/db/dslocal/nodes/Default" localonly -append /Local/Target/Users/"${RecordName}" NFSHomeDirectory "${NFSHomeDirectory}"
	echo "Adding attribute:	UserShell"
	dscl -f "/Volumes/${targDisk}/var/db/dslocal/nodes/Default" localonly -append /Local/Target/Users/"${RecordName}" UserShell "${UserShell}"
	echo "Adding attribute:	GroupMembership"
	dscl -f "/Volumes/${targDisk}/var/db/dslocal/nodes/Default" localonly -append /Local/Target/Groups/staff GroupMembership "${RecordName}"
	dscl -f "/Volumes/${targDisk}/var/db/dslocal/nodes/Default" localonly -append /Local/Target/Groups/admin GroupMembership "${RecordName}"
	ditto "/Volumes/${targDisk}/System/Library/User Template/Non_localized" "/Volumes/${targDisk}/${NFSHomeDirectory}"
	ditto "/Volumes/${targDisk}/System/Library/User Template/${UserTemplate}.lproj" "/Volumes/${targDisk}/${NFSHomeDirectory}"
	defaults write "/Volumes/${targDisk}/${NFSHomeDirectory}/Library/Preferences/.GlobalPreferences" AppleMiniaturizeOnDoubleClick -bool FALSE
	defaults write "/Volumes/${targDisk}/${NFSHomeDirectory}/Library/Preferences/.GlobalPreferences" AppleScrollAnimationEnabled -bool TRUE
	chown -Rh ${UniqueID}:${PrimaryGroupID} "/Volumes/${targDisk}/${NFSHomeDirectory}"
	if [ ${UniqueID} -lt 501 ] ; then
		defaults write "/Volumes/${targDisk}/Library/Preferences/com.apple.loginwindow" Hide500Users -bool TRUE
		defaults write "/Volumes/${targDisk}/Library/Preferences/com.apple.loginwindow" HiddenUsersList -array "${RecordName}"
		chmod 0644 "/Volumes/${targDisk}/Library/Preferences/com.apple.loginwindow.plist"
	fi
	GeneratedUID=`dscl -f "/Volumes/${targDisk}/var/db/dslocal/nodes/Default" localonly -read /Local/Target/Users/"${RecordName}" GeneratedUID`
	GeneratedUID=${GeneratedUID:14:36}
	if [ ! -e "/Volumes/${targDisk}/var/db/shadow/hash" ] ; then
		mkdir -p "/Volumes/${targDisk}/var/db/shadow/hash"
		chmod -R 0700 "/Volumes/${targDisk}/var/db/shadow"
	fi
	if [ -n "${GeneratedUID}" ] ; then mv "/var/db/shadow/hash/${GeneratedUID}" "/Volumes/${targDisk}/var/db/shadow/hash/" &>/dev/null ; fi
	chmod 600 "/Volumes/${targDisk}/var/db/shadow/hash/${GeneratedUID}" &>/dev/null
	if [ "${AutoLogin}" == "true" ] ; then
		Date=( `date` )
		/usr/libexec/PlistBuddy -c "Add ':CreationDate' date '${Date[0]} ${Date[2]} ${Date[1]} ${Date[4]} ${Date[5]} ${Date[3]}'" "/Volumes/${targDisk}/var/db/shadow/hash/${GeneratedUID}.state" &>/dev/null
		if [ ${?} -ne 0 ] ; then /usr/libexec/PlistBuddy -c "Set ':CreationDate' date '${Date[0]} ${Date[2]} ${Date[1]} ${Date[4]} ${Date[5]} ${Date[3]}'" "/Volumes/${targDisk}/var/db/shadow/hash/${GeneratedUID}.state" ; fi
		/usr/libexec/PlistBuddy -c "Add ':FailedLoginCount' integer 0" "/Volumes/${targDisk}/var/db/shadow/hash/${GeneratedUID}.state" &>/dev/null
		if [ ${?} -ne 0 ] ; then /usr/libexec/PlistBuddy -c "Set ':FailedLoginCount' integer 0" "/Volumes/${targDisk}/var/db/shadow/hash/${GeneratedUID}.state" ; fi
		/usr/libexec/PlistBuddy -c "Add ':LastLoginDate' date '${Date[0]} ${Date[2]} ${Date[1]} ${Date[4]} ${Date[5]} ${Date[3]}'" "/Volumes/${targDisk}/var/db/shadow/hash/${GeneratedUID}.state" &>/dev/null
		if [ ${?} -ne 0 ] ; then /usr/libexec/PlistBuddy -c "Set ':LastLoginDate' date '${Date[0]} ${Date[2]} ${Date[1]} ${Date[4]} ${Date[5]} ${Date[3]}'" "/Volumes/${targDisk}/var/db/shadow/hash/${GeneratedUID}.state" ; fi
		/usr/libexec/PlistBuddy -c "Add ':NewPasswordRequired' integer 0" "/Volumes/${targDisk}/var/db/shadow/hash/${GeneratedUID}.state" &>/dev/null
		if [ ${?} -ne 0 ] ; then /usr/libexec/PlistBuddy -c "Set ':NewPasswordRequired' integer 0" "/Volumes/${targDisk}/var/db/shadow/hash/${GeneratedUID}.state" ; fi
		chmod 0600 "/Volumes/${targDisk}/var/db/shadow/hash/${GeneratedUID}.state"
		defaults write "/Volumes/${targDisk}/Library/Preferences/com.apple.loginwindow" RetriesUntilHint -integer 3
		defaults write "/Volumes/${targDisk}/Library/Preferences/com.apple.loginwindow" autoLoginUser -string "${RecordName}"
		defaults write "/Volumes/${targDisk}/Library/Preferences/com.apple.loginwindow" lastUser -string "Restart"
		defaults write "/Volumes/${targDisk}/Library/Preferences/com.apple.loginwindow" lastUserName -string "${RecordName}"
		chmod 0644 "/Volumes/${targDisk}/Library/Preferences/com.apple.loginwindow.plist"
	fi
	echo
	press_anyKey
}

function menu_UserAccount {
	set_userAttributes
	while [ "${userAttribute}" != "Previous Menu" ] ; do
		display_Title "User Account"
		display_UserAccount
		echo
		if [ -n "${targDisk}" ] && [ ${validUserAccount} -ne 0 ] ; then
			echo "\033[1mThe following attributes conflict with an existing user account:\033[m"
			if [ ${validRealName} -ne 0 ] ; then echo "\033[1m	Full Name\033[m" ; fi
			if [ ${validRecordName} -ne 0 ] ; then echo "\033[1m	Account Name\033[m" ; fi
			if [ ${validUniqueID} -ne 0 ] ; then echo "\033[1m	User ID\033[m" ; fi
			echo
		fi
		display_Options "Attributes" "Select an attribute: "
		select userAttribute in "${userAttributes[@]}" ; do
			case "${userAttribute}" in
				"Full Name" ) set_RealName ; userAttribute="" ; break ;;
				"Account Name" ) set_RecordName ; userAttribute="" ; break ;;
				"User ID" ) set_UniqueID ; userAttribute="" ; break ;;
				"Password" ) set_Password ; userAttribute="" ; break ;;
				"Automatic Login" ) set_AutoLogin ; userAttribute="" ; break ;;
				"Password Hint" ) set_AuthenticationHint ; userAttribute="" ; break ;;
				"Login shell" ) select_UserShell ; userAttribute="" ; break ;;
				"Home Directory" ) set_NFSHomeDirectory ; userAttribute="" ; break ;;
				"Create Account" ) create_UserAccount ; userAttribute="Previous Menu" ; break ;;
				"Previous Menu" ) break ;;
			esac
		done
	done
	userAttribute=""
}

function menu_Preferences {
	prefOptions=( "Default Paths" "Image Settings" "System Configuration" "User Account" "Main Menu" )
	while [ "${prefOption}" != "Main Menu" ] ; do
		display_Title "Preferences"
		display_Options "Options" "Select an option: "
		select prefOption in "${prefOptions[@]}" ; do
			case "${prefOption}" in
				"Default Paths" ) menu_DefaultPaths ; prefOption="" ; break ;;
				"Image Settings" ) menu_ImageSettings ; prefOption="" ; break ;;
				"System Configuration" ) menu_SystemConfiguration ; prefOption="" ; break ;;
				"User Account" ) menu_UserAccount ; prefOption="" ; break ;;
				"Main Menu" ) break ;;
			esac
		done
	done
	prefOption=""
	while [ -z "${saveDefaults}" ] ; do
		echo
		read -sn 1 -p "Save as default settings (Y/n)? " saveDefaults < /dev/tty
		echo
		if [ -z "${saveDefaults}" ] ; then saveDefaults="y" ; fi
		case "${saveDefaults}" in
			"Y" | "y" ) save_DefaultPaths ; save_ImageSettings ; save_SystemConfiguration ; save_UserAccount ;;
			"N" | "n" ) echo ;;
			* ) echo ; saveDefaults="" ;;
		esac
	done
	saveDefaults=""
}

function detect_Sources {
	unset sourceTypes[@]
	unset sourceVersions[@]
	unset sourceVolumes[@]
	unset imageNames[@]
	systemMinorVersion=`defaults read "/System/Library/CoreServices/SystemVersion" ProductVersion | awk -F "." '{print $2}'`
	Volumes=( `ls -Ap "/Volumes" | sed -e "s/ /%20/g" | grep "/" | awk -F "/" '{print $1}'` )
	i=0 ; for Volume in "${Volumes[@]}" ; do Volumes[i]=$( echo "${Volume}" | sed -e "s/%20/ /g" ) ; let i++ ; done
	for Volume in "${Volumes[@]}" ; do
		if [ ! -e "/Volumes/${Volume}/var/db/.AppleSetupDone" ] && [ -e "/Volumes/${Volume}/System/Library/CoreServices/SystemVersion.plist" ] ; then
			sourceMinorVersion=`defaults read "/Volumes/${Volume}/System/Library/CoreServices/SystemVersion" ProductVersion | awk -F "." '{print $2}'`
			set_osName ${sourceMinorVersion}
			if [ -e "/Volumes/${Volume}/System/Library/CoreServices/ServerVersion.plist" ] ; then
				ProductType="server"
				ProductName=`defaults read "/Volumes/${Volume}/System/Library/CoreServices/ServerVersion" ProductName`
				ProductVersion=`defaults read "/Volumes/${Volume}/System/Library/CoreServices/ServerVersion" ProductVersion`
				ProductBuildVersion=`defaults read "/Volumes/${Volume}/System/Library/CoreServices/SystemVersion" ProductBuildVersion`
			else
				ProductType="user"
				ProductName=`defaults read "/Volumes/${Volume}/System/Library/CoreServices/SystemVersion" ProductName`
				ProductVersion=`defaults read "/Volumes/${Volume}/System/Library/CoreServices/SystemVersion" ProductVersion`
				ProductBuildVersion=`defaults read "/Volumes/${Volume}/System/Library/CoreServices/SystemVersion" ProductBuildVersion`
			fi
			if [ -e "/Volumes/${Volume}/System/Installation/Packages/OSInstall.mpkg" ] || [ -e "/Volumes/${Volume}/Packages/OSInstall.mpkg" ] ; then
				if [ ${sourceMinorVersion} -eq ${systemMinorVersion} ] ; then
					sourceVersions=( "${sourceVersions[@]}" "${ProductName} ${ProductVersion} (${ProductBuildVersion}) Installer" )
					sourceVolumes=( "${sourceVolumes[@]}" "${Volume}" )
					imageNames=( "${imageNames[@]}" `echo "${osName}_${ProductBuildVersion}_${ProductType}" | awk {'print tolower()'}` )
				fi
			else
				sourceVersions=( "${sourceVersions[@]}" "${ProductName} ${ProductVersion} (${ProductBuildVersion})" )
				sourceVolumes=( "${sourceVolumes[@]}" "${Volume}" )
				imageNames=( "${imageNames[@]}" `echo "${osName}_${ProductBuildVersion}_${ProductType}" | awk {'print tolower()'}` )
			fi
		fi
	done
}

function display_Source {
	if [ -n "${sourceVersion}" ] ; then
		echo "Source:		${sourceVersion}"
	else
		echo "Source:		-"
	fi
}

function set_sourceOptions {
	sourceOptions=( "Select Source" )
	if [ -n "${sourceVolume}" ] ; then
		if [ -e "/Volumes/${sourceVolume}/System/Installation/Packages/OSInstall.mpkg" ] || [ -e "/Volumes/${sourceVolume}/Packages/OSInstall.mpkg" ] ; then
			sourceOptions=( "${sourceOptions[@]}" "Install Mac OS X" )
		else
			sourceOptions=( "${sourceOptions[@]}" "Image Device" )
		fi
	fi
	sourceOptions=( "${sourceOptions[@]}" "Main Menu" )
}

function select_Source {
	detect_Sources
	display_Title "Select Source"
	if [ ${#sourceVersions[@]} -eq 0 ] ; then
		sourceVersion="" ; sourceVolume="" ; sparseImage="" ; imageName=""
		press_anyKey "No sources available, please insert an install disc, or mount an un-booted system volume."
	else
		display_Source
		echo
		display_Options "Sources" "Select a source: "
		select sourceVersion in "${sourceVersions[@]}" ; do
			if [ -n "${sourceVersion}" ] ; then break ; fi
		done
		i=0
		for Element in "${sourceVersions[@]}" ; do
			if [ "${Element}" == "${sourceVersion}" ] ; then
				sourceVolume="${sourceVolumes[i]}"
				sparseImage="${imageNames[i]}.sparseimage"
				baseImage="${imageNames[i]}.dmg"
				break
			fi
			let i++
		done
	fi
	set_sourceOptions
}

function eject_targDisk {
	printf "\nCleaning up...\n"
	for targDisk in "${targDisks[@]}" ; do
		rm -rf "/Volumes/${targDisk}/.DS_Store"
		rm -rf "/Volumes/${targDisk}/.Spotlight-V100"
		rm -rf "/Volumes/${targDisk}/.Trashes"
		rm -rf "/Volumes/${targDisk}/.fseventsd"
	done
	printf "\nEjecting \033[1m${targDisks[0]}\033[m...\n"
	hdiutil eject "/Volumes/${targDisks[0]}"
	targDisk=""
}

function install_Package {
	# ${1}: Path to package
	if [ -e "${1}" ] ; then
		if [ "${1}" == "/Volumes/${sourceVolume}/Packages/OSInstall.mpkg" ] ; then
			InstallType=0
		else
			while [ -z "${Customize}" ] ; do
				echo
				read -sn 1 -p "Customize Installation (y/N)? " Customize < /dev/tty
				if [ -z "${Customize}" ] ; then Customize="n" ; fi ; echo
				case "${Customize}" in
					"Y" | "y" ) InstallType=1 ; break ;;
					"N" | "n" ) InstallType=0 ; break ;;
					* ) Customize="" ;;
				esac
				echo
			done
		fi
		packageNames=( `installer -pkginfo -pkg "${1}" | sed -e "s/ /%20/g"` )
		i=0 ; for Element in "${packageNames[@]}" ; do packageNames[i]=$( echo "${Element}" | sed -e "s/%20/ /g" ) ; let i++ ; done
		Customize=""
		printf "\nInstalling \033[1m${packageNames[0]}\033[m...\n\n"
		if [ ${InstallType} -eq 1 ] ; then
			open "${1}"
			printf "Waiting for installation to complete." ; sleep 10
			while [ `ps eax | grep -i "Installer.app" | grep -v "grep" | awk '{print $1}'` ] ; do sleep 10 ; printf "." ; done ; echo
		else
			printf "Waiting for installation to complete."
			installer -pkg "${1}" -target "/Volumes/${targDisk}" | while read line ; do printf "." ; done ; echo
#			installer -verboseR -pkg "${1}" -target "/Volumes/${targDisk}" | while read line ; do printf "." ; done ; echo
			press_anyKey
		fi
	else
		press_anyKey "The package selection is invalid, please review your settings."
	fi
}

function create_Image {
	display_Title "Create Image"
	if [ -z "${sourceVersion}" ] ; then press_anyKey "No source selected, please select a source first." ; return 1 ; fi
	while [ -e "${LibraryPath}/${baseImage}" ] ; do
		printf "An image already exists named \033[1m${baseImage}\033[m.\n"
		read -sn 1 -p "Would you like to overwrite it (y/N)? " Overwrite < /dev/tty ; echo
		if [ -z "${Overwrite}" ] ; then Overwrite="n" ; fi
		case "${Overwrite}" in
			"Y" | "y" ) echo ; rm -f "${LibraryPath}/${baseImage}" ; break ;;
			"N" | "n" ) echo ; break ;;
		esac
	done
	Overwrite=""
	if [ ! -e "${LibraryPath}/${baseImage}" ] ; then
		if [ ! -e "${LibraryPath}" ] ; then mkdir -p "${LibraryPath}" ; chown 99:99 "${LibraryPath}" ; fi
		if [ -e "/Volumes/${sourceVolume}/System/Installation/Packages/OSInstall.mpkg" ] || [ -e "/Volumes/${sourceVolume}/Packages/OSInstall.mpkg" ] ; then
			rm -f "/tmp/${sparseImage}" &>/dev/null
			printf "Creating \033[1m${sparseImage}\033[m...\n\n"
			hdiutil create -size "${ImageSize}g" -type SPARSE -fs HFS+J -volname "${VolumeName}" "/tmp/${sparseImage}"
			targDisk=`hdiutil attach -owners on -noverify "/tmp/${sparseImage}" | grep "/Volumes/${VolumeName}" | awk -F "/Volumes/" '{print $NF}'`
			targDisks=( "${targDisk}" )
			chown 0:80 "/Volumes/${targDisk}"
			chmod 1775 "/Volumes/${targDisk}"
			if [ -e "/Volumes/${sourceVolume}/System/Installation/Packages/OSInstall.mpkg" ] ; then
				install_Package "/Volumes/${sourceVolume}/System/Installation/Packages/OSInstall.mpkg"
			else
				install_Package "/Volumes/${sourceVolume}/Packages/OSInstall.mpkg"
			fi
			bless --folder "/Volumes/${targDisk}/System/Library/CoreServices" --bootefi 2>/dev/null
			touch "/Volumes/${targDisk}/private/var/db/.RunLanguageChooserToo"
			echo
			eject_targDisk
			printf "\nCompressing \033[1m${sparseImage}\033[m...\n\n"
			hdiutil convert -format UDZO -o "${LibraryPath}/${baseImage}" "/tmp/${sparseImage}"
			echo
			press_anyKey
			rm -f "/tmp/${sparseImage}" &>/dev/null
		else
			printf "Unmounting \033[1m${sourceVolume}\033[m...\n"
			rm -rf "/Volumes/${sourceVolume}/.DS_Store" 2>/dev/null
			rm -rf "/Volumes/${sourceVolume}/.Trashes" 2>/dev/null
			rm -rf "/Volumes/${sourceVolume}/.fseventsd" 2>/dev/null
			deviceNodes=( `diskutil list "${deviceWhole}" | grep "${deviceWhole}s" | grep -v "EFI" | grep -v "Recovery HD" | awk -F " " '{print $NF}'` )
			if [ ${#deviceNodes[@]} -gt 1 ] ; then
				deviceName=`diskutil info "/Volumes/${sourceVolume}" | grep "Device Node:" | awk -F " " '{print $NF}'`
				diskutil unmount force "/Volumes/${sourceVolume}" &>/dev/null
			else
				deviceName=`diskutil info "/Volumes/${sourceVolume}" | grep "Part of Whole:" | awk -F " " '{print $NF}'`
				deviceName="/dev/${deviceName}"
				diskutil unmountDisk force "/Volumes/${sourceVolume}" &>/dev/null
			fi
			printf "\nCreating \033[1m${baseImage}\033[m from ${deviceName}...\n\n"
			hdiutil create -srcdevice "${deviceName}" -o "${LibraryPath}/${baseImage}"
			diskutil mountDisk "${deviceName}"
			press_anyKey
		fi
	fi
}

function display_baseImage {
	if [ -n "${baseImage}" ] ; then
		echo "Image Name:	${baseImage}"
	else
		echo "Image Name:	-"
	fi
}

function menu_CreateImage {
	set_sourceOptions
	while [ "${sourceOption}" != "Main Menu" ] ; do
		display_Title "Create Image"
		display_Source
		display_baseImage
		echo
		display_Options "Options" "Select an option: "
		select sourceOption in "${sourceOptions[@]}" ; do
			case "${sourceOption}" in
				"Select Source" ) select_Source ; sourceOption="" ; break ;;
				"Install Mac OS X" ) create_Image ; sourceOption="" ; break ;;
				"Image Device" ) create_Image ; sourceOption="" ; break ;;
				"Main Menu" ) break ;;
			esac
		done
	done
	sourceOption=""
}

function detect_baseImages {
	unset baseImages[@]
	Images=( `ls -A "${LibraryPath}" | grep ".dmg" | sed -e "s/ /%20/g"` )
	i=0 ; for Image in "${Images[@]}" ; do baseImages[i]=$( echo "${Image}" | sed -e "s/%20/ /g" ) ; let i++ ; done
}

function get_ImageConfiguration {
	set_GeoKitFramework
	AppleLanguage=`/usr/libexec/PlistBuddy -c "Print ':AppleLanguages:0'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist" 2>/dev/null`
	set_mainLanguage "${AppleLanguage}"
	CountryName=`/usr/libexec/PlistBuddy -c "Print ':Address:CountryName'" "/Volumes/${targDisk}/var/db/.AppleSetupDone" 2>/dev/null`
	set_Country "${CountryName}"
	AppleCurrentKeyboardLayoutInputSourceID=`defaults read "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox" "AppleCurrentKeyboardLayoutInputSourceID" 2>/dev/null`
	InputMode=`/usr/libexec/PlistBuddy -c "Print ':AppleSelectedInputSources:0:Input Mode'" "/Volumes/${targDisk}/Library/Preferences/com.apple.HIToolbox.plist" 2>/dev/null`
	if [ ${?} -ne 0 ] ; then InputMode="" ; fi
	set_KeyboardLayout "${AppleCurrentKeyboardLayoutInputSourceID}" "${InputMode}"
	ntpdDisabled=`/usr/libexec/PlistBuddy -c "Print ':org.ntp.ntpd:Disabled'" "/Volumes/${targDisk}/var/db/launchd.db/com.apple.launchd/overrides.plist" 2>/dev/null`
	NTPServer=`cat "/Volumes/${targDisk}/etc/ntp.conf" | awk -F "server " '{print $NF}'`
	set_NTPServerName "${NTPServer}"
	TimezoneAuto=`/usr/libexec/PlistBuddy -c "Print ':Active'" "/Volumes/${targDisk}/Library/Preferences/com.apple.timezone.auto.plist" 2>/dev/null`
	GeonameID=`/usr/libexec/PlistBuddy -c "Print ':com.apple.preferences.timezone.selected_city:GeonameID'" "/Volumes/${targDisk}/Library/Preferences/.GlobalPreferences.plist"`
	QUERY="select ZCOUNTRY from ${PLACES} where ZGEONAMEID = ${GeonameID};"
	ZCOUNTRY=`sqlite3 -line "${GeoKitFramework}" "${QUERY}" | grep "ZCOUNTRY = " | awk -F "ZCOUNTRY = " '{print $NF}'`
	set_CountryCode ${ZCOUNTRY}
	set_TimeZone ${GeonameID}
	set_ClosestCity ${GeonameID}
	sshdDisabled=`/usr/libexec/PlistBuddy -c "Print ':com.openssh.sshd:Disabled'" "/Volumes/${targDisk}/var/db/launchd.db/com.apple.launchd/overrides.plist" 2>/dev/null`
	if [ -e "/Volumes/${targDisk}/etc/RemoteManagement.launchd" ] ; then
		RemoteManagement="true"
	else
		RemoteManagement="false"
	fi
	if  cat "/Volumes/${targDisk}/${FirstBootPath}/Actions/ComputerName.sh" | grep -q "MACAddress" ; then
		ComputerName="Model and MAC Address"
	else
		ComputerName="Serial Number"
	fi
}

function attach_baseImage {
	if [ -z "${baseImage}" ] ; then return 1 ; fi
	if [ ! -e "${LibraryPath}/Shadow" ] ; then mkdir -p "${LibraryPath}/Shadow" ; chown 99:99 "${LibraryPath}/Shadow" ; fi
	while [ -e "${LibraryPath}/Shadow/${baseImage}.shadow" ] ; do
		printf "\nA shadow file already exists named \033[1m${baseImage}.shadow\033[m.\n"
		read -sn 1 -p "Would you like to overwrite it (y/N)? " Overwrite < /dev/tty
		echo
		if [ -z "${Overwrite}" ] ; then Overwrite="n" ; fi
		case "${Overwrite}" in
			"Y" | "y" ) echo ; rm -f "${LibraryPath}/Shadow/${baseImage}.shadow" ; break ;;
			"N" | "n" ) break ;;
		esac
		echo
	done
	Overwrite=""
	if [ ! -e "${LibraryPath}/Shadow/${baseImage}.shadow" ] ; then printf "\nCreating \033[1m${baseImage}.shadow\033[m..." ; fi
	printf "\nAttaching \033[1m${baseImage}\033[m...\n\n"
	targDisks=( `hdiutil attach -owners on -noverify "${LibraryPath}/${baseImage}" -shadow "${LibraryPath}/Shadow/${baseImage}.shadow" | grep "/Volumes/" | awk -F "/Volumes/" '{print $NF}' | sed -e "s/ /%20/g"` )
	if [ ${#targDisks[@]} -eq 0 ] ; then
		printf "\n\033[1m${baseImage}\033[m doesn't appear to be a valid image file.\n"
		while [ -z "${Remove}" ] ; do
			echo
			read -sn 1 -p "Would you like to remove it (Y/n)? " Remove < /dev/tty
			echo
			if [ -z "${Remove}" ] ; then Remove="y" ; fi
			case "${Remove}" in
				"Y" | "y" ) echo ; rm -f "${LibraryPath}/${baseImage}" ; baseImage="" ; break ;;
				"N" | "n" ) break ;;
				* ) Remove="" ;;
			esac
			echo
		done
		Remove=""
	fi
	i=0 ; for Element in "${targDisks[@]}" ; do targDisks[i]=$( echo "${Element}" | sed -e "s/%20/ /g" ) ; let i++ ; done
	for targDisk in "${targDisks[@]}" ; do if [ -e "/Volumes/${targDisk}/System/Library/CoreServices/SystemVersion.plist" ] ; then break ; fi ; done
	if [ -e "/Volumes/${targDisk}/var/db/.AppleSetupDone" ] ; then get_ImageConfiguration ; fi
}

function display_baseImage {
	if [ -n "${baseImage}" ] ; then
		echo "Image Name:	${baseImage}"
	else
		echo "Image Name:	-"
	fi
}

function select_baseImage {
	detect_baseImages
	if [ -n "${baseImage}" ] ; then currentBaseImage="${baseImage}" ; fi
	display_Title "Select Image"
	if [ ${#baseImages[@]} -eq 0 ] ; then
		baseImage=""
		press_anyKey "No images currently in Library."
	else
		display_baseImage
		echo
		display_Options "Images" "Select an image: "
		select baseImage in "${baseImages[@]}" ; do
			case "${baseImage}" in
				"${currentBaseImage}" ) currentBaseImage="" ; break ;;
				* ) if [ -n "${targDisk}" ] ; then eject_targDisk ; fi ; break ;;
			esac
		done
	fi
	set_configureOptions
}

function detect_Packages {
	unset Packages[@]
	if [ ! -d "${PackagePath}" ] ; then mkdir -p "${PackagePath}" ; chown 99:99 "${PackagePath}" ; fi
	allPackages=( `ls -A "${PackagePath}" | sed -e "s/ /%20/g"` )
	i=0 ; for Element in "${allPackages[@]}" ; do allPackages[i]=$( echo "${Element}" | sed -e "s/%20/ /g" ) ; let i++ ; done
	for Element in "${allPackages[@]}" ; do
		if installer -volinfo -pkg "${PackagePath}/${Element}" | grep -wq "/Volumes/${targDisk}" ; then
			if [ -z `installer -volinfo -pkg "${PackagePath}/${Element}" | grep -w "/Volumes/${targDisk}" | awk -F "/Volumes/${targDisk}" '{print $NF}'` ] ; then Packages=( "${Packages[@]}" "${Element}" ) ; fi
		fi
	done
	if [ ${#Packages[@]} -eq 0 ] ; then Package="" ; fi
}

function set_configureOptions {
	configureOptions=( "Select Image" )
	if [ -n "${targDisk}" ] ; then
		if [ ! -e "/Volumes/${targDisk}/System/Library/CoreServices/ServerVersion.plist" ] ; then configureOptions=( "${configureOptions[@]}" "System Configuration" ) ; fi
		configureOptions=( "${configureOptions[@]}" "User Account" )
		detect_Packages
		if [ ${#Packages[@]} -gt 0 ] ; then configureOptions=( "${configureOptions[@]}" "Install Package" ) ; fi
		if [ -e "/Volumes/${targDisk}/var/db/receipts/com.apple.pkg.GarageBandBasicContent.bom" ] || [ -e "/Volumes/${targDisk}/var/db/receipts/com.apple.pkg.GarageBand_AppStore.bom" ] || [ -e "/Volumes/${targDisk}/var/db/receipts/com.apple.pkg.iMovie_AppStore.bom" ] || [ -e "/Volumes/${targDisk}/var/db/receipts/com.apple.pkg.iPhoto_AppStore.bom" ] ; then configureOptions=( "${configureOptions[@]}" "Remove iLife" ) ; fi
	fi
	configureOptions=( "${configureOptions[@]}" "Main Menu" )
}

function display_Package {
	if [ -n "${Package}" ] ; then
		echo "Package Name:	${Package}"
	else
		echo "Package Name:	-"
	fi
}

function set_packageOptions {
	packageOptions=( "Select Package" )
	if [ -n "${Package}" ] ; then packageOptions=( "${packageOptions[@]}" "Install Package" ) ; fi
	packageOptions=( "${packageOptions[@]}" "Previous Menu" )
}

function select_Package {
	detect_Packages
	display_Title "Select Package"
	if [ ${#Packages[@]} -eq 0 ] ; then
		Package=""
		press_anyKey "No suitable packages found in Library."
	else
		display_Package
		echo
		display_Options "Packages" "Select a package: "
		select Package in "${Packages[@]}" ; do
			if [ -n "${Package}" ] ; then break ; fi
		done
	fi
	set_packageOptions
}

function menu_InstallPackage {
	set_packageOptions
	while [ "${packageOption}" != "Previous Menu" ] ; do
		display_Title "Install Package"
		display_baseImage
		display_Package
		echo
		display_Options "Options" "Select an option: "
		select packageOption in "${packageOptions[@]}" ; do
			case "${packageOption}" in
				"Select Package" ) select_Package ; packageOption="" ; break ;;
				"Install Package" ) install_Package "${PackagePath}/${Package}" ; packageOption="" ; break ;;
				"Previous Menu" ) break ;;
			esac
		done
	done
	Package=""
	packageOption=""
}

function remove_iLife {
	display_Title "Configure Image"
	display_baseImage
	echo
	removables=(
		"Applications/GarageBand.app"
		"Applications/iMovie.app"
		"Applications/iPhoto.app"
		"Library/Application Support/GarageBand"
		"Library/Audio/Apple Loops"
		"Library/Audio/Apple Loops Index"
		"var/db/receipts/com.apple.pkg.GarageBandBasicContent.bom"
		"var/db/receipts/com.apple.pkg.GarageBandBasicContent.plist"
		"var/db/receipts/com.apple.pkg.GarageBand_AppStore.bom"
		"var/db/receipts/com.apple.pkg.GarageBand_AppStore.plist"
		"var/db/receipts/com.apple.pkg.iMovie_AppStore.bom"
		"var/db/receipts/com.apple.pkg.iMovie_AppStore.plist"
		"var/db/receipts/com.apple.pkg.iPhoto_AppStore.bom"
		"var/db/receipts/com.apple.pkg.iPhoto_AppStore.plist"
	)
	for removable in "${removables[@]}" ; do
		if [ -e "/Volumes/${targDisk}/${removable}" ] ; then
			echo "Removing:	/Volumes/${targDisk}/${removable}"
			rm -rf "/Volumes/${targDisk}/${removable}"
		fi
	done
	echo
	press_anyKey
}

function menu_ConfigureImage {
	if [ -n "${baseImage}" ] ; then attach_baseImage ; fi
	while [ "${configureOption}" != "Main Menu" ] ; do
		set_configureOptions
		display_Title "Configure Image"
		display_baseImage
		echo
		display_Options "Options" "Select an option: "
		select configureOption in "${configureOptions[@]}" ; do
			case "${configureOption}" in
				"Select Image" ) select_baseImage ; attach_baseImage ; configureOption="" ; break ;;
				"System Configuration" ) menu_SystemConfiguration ; configureOption="" ; break ;;
				"User Account" ) menu_UserAccount ; configureOption="" ; break ;;
				"Install Package" ) menu_InstallPackage ; configureOption="" ; break ;;
				"Remove iLife" ) remove_iLife ; configureOption="" ; break ;;
				"Main Menu" ) eject_targDisk ; break ;;
			esac
		done
	done
	configureOption=""
	baseImage=""
}

function set_exportOptions {
	exportOptions=( "Select Image" )
	if [ -e "${LibraryPath}/Shadow/${baseImage}.shadow" ] ; then exportOptions=( "${exportOptions[@]}" "Export Master" ) ; fi
	exportOptions=( "${exportOptions[@]}" "Main Menu" )
}

function display_shadowFile {
	if [ -e "${LibraryPath}/Shadow/${baseImage}.shadow" ] ; then
		echo "Shadow File:	${baseImage}.shadow"
	else
		echo "Shadow File:	-"
	fi
}

function export_Image {
	display_Title "Export Image"
	display_baseImage
	display_shadowFile
	echo
	echo "Checking image..."
	targDisks=( `hdiutil attach -owners on -noverify "${LibraryPath}/${baseImage}" -shadow "${LibraryPath}/Shadow/${baseImage}.shadow" | grep "/Volumes/" | awk -F "/Volumes/" '{print $NF}' | sed -e "s/ /%20/g"` )
	if [ ${#targDisks[@]} -eq 0 ] ; then
		printf "\n\033[1m${baseImage}\033[m doesn't appear to be a valid.\n"
		press_anyKey
	else
		i=0 ; for Element in "${targDisks[@]}" ; do targDisks[i]=$( echo "${Element}" | sed -e "s/%20/ /g" ) ; let i++ ; done
		for targDisk in "${targDisks[@]}" ; do if [ -e "/Volumes/${targDisk}/System/Library/CoreServices/SystemVersion.plist" ] ; then break ; fi ; done
		baseBuild=`echo "${baseImage}" | awk -F "_" '{print $2}'`
		currentBuild=`defaults read "/Volumes/${targDisk}/System/Library/CoreServices/SystemVersion" ProductBuildVersion | awk {'print tolower()'}`
		if [ "${currentBuild}" != "${baseBuild}" ] ; then imageName="${baseImage//.dmg/}+${currentBuild}_update" ; else imageName="${baseImage//.dmg/}" ; fi
		sleep 5
		eject_targDisk
		while [ -e "${ExportPath}/${imageName}.i386.hfs.dmg" ] ; do
			printf "\nA image named \033[1m${imageName}.i386.hfs.dmg\033[m already exists.\n"
			read -sn 1 -p "Would you like to overwrite it (y/N)? " Overwrite < /dev/tty
			echo
			if [ -z "${Overwrite}" ] ; then Overwrite="n" ; fi
			case "${Overwrite}" in
				"Y" | "y" ) echo ; rm -f "${ExportPath}/${imageName}.i386.hfs.dmg" ; break ;;
				"N" | "n" ) return 0 ; break ;;
			esac
			echo
		done
		if [ ! -e "${ExportPath}/${imageName}.i386.hfs.dmg" ] ; then
			if [ ! -e "${ExportPath}" ] ; then mkdir -p "${ExportPath}" ; chown 99:99 "${ExportPath}" ; fi
			hdiutil convert -format UDZO "${LibraryPath}/${baseImage}" -shadow "${LibraryPath}/Shadow/${baseImage}.shadow" -o "${ExportPath}/${imageName}.i386.hfs.dmg"
		fi
		while [ -z "${scanImage}" ] ; do
			echo
			read -sn 1 -p "Scan image for restore (Y/n)? " scanImage < /dev/tty
			echo
			if [ -z "${scanImage}" ] ; then scanImage="y" ; fi
			case "${scanImage}" in
				"Y" | "y" ) asr imagescan --source "${ExportPath}/${imageName}.i386.hfs.dmg" ; press_anyKey ;;
				"N" | "n" ) echo ;;
				* ) echo ; scanImage="" ;;
			esac
		done
	fi
	baseImage=""
	imageName=""
	scanImage=""
}

function menu_ExportImage {
	while [ "${exportOption}" != "Main Menu" ] ; do
		set_exportOptions
		display_Title "Export Image"
		display_baseImage
		display_shadowFile
		echo
		display_Options "Options" "Select an option: "
		select exportOption in "${exportOptions[@]}" ; do
			case "${exportOption}" in
				"Select Image" ) select_baseImage ; exportOption="" ; break ;;
				"Export Master" ) export_Image ; exportOption="" ; break ;;
				"Main Menu" ) break ;;
			esac
		done
	done
	exportOption=""
	baseImage=""
}

function main_Menu {
	while [ "${menuOption}" != "Exit" ] ; do
		menuOptions=( "Preferences" "Create Image" "Configure Image" "Export Image" "Exit" )
		display_Title "Main Menu"
		display_Options "Options" "Select an option: "
		select menuOption in "${menuOptions[@]}" ; do
			case "${menuOption}" in
				"Preferences" ) menu_Preferences ; menuOption="" ; break ;;
				"Create Image" ) menu_CreateImage ; menuOption="" ; break ;;
				"Configure Image" ) menu_ConfigureImage ; menuOption="" ; break ;;
				"Export Image" ) menu_ExportImage ; menuOption="" ; break ;;
				"Exit" ) echo ; exit 0 ;;
			esac
		done
	done
}

display_Title "Initializing"
privelege_Check
get_DefaultPaths
get_ImageSettings
get_SystemConfiguration
get_UserAccount
main_Menu
